
STEVAL-STWINKT1B_ISM330DHCX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000daac  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  0800dc70  0800dc70  0001dc70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e28c  0800e28c  00020354  2**0
                  CONTENTS
  4 .ARM          00000008  0800e28c  0800e28c  0001e28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e294  0800e294  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e294  0800e294  0001e294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e298  0800e298  0001e298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800e29c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .neai         00000168  200001ec  0800e488  000201ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000183c  20000354  0800e5f0  00020354  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001b90  0800e5f0  00021b90  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c58d  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002241  00000000  00000000  0003c911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001718  00000000  00000000  0003eb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001640  00000000  00000000  00040270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000321ec  00000000  00000000  000418b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001574d  00000000  00000000  00073a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012d240  00000000  00000000  000891e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c9  00000000  00000000  001b6429  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007a58  00000000  00000000  001b64f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000354 	.word	0x20000354
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800dc54 	.word	0x0800dc54

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000358 	.word	0x20000358
 80001fc:	0800dc54 	.word	0x0800dc54

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800102c:	b08a      	sub	sp, #40	; 0x28
 800102e:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 8001030:	4b99      	ldr	r3, [pc, #612]	; (8001298 <main+0x270>)
 8001032:	4a9a      	ldr	r2, [pc, #616]	; (800129c <main+0x274>)
 8001034:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 8001036:	4b98      	ldr	r3, [pc, #608]	; (8001298 <main+0x270>)
 8001038:	4a99      	ldr	r2, [pc, #612]	; (80012a0 <main+0x278>)
 800103a:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &hspi3;
 800103c:	4b96      	ldr	r3, [pc, #600]	; (8001298 <main+0x270>)
 800103e:	4a99      	ldr	r2, [pc, #612]	; (80012a4 <main+0x27c>)
 8001040:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001042:	f001 f93e 	bl	80022c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001046:	f000 f94b 	bl	80012e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104a:	f000 fa23 	bl	8001494 <MX_GPIO_Init>
  MX_SPI3_Init();
 800104e:	f000 f997 	bl	8001380 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8001052:	f000 f9d3 	bl	80013fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  KIN1_InitCycleCounter();
 8001056:	4b94      	ldr	r3, [pc, #592]	; (80012a8 <main+0x280>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a93      	ldr	r2, [pc, #588]	; (80012a8 <main+0x280>)
 800105c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001060:	6013      	str	r3, [r2, #0]
  KIN1_EnableCycleCounter();
 8001062:	4b92      	ldr	r3, [pc, #584]	; (80012ac <main+0x284>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a91      	ldr	r2, [pc, #580]	; (80012ac <main+0x284>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6013      	str	r3, [r2, #0]
  ism330dhcx_initialize();
 800106e:	f000 fdaf 	bl	8001bd0 <ism330dhcx_initialize>
  if (NEAI_MODE) {
    neai_state = neai_anomalydetection_init();
 8001072:	f006 f851 	bl	8007118 <neai_anomalydetection_init>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	4b8d      	ldr	r3, [pc, #564]	; (80012b0 <main+0x288>)
 800107c:	701a      	strb	r2, [r3, #0]
    printf("Initialize NEAI library. NEAI init return: %d.\n\r",  neai_state);
 800107e:	4b8c      	ldr	r3, [pc, #560]	; (80012b0 <main+0x288>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	4619      	mov	r1, r3
 8001084:	488b      	ldr	r0, [pc, #556]	; (80012b4 <main+0x28c>)
 8001086:	f008 ff1d 	bl	8009ec4 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint8_t wtm_flag = 0, status2 = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]
 800108e:	2300      	movs	r3, #0
 8001090:	71fb      	strb	r3, [r7, #7]
    uint16_t num = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	80bb      	strh	r3, [r7, #4]
    if (drdy) {
 8001096:	4b88      	ldr	r3, [pc, #544]	; (80012b8 <main+0x290>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0f5      	beq.n	800108a <main+0x62>
      /* Reset data ready condition */
      drdy = 0;
 800109e:	4b86      	ldr	r3, [pc, #536]	; (80012b8 <main+0x290>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
      ism330dhcx_read_reg(&dev_ctx, ISM330DHCX_FIFO_STATUS2, &status2, 1);
 80010a4:	1dfa      	adds	r2, r7, #7
 80010a6:	2301      	movs	r3, #1
 80010a8:	213b      	movs	r1, #59	; 0x3b
 80010aa:	487b      	ldr	r0, [pc, #492]	; (8001298 <main+0x270>)
 80010ac:	f004 ff36 	bl	8005f1c <ism330dhcx_read_reg>
      wtm_flag = status2 >> 7;
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	09db      	lsrs	r3, r3, #7
 80010b4:	73fb      	strb	r3, [r7, #15]
      if (wtm_flag) {
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0e6      	beq.n	800108a <main+0x62>
        ism330dhcx_fifo_data_level_get(&dev_ctx, &num);
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	4619      	mov	r1, r3
 80010c0:	4875      	ldr	r0, [pc, #468]	; (8001298 <main+0x270>)
 80010c2:	f005 fa5e 	bl	8006582 <ism330dhcx_fifo_data_level_get>
        if (data_left < num) {
 80010c6:	4b7d      	ldr	r3, [pc, #500]	; (80012bc <main+0x294>)
 80010c8:	881a      	ldrh	r2, [r3, #0]
 80010ca:	88bb      	ldrh	r3, [r7, #4]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d202      	bcs.n	80010d6 <main+0xae>
          num = data_left;
 80010d0:	4b7a      	ldr	r3, [pc, #488]	; (80012bc <main+0x294>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	80bb      	strh	r3, [r7, #4]
        }
        ism330dhcx_get_buffer_from_fifo(num);
 80010d6:	88bb      	ldrh	r3, [r7, #4]
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 fddd 	bl	8001c98 <ism330dhcx_get_buffer_from_fifo>
        data_left -= num;
 80010de:	4b77      	ldr	r3, [pc, #476]	; (80012bc <main+0x294>)
 80010e0:	881a      	ldrh	r2, [r3, #0]
 80010e2:	88bb      	ldrh	r3, [r7, #4]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	4b74      	ldr	r3, [pc, #464]	; (80012bc <main+0x294>)
 80010ea:	801a      	strh	r2, [r3, #0]
        number_read += num;
 80010ec:	4b74      	ldr	r3, [pc, #464]	; (80012c0 <main+0x298>)
 80010ee:	881a      	ldrh	r2, [r3, #0]
 80010f0:	88bb      	ldrh	r3, [r7, #4]
 80010f2:	4413      	add	r3, r2
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	4b72      	ldr	r3, [pc, #456]	; (80012c0 <main+0x298>)
 80010f8:	801a      	strh	r2, [r3, #0]
        if (data_left == 0) {
 80010fa:	4b70      	ldr	r3, [pc, #448]	; (80012bc <main+0x294>)
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f040 80b9 	bne.w	8001276 <main+0x24e>
          ism330dhcx_fifo_mode_set(&dev_ctx, ISM330DHCX_BYPASS_MODE);
 8001104:	2100      	movs	r1, #0
 8001106:	4864      	ldr	r0, [pc, #400]	; (8001298 <main+0x270>)
 8001108:	f005 fa15 	bl	8006536 <ism330dhcx_fifo_mode_set>
#if NEAI_MODE
          uint32_t cycles_cnt = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
          if (neai_cnt < NEAI_LEARN_NB) {
 8001110:	4b6c      	ldr	r3, [pc, #432]	; (80012c4 <main+0x29c>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	2b1d      	cmp	r3, #29
 8001116:	d84f      	bhi.n	80011b8 <main+0x190>
            neai_cnt++;
 8001118:	4b6a      	ldr	r3, [pc, #424]	; (80012c4 <main+0x29c>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	3301      	adds	r3, #1
 800111e:	b29a      	uxth	r2, r3
 8001120:	4b68      	ldr	r3, [pc, #416]	; (80012c4 <main+0x29c>)
 8001122:	801a      	strh	r2, [r3, #0]
            KIN1_ResetCycleCounter();
 8001124:	4b68      	ldr	r3, [pc, #416]	; (80012c8 <main+0x2a0>)
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
            neai_state = neai_anomalydetection_learn(neai_buffer);
 800112a:	4868      	ldr	r0, [pc, #416]	; (80012cc <main+0x2a4>)
 800112c:	f006 f860 	bl	80071f0 <neai_anomalydetection_learn>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	4b5e      	ldr	r3, [pc, #376]	; (80012b0 <main+0x288>)
 8001136:	701a      	strb	r2, [r3, #0]
            cycles_cnt = KIN1_GetCycleCounter();
 8001138:	4b63      	ldr	r3, [pc, #396]	; (80012c8 <main+0x2a0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60bb      	str	r3, [r7, #8]
            neai_time = (cycles_cnt * 1000000.0) / HAL_RCC_GetSysClockFreq();
 800113e:	68b8      	ldr	r0, [r7, #8]
 8001140:	f7ff f9f8 	bl	8000534 <__aeabi_ui2d>
 8001144:	a352      	add	r3, pc, #328	; (adr r3, 8001290 <main+0x268>)
 8001146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114a:	f7ff fa6d 	bl	8000628 <__aeabi_dmul>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4614      	mov	r4, r2
 8001154:	461d      	mov	r5, r3
 8001156:	f002 fa49 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 800115a:	4603      	mov	r3, r0
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f9e9 	bl	8000534 <__aeabi_ui2d>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4620      	mov	r0, r4
 8001168:	4629      	mov	r1, r5
 800116a:	f7ff fb87 	bl	800087c <__aeabi_ddiv>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f7ff fd4f 	bl	8000c18 <__aeabi_d2f>
 800117a:	4603      	mov	r3, r0
 800117c:	4a54      	ldr	r2, [pc, #336]	; (80012d0 <main+0x2a8>)
 800117e:	6013      	str	r3, [r2, #0]
            printf("Learn: %d / %d. NEAI learn return: %d. Cycles counter: %ld = %.1f µs at %ld Hz.\n\r",
 8001180:	4b50      	ldr	r3, [pc, #320]	; (80012c4 <main+0x29c>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	461e      	mov	r6, r3
 8001186:	4b4a      	ldr	r3, [pc, #296]	; (80012b0 <main+0x288>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	4698      	mov	r8, r3
 800118c:	4b50      	ldr	r3, [pc, #320]	; (80012d0 <main+0x2a8>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9f1 	bl	8000578 <__aeabi_f2d>
 8001196:	4604      	mov	r4, r0
 8001198:	460d      	mov	r5, r1
 800119a:	f002 fa27 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 800119e:	4603      	mov	r3, r0
 80011a0:	9304      	str	r3, [sp, #16]
 80011a2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	4643      	mov	r3, r8
 80011ac:	221e      	movs	r2, #30
 80011ae:	4631      	mov	r1, r6
 80011b0:	4848      	ldr	r0, [pc, #288]	; (80012d4 <main+0x2ac>)
 80011b2:	f008 fe87 	bl	8009ec4 <iprintf>
 80011b6:	e047      	b.n	8001248 <main+0x220>
                  neai_cnt, NEAI_LEARN_NB, neai_state, cycles_cnt, neai_time, HAL_RCC_GetSysClockFreq());
          }
          else {
            KIN1_ResetCycleCounter();
 80011b8:	4b43      	ldr	r3, [pc, #268]	; (80012c8 <main+0x2a0>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
            neai_state = neai_anomalydetection_detect(neai_buffer, &neai_similarity);
 80011be:	4946      	ldr	r1, [pc, #280]	; (80012d8 <main+0x2b0>)
 80011c0:	4842      	ldr	r0, [pc, #264]	; (80012cc <main+0x2a4>)
 80011c2:	f007 fc71 	bl	8008aa8 <neai_anomalydetection_detect>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b39      	ldr	r3, [pc, #228]	; (80012b0 <main+0x288>)
 80011cc:	701a      	strb	r2, [r3, #0]
            cycles_cnt = KIN1_GetCycleCounter();
 80011ce:	4b3e      	ldr	r3, [pc, #248]	; (80012c8 <main+0x2a0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	60bb      	str	r3, [r7, #8]
            neai_time = (cycles_cnt * 1000000.0) / HAL_RCC_GetSysClockFreq();
 80011d4:	68b8      	ldr	r0, [r7, #8]
 80011d6:	f7ff f9ad 	bl	8000534 <__aeabi_ui2d>
 80011da:	a32d      	add	r3, pc, #180	; (adr r3, 8001290 <main+0x268>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f7ff fa22 	bl	8000628 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4614      	mov	r4, r2
 80011ea:	461d      	mov	r5, r3
 80011ec:	f002 f9fe 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f99e 	bl	8000534 <__aeabi_ui2d>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4620      	mov	r0, r4
 80011fe:	4629      	mov	r1, r5
 8001200:	f7ff fb3c 	bl	800087c <__aeabi_ddiv>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fd04 	bl	8000c18 <__aeabi_d2f>
 8001210:	4603      	mov	r3, r0
 8001212:	4a2f      	ldr	r2, [pc, #188]	; (80012d0 <main+0x2a8>)
 8001214:	6013      	str	r3, [r2, #0]
            printf("Similarity: %d / 100. NEAI detect return: %d. Cycles counter: %ld = %.1f µs at %ld Hz.\n\r",
 8001216:	4b30      	ldr	r3, [pc, #192]	; (80012d8 <main+0x2b0>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	461e      	mov	r6, r3
 800121c:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <main+0x288>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4698      	mov	r8, r3
 8001222:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <main+0x2a8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f9a6 	bl	8000578 <__aeabi_f2d>
 800122c:	4604      	mov	r4, r0
 800122e:	460d      	mov	r5, r1
 8001230:	f002 f9dc 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 8001234:	4603      	mov	r3, r0
 8001236:	9302      	str	r3, [sp, #8]
 8001238:	e9cd 4500 	strd	r4, r5, [sp]
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	4642      	mov	r2, r8
 8001240:	4631      	mov	r1, r6
 8001242:	4826      	ldr	r0, [pc, #152]	; (80012dc <main+0x2b4>)
 8001244:	f008 fe3e 	bl	8009ec4 <iprintf>
          for (uint16_t i = 0; i < AXIS * SAMPLES; i++) {
            printf("%.3f ", neai_buffer[i]);
          }
          printf("\n");
#endif
          data_left = (uint16_t) SAMPLES;
 8001248:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <main+0x294>)
 800124a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800124e:	801a      	strh	r2, [r3, #0]
          number_read = 0;
 8001250:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <main+0x298>)
 8001252:	2200      	movs	r2, #0
 8001254:	801a      	strh	r2, [r3, #0]
          memset(neai_buffer, 0x00, AXIS * SAMPLES * sizeof(float));
 8001256:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800125a:	2100      	movs	r1, #0
 800125c:	481b      	ldr	r0, [pc, #108]	; (80012cc <main+0x2a4>)
 800125e:	f007 ffaf 	bl	80091c0 <memset>
          if (SAMPLES <= MAX_FIFO_SIZE) {
            ism330dhcx_fifo_watermark_set(&dev_ctx, (uint16_t) SAMPLES);
 8001262:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001266:	480c      	ldr	r0, [pc, #48]	; (8001298 <main+0x270>)
 8001268:	f005 f8e3 	bl	8006432 <ism330dhcx_fifo_watermark_set>
          }
          else {
            ism330dhcx_fifo_watermark_set(&dev_ctx, (uint16_t) MAX_FIFO_SIZE);
          }
          ism330dhcx_fifo_mode_set(&dev_ctx, ISM330DHCX_STREAM_MODE);
 800126c:	2106      	movs	r1, #6
 800126e:	480a      	ldr	r0, [pc, #40]	; (8001298 <main+0x270>)
 8001270:	f005 f961 	bl	8006536 <ism330dhcx_fifo_mode_set>
 8001274:	e709      	b.n	800108a <main+0x62>
        }
        else if (data_left < MAX_FIFO_SIZE) {
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <main+0x294>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	2bff      	cmp	r3, #255	; 0xff
 800127c:	f63f af05 	bhi.w	800108a <main+0x62>
          ism330dhcx_fifo_watermark_set(&dev_ctx, data_left);
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <main+0x294>)
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	4804      	ldr	r0, [pc, #16]	; (8001298 <main+0x270>)
 8001288:	f005 f8d3 	bl	8006432 <ism330dhcx_fifo_watermark_set>
  {
 800128c:	e6fd      	b.n	800108a <main+0x62>
 800128e:	bf00      	nop
 8001290:	00000000 	.word	0x00000000
 8001294:	412e8480 	.word	0x412e8480
 8001298:	20001088 	.word	0x20001088
 800129c:	08001b15 	.word	0x08001b15
 80012a0:	08001b6d 	.word	0x08001b6d
 80012a4:	20000370 	.word	0x20000370
 80012a8:	e000edfc 	.word	0xe000edfc
 80012ac:	e0001000 	.word	0xe0001000
 80012b0:	20000479 	.word	0x20000479
 80012b4:	0800dc70 	.word	0x0800dc70
 80012b8:	2000047a 	.word	0x2000047a
 80012bc:	20000000 	.word	0x20000000
 80012c0:	2000047c 	.word	0x2000047c
 80012c4:	20000480 	.word	0x20000480
 80012c8:	e0001004 	.word	0xe0001004
 80012cc:	20000488 	.word	0x20000488
 80012d0:	20000484 	.word	0x20000484
 80012d4:	0800dca4 	.word	0x0800dca4
 80012d8:	20000478 	.word	0x20000478
 80012dc:	0800dcf8 	.word	0x0800dcf8

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b096      	sub	sp, #88	; 0x58
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	2244      	movs	r2, #68	; 0x44
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f007 ff66 	bl	80091c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	463b      	mov	r3, r7
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001302:	2000      	movs	r0, #0
 8001304:	f001 fb6a 	bl	80029dc <HAL_PWREx_ControlVoltageScaling>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800130e:	f000 fdcf 	bl	8001eb0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001312:	2302      	movs	r3, #2
 8001314:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001316:	f44f 7380 	mov.w	r3, #256	; 0x100
 800131a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800131c:	2340      	movs	r3, #64	; 0x40
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001320:	2302      	movs	r3, #2
 8001322:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001324:	2302      	movs	r3, #2
 8001326:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001328:	2302      	movs	r3, #2
 800132a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 800132c:	231e      	movs	r3, #30
 800132e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001330:	2302      	movs	r3, #2
 8001332:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001334:	2302      	movs	r3, #2
 8001336:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001338:	2302      	movs	r3, #2
 800133a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4618      	mov	r0, r3
 8001342:	f001 fbff 	bl	8002b44 <HAL_RCC_OscConfig>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800134c:	f000 fdb0 	bl	8001eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001350:	230f      	movs	r3, #15
 8001352:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001354:	2303      	movs	r3, #3
 8001356:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001364:	463b      	mov	r3, r7
 8001366:	2105      	movs	r1, #5
 8001368:	4618      	mov	r0, r3
 800136a:	f002 f805 	bl	8003378 <HAL_RCC_ClockConfig>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001374:	f000 fd9c 	bl	8001eb0 <Error_Handler>
  }
}
 8001378:	bf00      	nop
 800137a:	3758      	adds	r7, #88	; 0x58
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <MX_SPI3_Init+0x74>)
 8001386:	4a1c      	ldr	r2, [pc, #112]	; (80013f8 <MX_SPI3_Init+0x78>)
 8001388:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800138a:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <MX_SPI3_Init+0x74>)
 800138c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001390:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <MX_SPI3_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <MX_SPI3_Init+0x74>)
 800139a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800139e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <MX_SPI3_Init+0x74>)
 80013a2:	2202      	movs	r2, #2
 80013a4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <MX_SPI3_Init+0x74>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_SPI3_Init+0x74>)
 80013ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <MX_SPI3_Init+0x74>)
 80013b6:	2218      	movs	r2, #24
 80013b8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_SPI3_Init+0x74>)
 80013bc:	2200      	movs	r2, #0
 80013be:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_SPI3_Init+0x74>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <MX_SPI3_Init+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_SPI3_Init+0x74>)
 80013ce:	2207      	movs	r2, #7
 80013d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <MX_SPI3_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_SPI3_Init+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_SPI3_Init+0x74>)
 80013e0:	f002 fffc 	bl	80043dc <HAL_SPI_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80013ea:	f000 fd61 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000370 	.word	0x20000370
 80013f8:	40003c00 	.word	0x40003c00

080013fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001400:	4b22      	ldr	r3, [pc, #136]	; (800148c <MX_USART2_UART_Init+0x90>)
 8001402:	4a23      	ldr	r2, [pc, #140]	; (8001490 <MX_USART2_UART_Init+0x94>)
 8001404:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001406:	4b21      	ldr	r3, [pc, #132]	; (800148c <MX_USART2_UART_Init+0x90>)
 8001408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800140c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800140e:	4b1f      	ldr	r3, [pc, #124]	; (800148c <MX_USART2_UART_Init+0x90>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001414:	4b1d      	ldr	r3, [pc, #116]	; (800148c <MX_USART2_UART_Init+0x90>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800141a:	4b1c      	ldr	r3, [pc, #112]	; (800148c <MX_USART2_UART_Init+0x90>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001420:	4b1a      	ldr	r3, [pc, #104]	; (800148c <MX_USART2_UART_Init+0x90>)
 8001422:	220c      	movs	r2, #12
 8001424:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001426:	4b19      	ldr	r3, [pc, #100]	; (800148c <MX_USART2_UART_Init+0x90>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800142c:	4b17      	ldr	r3, [pc, #92]	; (800148c <MX_USART2_UART_Init+0x90>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001432:	4b16      	ldr	r3, [pc, #88]	; (800148c <MX_USART2_UART_Init+0x90>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <MX_USART2_UART_Init+0x90>)
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <MX_USART2_UART_Init+0x90>)
 8001440:	2200      	movs	r2, #0
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001444:	4811      	ldr	r0, [pc, #68]	; (800148c <MX_USART2_UART_Init+0x90>)
 8001446:	f003 fed9 	bl	80051fc <HAL_UART_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001450:	f000 fd2e 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001454:	2100      	movs	r1, #0
 8001456:	480d      	ldr	r0, [pc, #52]	; (800148c <MX_USART2_UART_Init+0x90>)
 8001458:	f004 fc95 	bl	8005d86 <HAL_UARTEx_SetTxFifoThreshold>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001462:	f000 fd25 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001466:	2100      	movs	r1, #0
 8001468:	4808      	ldr	r0, [pc, #32]	; (800148c <MX_USART2_UART_Init+0x90>)
 800146a:	f004 fcca 	bl	8005e02 <HAL_UARTEx_SetRxFifoThreshold>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001474:	f000 fd1c 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001478:	4804      	ldr	r0, [pc, #16]	; (800148c <MX_USART2_UART_Init+0x90>)
 800147a:	f004 fc4b 	bl	8005d14 <HAL_UARTEx_DisableFifoMode>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001484:	f000 fd14 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200003d4 	.word	0x200003d4
 8001490:	40004400 	.word	0x40004400

08001494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08e      	sub	sp, #56	; 0x38
 8001498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014aa:	4bb8      	ldr	r3, [pc, #736]	; (800178c <MX_GPIO_Init+0x2f8>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	4ab7      	ldr	r2, [pc, #732]	; (800178c <MX_GPIO_Init+0x2f8>)
 80014b0:	f043 0310 	orr.w	r3, r3, #16
 80014b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b6:	4bb5      	ldr	r3, [pc, #724]	; (800178c <MX_GPIO_Init+0x2f8>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	f003 0310 	and.w	r3, r3, #16
 80014be:	623b      	str	r3, [r7, #32]
 80014c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	4bb2      	ldr	r3, [pc, #712]	; (800178c <MX_GPIO_Init+0x2f8>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	4ab1      	ldr	r2, [pc, #708]	; (800178c <MX_GPIO_Init+0x2f8>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ce:	4baf      	ldr	r3, [pc, #700]	; (800178c <MX_GPIO_Init+0x2f8>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	61fb      	str	r3, [r7, #28]
 80014d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014da:	4bac      	ldr	r3, [pc, #688]	; (800178c <MX_GPIO_Init+0x2f8>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	4aab      	ldr	r2, [pc, #684]	; (800178c <MX_GPIO_Init+0x2f8>)
 80014e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e6:	4ba9      	ldr	r3, [pc, #676]	; (800178c <MX_GPIO_Init+0x2f8>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ee:	61bb      	str	r3, [r7, #24]
 80014f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f2:	4ba6      	ldr	r3, [pc, #664]	; (800178c <MX_GPIO_Init+0x2f8>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	4aa5      	ldr	r2, [pc, #660]	; (800178c <MX_GPIO_Init+0x2f8>)
 80014f8:	f043 0308 	orr.w	r3, r3, #8
 80014fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fe:	4ba3      	ldr	r3, [pc, #652]	; (800178c <MX_GPIO_Init+0x2f8>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150a:	4ba0      	ldr	r3, [pc, #640]	; (800178c <MX_GPIO_Init+0x2f8>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	4a9f      	ldr	r2, [pc, #636]	; (800178c <MX_GPIO_Init+0x2f8>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001516:	4b9d      	ldr	r3, [pc, #628]	; (800178c <MX_GPIO_Init+0x2f8>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	4b9a      	ldr	r3, [pc, #616]	; (800178c <MX_GPIO_Init+0x2f8>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	4a99      	ldr	r2, [pc, #612]	; (800178c <MX_GPIO_Init+0x2f8>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152e:	4b97      	ldr	r3, [pc, #604]	; (800178c <MX_GPIO_Init+0x2f8>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800153a:	4b94      	ldr	r3, [pc, #592]	; (800178c <MX_GPIO_Init+0x2f8>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	4a93      	ldr	r2, [pc, #588]	; (800178c <MX_GPIO_Init+0x2f8>)
 8001540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001546:	4b91      	ldr	r3, [pc, #580]	; (800178c <MX_GPIO_Init+0x2f8>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8001552:	f001 fae7 	bl	8002b24 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001556:	4b8d      	ldr	r3, [pc, #564]	; (800178c <MX_GPIO_Init+0x2f8>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	4a8c      	ldr	r2, [pc, #560]	; (800178c <MX_GPIO_Init+0x2f8>)
 800155c:	f043 0320 	orr.w	r3, r3, #32
 8001560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001562:	4b8a      	ldr	r3, [pc, #552]	; (800178c <MX_GPIO_Init+0x2f8>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	f003 0320 	and.w	r3, r3, #32
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|DCDC_2_EN_Pin, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	f242 0102 	movw	r1, #8194	; 0x2002
 8001574:	4886      	ldr	r0, [pc, #536]	; (8001790 <MX_GPIO_Init+0x2fc>)
 8001576:	f001 f9e1 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|WIFI_WAKEUP_Pin|EX_RESET_Pin, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	f640 0181 	movw	r1, #2177	; 0x881
 8001580:	4884      	ldr	r0, [pc, #528]	; (8001794 <MX_GPIO_Init+0x300>)
 8001582:	f001 f9db 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RST_GPIO_Port, BLE_RST_Pin, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 7180 	mov.w	r1, #256	; 0x100
 800158c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001590:	f001 f9d4 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WIFI_RST_Pin|SPI2_MISO_p2_Pin, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	2144      	movs	r1, #68	; 0x44
 8001598:	487f      	ldr	r0, [pc, #508]	; (8001798 <MX_GPIO_Init+0x304>)
 800159a:	f001 f9cf 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CS_WIFI_Pin|CS_ADWB_Pin|CS_DHC_Pin, GPIO_PIN_SET);
 800159e:	2201      	movs	r2, #1
 80015a0:	f242 0128 	movw	r1, #8232	; 0x2028
 80015a4:	487d      	ldr	r0, [pc, #500]	; (800179c <MX_GPIO_Init+0x308>)
 80015a6:	f001 f9c9 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, C_EN_Pin|STSAFE_RESET_Pin|WIFI_BOOT0_Pin|SEL3_4_Pin, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	f44f 41aa 	mov.w	r1, #21760	; 0x5500
 80015b0:	487a      	ldr	r0, [pc, #488]	; (800179c <MX_GPIO_Init+0x308>)
 80015b2:	f001 f9c3 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BLE_SPI_CS_Pin|SEL1_2_Pin, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2121      	movs	r1, #33	; 0x21
 80015ba:	4879      	ldr	r0, [pc, #484]	; (80017a0 <MX_GPIO_Init+0x30c>)
 80015bc:	f001 f9be 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_DH_GPIO_Port, CS_DH_Pin, GPIO_PIN_SET);
 80015c0:	2201      	movs	r2, #1
 80015c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015c6:	4873      	ldr	r0, [pc, #460]	; (8001794 <MX_GPIO_Init+0x300>)
 80015c8:	f001 f9b8 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_MOSI_p2_Pin|PB11_Pin, GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 80015d2:	4874      	ldr	r0, [pc, #464]	; (80017a4 <MX_GPIO_Init+0x310>)
 80015d4:	f001 f9b2 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOOT0_PE0_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0_Pin|BLE_TEST8_Pin;
 80015d8:	f240 4301 	movw	r3, #1025	; 0x401
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015de:	2300      	movs	r3, #0
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ea:	4619      	mov	r1, r3
 80015ec:	4868      	ldr	r0, [pc, #416]	; (8001790 <MX_GPIO_Init+0x2fc>)
 80015ee:	f001 f813 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9_Pin PB8_Pin PB14_Pin CHRGB0_Pin */
  GPIO_InitStruct.Pin = PB9_Pin|PB8_Pin|PB14_Pin|CHRGB0_Pin;
 80015f2:	f244 3301 	movw	r3, #17153	; 0x4301
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f8:	2303      	movs	r3, #3
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001604:	4619      	mov	r1, r3
 8001606:	4867      	ldr	r0, [pc, #412]	; (80017a4 <MX_GPIO_Init+0x310>)
 8001608:	f001 f806 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_PE0H3_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0H3_Pin;
 800160c:	2308      	movs	r3, #8
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001610:	2300      	movs	r3, #0
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT0_PE0H3_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161c:	4619      	mov	r1, r3
 800161e:	4862      	ldr	r0, [pc, #392]	; (80017a8 <MX_GPIO_Init+0x314>)
 8001620:	f000 fffa 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MISO_Pin SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 8001624:	230a      	movs	r3, #10
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001630:	2303      	movs	r3, #3
 8001632:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001634:	2305      	movs	r3, #5
 8001636:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163c:	4619      	mov	r1, r3
 800163e:	4855      	ldr	r0, [pc, #340]	; (8001794 <MX_GPIO_Init+0x300>)
 8001640:	f000 ffea 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_D3_Pin SDMMC_D2_Pin SDMMC_D1_Pin SDMMC_CK_Pin
                           SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D3_Pin|SDMMC_D2_Pin|SDMMC_D1_Pin|SDMMC_CK_Pin
 8001644:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDMMC_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001656:	230c      	movs	r3, #12
 8001658:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800165a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165e:	4619      	mov	r1, r3
 8001660:	484d      	ldr	r0, [pc, #308]	; (8001798 <MX_GPIO_Init+0x304>)
 8001662:	f000 ffd9 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_TEST9_Pin WIFI_DRDY_Pin INT1_DHC_Pin INT_STT_Pin
                           INT1_ADWB_Pin */
  GPIO_InitStruct.Pin = BLE_TEST9_Pin|WIFI_DRDY_Pin|INT1_DHC_Pin|INT_STT_Pin
 8001666:	f64c 1308 	movw	r3, #51464	; 0xc908
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
                          |INT1_ADWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800166c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167a:	4619      	mov	r1, r3
 800167c:	4844      	ldr	r0, [pc, #272]	; (8001790 <MX_GPIO_Init+0x2fc>)
 800167e:	f000 ffcb 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : EX_PWM_Pin */
  GPIO_InitStruct.Pin = EX_PWM_Pin;
 8001682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001694:	2301      	movs	r3, #1
 8001696:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(EX_PWM_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169c:	4619      	mov	r1, r3
 800169e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a2:	f000 ffb9 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DP_Pin OTG_FS_DM_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DP_Pin|OTG_FS_DM_Pin;
 80016a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b4:	2303      	movs	r3, #3
 80016b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016b8:	230a      	movs	r3, #10
 80016ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c0:	4619      	mov	r1, r3
 80016c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c6:	f000 ffa7 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SCK_A_Pin SAI1_MCLK_A_Pin SAI1_FS_A_DFSDM_D3_Pin SAI1_SD_A_Pin
                           SAI1_SD_B_Pin */
  GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_MCLK_A_Pin|SAI1_FS_A_DFSDM_D3_Pin|SAI1_SD_A_Pin
 80016ca:	23f4      	movs	r3, #244	; 0xf4
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
                          |SAI1_SD_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80016da:	230d      	movs	r3, #13
 80016dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e2:	4619      	mov	r1, r3
 80016e4:	482a      	ldr	r0, [pc, #168]	; (8001790 <MX_GPIO_Init+0x2fc>)
 80016e6:	f000 ff97 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin DCDC_2_EN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|DCDC_2_EN_Pin;
 80016ea:	f242 0302 	movw	r3, #8194	; 0x2002
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001700:	4619      	mov	r1, r3
 8001702:	4823      	ldr	r0, [pc, #140]	; (8001790 <MX_GPIO_Init+0x2fc>)
 8001704:	f000 ff88 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin WIFI_WAKEUP_Pin CS_DH_Pin EX_RESET_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin;
 8001708:	f648 0381 	movw	r3, #34945	; 0x8881
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170e:	2301      	movs	r3, #1
 8001710:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800171a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171e:	4619      	mov	r1, r3
 8001720:	481c      	ldr	r0, [pc, #112]	; (8001794 <MX_GPIO_Init+0x300>)
 8001722:	f000 ff79 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10_Pin PA9_Pin PA0_Pin DAC1_OUT1_Pin
                           PA1_Pin */
  GPIO_InitStruct.Pin = PA10_Pin|PA9_Pin|PA0_Pin|DAC1_OUT1_Pin
 8001726:	f240 6313 	movw	r3, #1555	; 0x613
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
                          |PA1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800172c:	2303      	movs	r3, #3
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001738:	4619      	mov	r1, r3
 800173a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173e:	f000 ff6b 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN5_Pin DFSDM1_D7_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN5_Pin|DFSDM1_D7_Pin;
 8001742:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800174c:	2302      	movs	r3, #2
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001754:	2306      	movs	r3, #6
 8001756:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175c:	4619      	mov	r1, r3
 800175e:	4811      	ldr	r0, [pc, #68]	; (80017a4 <MX_GPIO_Init+0x310>)
 8001760:	f000 ff5a 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12_Pin PG10_Pin PG9_Pin */
  GPIO_InitStruct.Pin = PG12_Pin|PG10_Pin|PG9_Pin;
 8001764:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800176a:	2303      	movs	r3, #3
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001776:	4619      	mov	r1, r3
 8001778:	4809      	ldr	r0, [pc, #36]	; (80017a0 <MX_GPIO_Init+0x30c>)
 800177a:	f000 ff4d 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800177e:	2304      	movs	r3, #4
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	e010      	b.n	80017ac <MX_GPIO_Init+0x318>
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000
 8001790:	48001000 	.word	0x48001000
 8001794:	48000c00 	.word	0x48000c00
 8001798:	48000800 	.word	0x48000800
 800179c:	48001400 	.word	0x48001400
 80017a0:	48001800 	.word	0x48001800
 80017a4:	48000400 	.word	0x48000400
 80017a8:	48001c00 	.word	0x48001c00
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80017b2:	230c      	movs	r3, #12
 80017b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80017b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ba:	4619      	mov	r1, r3
 80017bc:	48b9      	ldr	r0, [pc, #740]	; (8001aa4 <MX_GPIO_Init+0x610>)
 80017be:	f000 ff2b 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_RST_Pin */
  GPIO_InitStruct.Pin = BLE_RST_Pin;
 80017c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c8:	2301      	movs	r3, #1
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BLE_RST_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d8:	4619      	mov	r1, r3
 80017da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017de:	f000 ff1b 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_RST_Pin SPI2_MISO_p2_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin|SPI2_MISO_p2_Pin;
 80017e2:	2344      	movs	r3, #68	; 0x44
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e6:	2301      	movs	r3, #1
 80017e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f6:	4619      	mov	r1, r3
 80017f8:	48ab      	ldr	r0, [pc, #684]	; (8001aa8 <MX_GPIO_Init+0x614>)
 80017fa:	f000 ff0d 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C2_SMBA_Pin I2C2_SDA_Pin I2C2_SDAF0_Pin */
  GPIO_InitStruct.Pin = I2C2_SMBA_Pin|I2C2_SDA_Pin|I2C2_SDAF0_Pin;
 80017fe:	2307      	movs	r3, #7
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001802:	2312      	movs	r3, #18
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800180e:	2304      	movs	r3, #4
 8001810:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001816:	4619      	mov	r1, r3
 8001818:	48a4      	ldr	r0, [pc, #656]	; (8001aac <MX_GPIO_Init+0x618>)
 800181a:	f000 fefd 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_WIFI_Pin C_EN_Pin CS_ADWB_Pin STSAFE_RESET_Pin
                           WIFI_BOOT0_Pin SEL3_4_Pin */
  GPIO_InitStruct.Pin = CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 800181e:	f245 5328 	movw	r3, #21800	; 0x5528
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
                          |WIFI_BOOT0_Pin|SEL3_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	2301      	movs	r3, #1
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001834:	4619      	mov	r1, r3
 8001836:	489d      	ldr	r0, [pc, #628]	; (8001aac <MX_GPIO_Init+0x618>)
 8001838:	f000 feee 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C3_SDA_Pin I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 800183c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001842:	2312      	movs	r3, #18
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184a:	2303      	movs	r3, #3
 800184c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800184e:	2304      	movs	r3, #4
 8001850:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001856:	4619      	mov	r1, r3
 8001858:	4895      	ldr	r0, [pc, #596]	; (8001ab0 <MX_GPIO_Init+0x61c>)
 800185a:	f000 fedd 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_SEL_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin;
 800185e:	2340      	movs	r3, #64	; 0x40
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800186a:	2302      	movs	r3, #2
 800186c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800186e:	2302      	movs	r3, #2
 8001870:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SW_SEL_GPIO_Port, &GPIO_InitStruct);
 8001872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001876:	4619      	mov	r1, r3
 8001878:	488c      	ldr	r0, [pc, #560]	; (8001aac <MX_GPIO_Init+0x618>)
 800187a:	f000 fecd 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_DHC_Pin PGOOD_Pin INT_M_Pin */
  GPIO_InitStruct.Pin = INT2_DHC_Pin|PGOOD_Pin|INT_M_Pin;
 800187e:	f44f 7324 	mov.w	r3, #656	; 0x290
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001884:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800188e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001892:	4619      	mov	r1, r3
 8001894:	4885      	ldr	r0, [pc, #532]	; (8001aac <MX_GPIO_Init+0x618>)
 8001896:	f000 febf 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin SPI1_CLK_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin|SPI1_CLK_Pin;
 800189a:	231c      	movs	r3, #28
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018aa:	2305      	movs	r3, #5
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b2:	4619      	mov	r1, r3
 80018b4:	487e      	ldr	r0, [pc, #504]	; (8001ab0 <MX_GPIO_Init+0x61c>)
 80018b6:	f000 feaf 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_SPI_CS_Pin SEL1_2_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin|SEL1_2_Pin;
 80018ba:	2321      	movs	r3, #33	; 0x21
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018be:	2301      	movs	r3, #1
 80018c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ce:	4619      	mov	r1, r3
 80018d0:	4877      	ldr	r0, [pc, #476]	; (8001ab0 <MX_GPIO_Init+0x61c>)
 80018d2:	f000 fea1 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_HTS_Pin BLE_INT_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin|BLE_INT_Pin;
 80018d6:	2342      	movs	r3, #66	; 0x42
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e8:	4619      	mov	r1, r3
 80018ea:	4871      	ldr	r0, [pc, #452]	; (8001ab0 <MX_GPIO_Init+0x61c>)
 80018ec:	f000 fe94 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C4_SCL_Pin I2C4_SDA_Pin */
  GPIO_InitStruct.Pin = I2C4_SCL_Pin|I2C4_SDA_Pin;
 80018f0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f6:	2312      	movs	r3, #18
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fe:	2303      	movs	r3, #3
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001902:	2304      	movs	r3, #4
 8001904:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190a:	4619      	mov	r1, r3
 800190c:	4865      	ldr	r0, [pc, #404]	; (8001aa4 <MX_GPIO_Init+0x610>)
 800190e:	f000 fe83 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC1_IN1_Pin ADC1_IN2_Pin uC_ADC_BATT_Pin */
  GPIO_InitStruct.Pin = ADC1_IN1_Pin|ADC1_IN2_Pin|uC_ADC_BATT_Pin;
 8001912:	2313      	movs	r3, #19
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001916:	230b      	movs	r3, #11
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800191e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001922:	4619      	mov	r1, r3
 8001924:	4860      	ldr	r0, [pc, #384]	; (8001aa8 <MX_GPIO_Init+0x614>)
 8001926:	f000 fe77 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_ADWB_Pin SD_DETECT_Pin */
  GPIO_InitStruct.Pin = INT2_ADWB_Pin|SD_DETECT_Pin;
 800192a:	f241 0304 	movw	r3, #4100	; 0x1004
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001930:	2300      	movs	r3, #0
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193c:	4619      	mov	r1, r3
 800193e:	485d      	ldr	r0, [pc, #372]	; (8001ab4 <MX_GPIO_Init+0x620>)
 8001940:	f000 fe6a 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHRG_Pin */
  GPIO_InitStruct.Pin = CHRG_Pin;
 8001944:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800194a:	2300      	movs	r3, #0
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHRG_GPIO_Port, &GPIO_InitStruct);
 8001952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001956:	4619      	mov	r1, r3
 8001958:	4854      	ldr	r0, [pc, #336]	; (8001aac <MX_GPIO_Init+0x618>)
 800195a:	f000 fe5d 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 800195e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001964:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 800196e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001972:	4619      	mov	r1, r3
 8001974:	484b      	ldr	r0, [pc, #300]	; (8001aa4 <MX_GPIO_Init+0x610>)
 8001976:	f000 fe4f 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 800197a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800198c:	2307      	movs	r3, #7
 800198e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001994:	4619      	mov	r1, r3
 8001996:	4843      	ldr	r0, [pc, #268]	; (8001aa4 <MX_GPIO_Init+0x610>)
 8001998:	f000 fe3e 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 800199c:	2308      	movs	r3, #8
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a8:	2303      	movs	r3, #3
 80019aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019ac:	2305      	movs	r3, #5
 80019ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 80019b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b4:	4619      	mov	r1, r3
 80019b6:	483c      	ldr	r0, [pc, #240]	; (8001aa8 <MX_GPIO_Init+0x614>)
 80019b8:	f000 fe2e 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RTS_Pin USART3_CTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 80019bc:	f242 0302 	movw	r3, #8194	; 0x2002
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ca:	2303      	movs	r3, #3
 80019cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019ce:	2307      	movs	r3, #7
 80019d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d6:	4619      	mov	r1, r3
 80019d8:	4836      	ldr	r0, [pc, #216]	; (8001ab4 <MX_GPIO_Init+0x620>)
 80019da:	f000 fe1d 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_DHC_Pin */
  GPIO_InitStruct.Pin = CS_DHC_Pin;
 80019de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e4:	2301      	movs	r3, #1
 80019e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ec:	2302      	movs	r3, #2
 80019ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS_DHC_GPIO_Port, &GPIO_InitStruct);
 80019f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f4:	4619      	mov	r1, r3
 80019f6:	482d      	ldr	r0, [pc, #180]	; (8001aac <MX_GPIO_Init+0x618>)
 80019f8:	f000 fe0e 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 80019fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a06:	2302      	movs	r3, #2
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a16:	4619      	mov	r1, r3
 8001a18:	4827      	ldr	r0, [pc, #156]	; (8001ab8 <MX_GPIO_Init+0x624>)
 8001a1a:	f000 fdfd 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin PB11_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|PB11_Pin;
 8001a1e:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a34:	4619      	mov	r1, r3
 8001a36:	481f      	ldr	r0, [pc, #124]	; (8001ab4 <MX_GPIO_Init+0x620>)
 8001a38:	f000 fdee 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT2_DH_Pin */
  GPIO_InitStruct.Pin = INT2_DH_Pin;
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a40:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT2_DH_GPIO_Port, &GPIO_InitStruct);
 8001a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a54:	f000 fde0 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : EX_ADC_Pin */
  GPIO_InitStruct.Pin = EX_ADC_Pin;
 8001a58:	2320      	movs	r3, #32
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a5c:	230b      	movs	r3, #11
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EX_ADC_GPIO_Port, &GPIO_InitStruct);
 8001a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a6e:	f000 fdd3 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12_Pin */
  GPIO_InitStruct.Pin = PE12_Pin;
 8001a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PE12_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a84:	4619      	mov	r1, r3
 8001a86:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <MX_GPIO_Init+0x624>)
 8001a88:	f000 fdc6 	bl	8002618 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2100      	movs	r1, #0
 8001a90:	2017      	movs	r0, #23
 8001a92:	f000 fd8a 	bl	80025aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a96:	2017      	movs	r0, #23
 8001a98:	f000 fda3 	bl	80025e2 <HAL_NVIC_EnableIRQ>

}
 8001a9c:	bf00      	nop
 8001a9e:	3738      	adds	r7, #56	; 0x38
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	48000c00 	.word	0x48000c00
 8001aa8:	48000800 	.word	0x48000800
 8001aac:	48001400 	.word	0x48001400
 8001ab0:	48001800 	.word	0x48001800
 8001ab4:	48000400 	.word	0x48000400
 8001ab8:	48001000 	.word	0x48001000

08001abc <__io_putchar>:

/* USER CODE BEGIN 4 */
/* ----------- Redirecting stdout to UART2 -------------- */
int __io_putchar(int ch)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart2, &*c, 1, 10);
 8001aca:	f107 010c 	add.w	r1, r7, #12
 8001ace:	230a      	movs	r3, #10
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4804      	ldr	r0, [pc, #16]	; (8001ae4 <__io_putchar+0x28>)
 8001ad4:	f003 fbe2 	bl	800529c <HAL_UART_Transmit>
 return ch;
 8001ad8:	687b      	ldr	r3, [r7, #4]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200003d4 	.word	0x200003d4

08001ae8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin) {
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001af8:	d103      	bne.n	8001b02 <HAL_GPIO_EXTI_Callback+0x1a>
  case INT1_DHC_Pin:
    drdy = 1;
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x28>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]
    break;
 8001b00:	bf00      	nop
  }
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	2000047a 	.word	0x2000047a

08001b14 <platform_write>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	460b      	mov	r3, r1
 8001b22:	72fb      	strb	r3, [r7, #11]
 8001b24:	4613      	mov	r3, r2
 8001b26:	813b      	strh	r3, [r7, #8]
  HAL_GPIO_WritePin(CS_DHC_GPIO_Port, CS_DHC_Pin, GPIO_PIN_RESET);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b2e:	480e      	ldr	r0, [pc, #56]	; (8001b68 <platform_write+0x54>)
 8001b30:	f000 ff04 	bl	800293c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8001b34:	f107 010b 	add.w	r1, r7, #11
 8001b38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f002 fcef 	bl	8004522 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 8001b44:	893a      	ldrh	r2, [r7, #8]
 8001b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f002 fce8 	bl	8004522 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(CS_DHC_GPIO_Port, CS_DHC_Pin, GPIO_PIN_SET);
 8001b52:	2201      	movs	r2, #1
 8001b54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b58:	4803      	ldr	r0, [pc, #12]	; (8001b68 <platform_write+0x54>)
 8001b5a:	f000 feef 	bl	800293c <HAL_GPIO_WritePin>
  return 0;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	48001400 	.word	0x48001400

08001b6c <platform_read>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	461a      	mov	r2, r3
 8001b78:	460b      	mov	r3, r1
 8001b7a:	72fb      	strb	r3, [r7, #11]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	813b      	strh	r3, [r7, #8]
  reg |= 0x80;
 8001b80:	7afb      	ldrb	r3, [r7, #11]
 8001b82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	72fb      	strb	r3, [r7, #11]
  HAL_GPIO_WritePin(CS_DHC_GPIO_Port, CS_DHC_Pin, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b90:	480e      	ldr	r0, [pc, #56]	; (8001bcc <platform_read+0x60>)
 8001b92:	f000 fed3 	bl	800293c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8001b96:	f107 010b 	add.w	r1, r7, #11
 8001b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f002 fcbe 	bl	8004522 <HAL_SPI_Transmit>
  HAL_SPI_Receive(handle, bufp, len, 1000);
 8001ba6:	893a      	ldrh	r2, [r7, #8]
 8001ba8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f002 fe25 	bl	80047fe <HAL_SPI_Receive>
  HAL_GPIO_WritePin(CS_DHC_GPIO_Port, CS_DHC_Pin, GPIO_PIN_SET);
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bba:	4804      	ldr	r0, [pc, #16]	; (8001bcc <platform_read+0x60>)
 8001bbc:	f000 febe 	bl	800293c <HAL_GPIO_WritePin>
  return 0;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	48001400 	.word	0x48001400

08001bd0 <ism330dhcx_initialize>:
 *
 * @return No
 *
 */
static void ism330dhcx_initialize()
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  ism330dhcx_initialize_basics();
 8001bd4:	f000 f80e 	bl	8001bf4 <ism330dhcx_initialize_basics>
#if (SENSOR_TYPE == ACCELEROMETER)
  /* Accelelerometer configuration */
  ism330dhcx_xl_data_rate_set(&dev_ctx, ACCELEROMETER_ODR);
 8001bd8:	2107      	movs	r1, #7
 8001bda:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <ism330dhcx_initialize+0x20>)
 8001bdc:	f004 fa0c 	bl	8005ff8 <ism330dhcx_xl_data_rate_set>
  ism330dhcx_xl_full_scale_set(&dev_ctx, ACCELEROMETER_FS);
 8001be0:	2100      	movs	r1, #0
 8001be2:	4803      	ldr	r0, [pc, #12]	; (8001bf0 <ism330dhcx_initialize+0x20>)
 8001be4:	f004 f9e2 	bl	8005fac <ism330dhcx_xl_full_scale_set>
#elif (SENSOR_TYPE == GYROSCOPE)
  /* Gyroscope configuration */
  ism330dhcx_gy_data_rate_set(&dev_ctx, GYROSCOPE_ODR);
  ism330dhcx_gy_full_scale_set(&dev_ctx, GYROSCOPE_FS);
#endif
  ism330dhcx_initialize_fifo();
 8001be8:	f000 f82c 	bl	8001c44 <ism330dhcx_initialize_fifo>
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20001088 	.word	0x20001088

08001bf4 <ism330dhcx_initialize_basics>:
 *
 * @return No
 *
 */
static void ism330dhcx_initialize_basics()
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Check device ID */
  whoamI = 0;
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <ism330dhcx_initialize_basics+0x44>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]

  do {
    /* Wait sensor boot time */
    HAL_Delay(10);
 8001bfe:	200a      	movs	r0, #10
 8001c00:	f000 fbd4 	bl	80023ac <HAL_Delay>
    ism330dhcx_device_id_get(&dev_ctx, &whoamI);
 8001c04:	490c      	ldr	r1, [pc, #48]	; (8001c38 <ism330dhcx_initialize_basics+0x44>)
 8001c06:	480d      	ldr	r0, [pc, #52]	; (8001c3c <ism330dhcx_initialize_basics+0x48>)
 8001c08:	f004 fbc3 	bl	8006392 <ism330dhcx_device_id_get>
  } while (whoamI != ISM330DHCX_ID);
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <ism330dhcx_initialize_basics+0x44>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b6b      	cmp	r3, #107	; 0x6b
 8001c12:	d1f4      	bne.n	8001bfe <ism330dhcx_initialize_basics+0xa>

  /* Restore default configuration */
  ism330dhcx_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8001c14:	2101      	movs	r1, #1
 8001c16:	4809      	ldr	r0, [pc, #36]	; (8001c3c <ism330dhcx_initialize_basics+0x48>)
 8001c18:	f004 fbcc 	bl	80063b4 <ism330dhcx_reset_set>

  do {
    ism330dhcx_reset_get(&dev_ctx, &rst);
 8001c1c:	4908      	ldr	r1, [pc, #32]	; (8001c40 <ism330dhcx_initialize_basics+0x4c>)
 8001c1e:	4807      	ldr	r0, [pc, #28]	; (8001c3c <ism330dhcx_initialize_basics+0x48>)
 8001c20:	f004 fbee 	bl	8006400 <ism330dhcx_reset_get>
  } while (rst);
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <ism330dhcx_initialize_basics+0x4c>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1f7      	bne.n	8001c1c <ism330dhcx_initialize_basics+0x28>

  /* Start device configuration. */
  ism330dhcx_device_conf_set(&dev_ctx, PROPERTY_ENABLE);
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	4803      	ldr	r0, [pc, #12]	; (8001c3c <ism330dhcx_initialize_basics+0x48>)
 8001c30:	f004 fb63 	bl	80062fa <ism330dhcx_device_conf_set>
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000476 	.word	0x20000476
 8001c3c:	20001088 	.word	0x20001088
 8001c40:	20000477 	.word	0x20000477

08001c44 <ism330dhcx_initialize_fifo>:
 *
 * @return No
 *
 */
static void ism330dhcx_initialize_fifo()
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
#if (SENSOR_TYPE == ACCELEROMETER)
  /* Batch odr config */
  ism330dhcx_fifo_xl_batch_set(&dev_ctx, ACCELEROMETER_ODR);
 8001c4a:	2107      	movs	r1, #7
 8001c4c:	4811      	ldr	r0, [pc, #68]	; (8001c94 <ism330dhcx_initialize_fifo+0x50>)
 8001c4e:	f004 fc26 	bl	800649e <ism330dhcx_fifo_xl_batch_set>
  ism330dhcx_fifo_gy_batch_set(&dev_ctx, 0);
 8001c52:	2100      	movs	r1, #0
 8001c54:	480f      	ldr	r0, [pc, #60]	; (8001c94 <ism330dhcx_initialize_fifo+0x50>)
 8001c56:	f004 fc48 	bl	80064ea <ism330dhcx_fifo_gy_batch_set>
  /* Batch odr config */
  ism330dhcx_fifo_xl_batch_set(&dev_ctx, 0);
  ism330dhcx_fifo_gy_batch_set(&dev_ctx, GYROSCOPE_ODR);
#endif
  /* FIFO MODE */
  ism330dhcx_fifo_mode_set(&dev_ctx, ISM330DHCX_BYPASS_MODE);
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	480d      	ldr	r0, [pc, #52]	; (8001c94 <ism330dhcx_initialize_fifo+0x50>)
 8001c5e:	f004 fc6a 	bl	8006536 <ism330dhcx_fifo_mode_set>
  HAL_Delay(10);
 8001c62:	200a      	movs	r0, #10
 8001c64:	f000 fba2 	bl	80023ac <HAL_Delay>
  ism330dhcx_fifo_mode_set(&dev_ctx, ISM330DHCX_STREAM_MODE);
 8001c68:	2106      	movs	r1, #6
 8001c6a:	480a      	ldr	r0, [pc, #40]	; (8001c94 <ism330dhcx_initialize_fifo+0x50>)
 8001c6c:	f004 fc63 	bl	8006536 <ism330dhcx_fifo_mode_set>
  /* Watermark config */
  if (SAMPLES <= MAX_FIFO_SIZE) {
    ism330dhcx_fifo_watermark_set(&dev_ctx, (uint16_t) SAMPLES);
 8001c70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c74:	4807      	ldr	r0, [pc, #28]	; (8001c94 <ism330dhcx_initialize_fifo+0x50>)
 8001c76:	f004 fbdc 	bl	8006432 <ism330dhcx_fifo_watermark_set>
  }
  else {
    ism330dhcx_fifo_watermark_set(&dev_ctx, (uint16_t) MAX_FIFO_SIZE);
  }
  uint8_t ctrl = 0x08;
 8001c7a:	2308      	movs	r3, #8
 8001c7c:	71fb      	strb	r3, [r7, #7]
  ism330dhcx_write_reg(&dev_ctx, ISM330DHCX_INT1_CTRL, (uint8_t *) &ctrl, 1);
 8001c7e:	1dfa      	adds	r2, r7, #7
 8001c80:	2301      	movs	r3, #1
 8001c82:	210d      	movs	r1, #13
 8001c84:	4803      	ldr	r0, [pc, #12]	; (8001c94 <ism330dhcx_initialize_fifo+0x50>)
 8001c86:	f004 f961 	bl	8005f4c <ism330dhcx_write_reg>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20001088 	.word	0x20001088

08001c98 <ism330dhcx_get_buffer_from_fifo>:
 *
 * @return No
 *
 */
static void ism330dhcx_get_buffer_from_fifo(uint16_t nb)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80fb      	strh	r3, [r7, #6]
  static int16_t dummy[3];
  ism330dhcx_fifo_tag_t reg_tag;
  for (uint16_t i = 0; i < nb; i++) {
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	81fb      	strh	r3, [r7, #14]
 8001ca6:	e0b2      	b.n	8001e0e <ism330dhcx_get_buffer_from_fifo+0x176>
    /* Read FIFO tag */
    ism330dhcx_fifo_sensor_tag_get(&dev_ctx, &reg_tag);
 8001ca8:	f107 030d 	add.w	r3, r7, #13
 8001cac:	4619      	mov	r1, r3
 8001cae:	4864      	ldr	r0, [pc, #400]	; (8001e40 <ism330dhcx_get_buffer_from_fifo+0x1a8>)
 8001cb0:	f004 fc96 	bl	80065e0 <ism330dhcx_fifo_sensor_tag_get>
    if(reg_tag == ISM330DHCX_XL_NC_TAG) {
 8001cb4:	7b7b      	ldrb	r3, [r7, #13]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d14a      	bne.n	8001d50 <ism330dhcx_get_buffer_from_fifo+0xb8>
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001cba:	2206      	movs	r2, #6
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4861      	ldr	r0, [pc, #388]	; (8001e44 <ism330dhcx_get_buffer_from_fifo+0x1ac>)
 8001cc0:	f007 fa7e 	bl	80091c0 <memset>
      ism330dhcx_fifo_out_raw_get(&dev_ctx, (uint8_t *) data_raw_acceleration);
 8001cc4:	495f      	ldr	r1, [pc, #380]	; (8001e44 <ism330dhcx_get_buffer_from_fifo+0x1ac>)
 8001cc6:	485e      	ldr	r0, [pc, #376]	; (8001e40 <ism330dhcx_get_buffer_from_fifo+0x1a8>)
 8001cc8:	f004 fb06 	bl	80062d8 <ism330dhcx_fifo_out_raw_get>
      neai_buffer[(AXIS * neai_buffer_ptr) + (AXIS * i)] = ism330dhcx_convert_accel_data_to_mg(data_raw_acceleration[0]);
 8001ccc:	4b5d      	ldr	r3, [pc, #372]	; (8001e44 <ism330dhcx_get_buffer_from_fifo+0x1ac>)
 8001cce:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001cd2:	4b5d      	ldr	r3, [pc, #372]	; (8001e48 <ism330dhcx_get_buffer_from_fifo+0x1b0>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	89fb      	ldrh	r3, [r7, #14]
 8001cda:	441a      	add	r2, r3
 8001cdc:	4613      	mov	r3, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	189c      	adds	r4, r3, r2
 8001ce2:	4608      	mov	r0, r1
 8001ce4:	f000 f8cc 	bl	8001e80 <ism330dhcx_convert_accel_data_to_mg>
 8001ce8:	eef0 7a40 	vmov.f32	s15, s0
 8001cec:	4a57      	ldr	r2, [pc, #348]	; (8001e4c <ism330dhcx_get_buffer_from_fifo+0x1b4>)
 8001cee:	00a3      	lsls	r3, r4, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	edc3 7a00 	vstr	s15, [r3]
      neai_buffer[(AXIS * neai_buffer_ptr) + (AXIS * i) + 1] = ism330dhcx_convert_accel_data_to_mg(data_raw_acceleration[1]);
 8001cf6:	4b53      	ldr	r3, [pc, #332]	; (8001e44 <ism330dhcx_get_buffer_from_fifo+0x1ac>)
 8001cf8:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8001cfc:	4b52      	ldr	r3, [pc, #328]	; (8001e48 <ism330dhcx_get_buffer_from_fifo+0x1b0>)
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	89fb      	ldrh	r3, [r7, #14]
 8001d04:	441a      	add	r2, r3
 8001d06:	4613      	mov	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4413      	add	r3, r2
 8001d0c:	1c5c      	adds	r4, r3, #1
 8001d0e:	4608      	mov	r0, r1
 8001d10:	f000 f8b6 	bl	8001e80 <ism330dhcx_convert_accel_data_to_mg>
 8001d14:	eef0 7a40 	vmov.f32	s15, s0
 8001d18:	4a4c      	ldr	r2, [pc, #304]	; (8001e4c <ism330dhcx_get_buffer_from_fifo+0x1b4>)
 8001d1a:	00a3      	lsls	r3, r4, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	edc3 7a00 	vstr	s15, [r3]
      neai_buffer[(AXIS * neai_buffer_ptr) + (AXIS * i) + 2] = ism330dhcx_convert_accel_data_to_mg(data_raw_acceleration[2]);
 8001d22:	4b48      	ldr	r3, [pc, #288]	; (8001e44 <ism330dhcx_get_buffer_from_fifo+0x1ac>)
 8001d24:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8001d28:	4b47      	ldr	r3, [pc, #284]	; (8001e48 <ism330dhcx_get_buffer_from_fifo+0x1b0>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	89fb      	ldrh	r3, [r7, #14]
 8001d30:	441a      	add	r2, r3
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	1c9c      	adds	r4, r3, #2
 8001d3a:	4608      	mov	r0, r1
 8001d3c:	f000 f8a0 	bl	8001e80 <ism330dhcx_convert_accel_data_to_mg>
 8001d40:	eef0 7a40 	vmov.f32	s15, s0
 8001d44:	4a41      	ldr	r2, [pc, #260]	; (8001e4c <ism330dhcx_get_buffer_from_fifo+0x1b4>)
 8001d46:	00a3      	lsls	r3, r4, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	edc3 7a00 	vstr	s15, [r3]
 8001d4e:	e05b      	b.n	8001e08 <ism330dhcx_get_buffer_from_fifo+0x170>
    }
    else if(reg_tag == ISM330DHCX_GYRO_NC_TAG) {
 8001d50:	7b7b      	ldrb	r3, [r7, #13]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d14a      	bne.n	8001dec <ism330dhcx_get_buffer_from_fifo+0x154>
      memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001d56:	2206      	movs	r2, #6
 8001d58:	2100      	movs	r1, #0
 8001d5a:	483d      	ldr	r0, [pc, #244]	; (8001e50 <ism330dhcx_get_buffer_from_fifo+0x1b8>)
 8001d5c:	f007 fa30 	bl	80091c0 <memset>
      ism330dhcx_fifo_out_raw_get(&dev_ctx, (uint8_t *) data_raw_angular_rate);
 8001d60:	493b      	ldr	r1, [pc, #236]	; (8001e50 <ism330dhcx_get_buffer_from_fifo+0x1b8>)
 8001d62:	4837      	ldr	r0, [pc, #220]	; (8001e40 <ism330dhcx_get_buffer_from_fifo+0x1a8>)
 8001d64:	f004 fab8 	bl	80062d8 <ism330dhcx_fifo_out_raw_get>
      neai_buffer[(AXIS * neai_buffer_ptr) + (AXIS * i)] = ism330dhcx_convert_gyro_data_to_mdps(data_raw_angular_rate[0]);
 8001d68:	4b39      	ldr	r3, [pc, #228]	; (8001e50 <ism330dhcx_get_buffer_from_fifo+0x1b8>)
 8001d6a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001d6e:	4b36      	ldr	r3, [pc, #216]	; (8001e48 <ism330dhcx_get_buffer_from_fifo+0x1b0>)
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	89fb      	ldrh	r3, [r7, #14]
 8001d76:	441a      	add	r2, r3
 8001d78:	4613      	mov	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	189c      	adds	r4, r3, r2
 8001d7e:	4608      	mov	r0, r1
 8001d80:	f000 f86c 	bl	8001e5c <ism330dhcx_convert_gyro_data_to_mdps>
 8001d84:	eef0 7a40 	vmov.f32	s15, s0
 8001d88:	4a30      	ldr	r2, [pc, #192]	; (8001e4c <ism330dhcx_get_buffer_from_fifo+0x1b4>)
 8001d8a:	00a3      	lsls	r3, r4, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	edc3 7a00 	vstr	s15, [r3]
      neai_buffer[(AXIS * neai_buffer_ptr) + (AXIS * i) + 1] = ism330dhcx_convert_gyro_data_to_mdps(data_raw_angular_rate[1]);
 8001d92:	4b2f      	ldr	r3, [pc, #188]	; (8001e50 <ism330dhcx_get_buffer_from_fifo+0x1b8>)
 8001d94:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8001d98:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <ism330dhcx_get_buffer_from_fifo+0x1b0>)
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	89fb      	ldrh	r3, [r7, #14]
 8001da0:	441a      	add	r2, r3
 8001da2:	4613      	mov	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4413      	add	r3, r2
 8001da8:	1c5c      	adds	r4, r3, #1
 8001daa:	4608      	mov	r0, r1
 8001dac:	f000 f856 	bl	8001e5c <ism330dhcx_convert_gyro_data_to_mdps>
 8001db0:	eef0 7a40 	vmov.f32	s15, s0
 8001db4:	4a25      	ldr	r2, [pc, #148]	; (8001e4c <ism330dhcx_get_buffer_from_fifo+0x1b4>)
 8001db6:	00a3      	lsls	r3, r4, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	edc3 7a00 	vstr	s15, [r3]
      neai_buffer[(AXIS * neai_buffer_ptr) + (AXIS * i) + 2] = ism330dhcx_convert_gyro_data_to_mdps(data_raw_angular_rate[2]);
 8001dbe:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <ism330dhcx_get_buffer_from_fifo+0x1b8>)
 8001dc0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8001dc4:	4b20      	ldr	r3, [pc, #128]	; (8001e48 <ism330dhcx_get_buffer_from_fifo+0x1b0>)
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	89fb      	ldrh	r3, [r7, #14]
 8001dcc:	441a      	add	r2, r3
 8001dce:	4613      	mov	r3, r2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	1c9c      	adds	r4, r3, #2
 8001dd6:	4608      	mov	r0, r1
 8001dd8:	f000 f840 	bl	8001e5c <ism330dhcx_convert_gyro_data_to_mdps>
 8001ddc:	eef0 7a40 	vmov.f32	s15, s0
 8001de0:	4a1a      	ldr	r2, [pc, #104]	; (8001e4c <ism330dhcx_get_buffer_from_fifo+0x1b4>)
 8001de2:	00a3      	lsls	r3, r4, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	edc3 7a00 	vstr	s15, [r3]
 8001dea:	e00d      	b.n	8001e08 <ism330dhcx_get_buffer_from_fifo+0x170>
    }
    else {
      /* Flush unused samples */
      printf("Bad sensor tag: %d.\n", reg_tag);
 8001dec:	7b7b      	ldrb	r3, [r7, #13]
 8001dee:	4619      	mov	r1, r3
 8001df0:	4818      	ldr	r0, [pc, #96]	; (8001e54 <ism330dhcx_get_buffer_from_fifo+0x1bc>)
 8001df2:	f008 f867 	bl	8009ec4 <iprintf>
      memset(dummy, 0x00, 3 * sizeof(int16_t));
 8001df6:	2206      	movs	r2, #6
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4817      	ldr	r0, [pc, #92]	; (8001e58 <ism330dhcx_get_buffer_from_fifo+0x1c0>)
 8001dfc:	f007 f9e0 	bl	80091c0 <memset>
      ism330dhcx_fifo_out_raw_get(&dev_ctx, (uint8_t *) dummy);
 8001e00:	4915      	ldr	r1, [pc, #84]	; (8001e58 <ism330dhcx_get_buffer_from_fifo+0x1c0>)
 8001e02:	480f      	ldr	r0, [pc, #60]	; (8001e40 <ism330dhcx_get_buffer_from_fifo+0x1a8>)
 8001e04:	f004 fa68 	bl	80062d8 <ism330dhcx_fifo_out_raw_get>
  for (uint16_t i = 0; i < nb; i++) {
 8001e08:	89fb      	ldrh	r3, [r7, #14]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	81fb      	strh	r3, [r7, #14]
 8001e0e:	89fa      	ldrh	r2, [r7, #14]
 8001e10:	88fb      	ldrh	r3, [r7, #6]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	f4ff af48 	bcc.w	8001ca8 <ism330dhcx_get_buffer_from_fifo+0x10>
    }
  }
  neai_buffer_ptr += nb;
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <ism330dhcx_get_buffer_from_fifo+0x1b0>)
 8001e1a:	881a      	ldrh	r2, [r3, #0]
 8001e1c:	88fb      	ldrh	r3, [r7, #6]
 8001e1e:	4413      	add	r3, r2
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <ism330dhcx_get_buffer_from_fifo+0x1b0>)
 8001e24:	801a      	strh	r2, [r3, #0]
  if (neai_buffer_ptr == SAMPLES) {
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <ism330dhcx_get_buffer_from_fifo+0x1b0>)
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e2e:	d102      	bne.n	8001e36 <ism330dhcx_get_buffer_from_fifo+0x19e>
    neai_buffer_ptr = 0;
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <ism330dhcx_get_buffer_from_fifo+0x1b0>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	801a      	strh	r2, [r3, #0]
  }
}
 8001e36:	bf00      	nop
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd90      	pop	{r4, r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20001088 	.word	0x20001088
 8001e44:	20000468 	.word	0x20000468
 8001e48:	2000047e 	.word	0x2000047e
 8001e4c:	20000488 	.word	0x20000488
 8001e50:	20000470 	.word	0x20000470
 8001e54:	0800dd54 	.word	0x0800dd54
 8001e58:	20001098 	.word	0x20001098

08001e5c <ism330dhcx_convert_gyro_data_to_mdps>:
 *
 * @return The converted value in milli degrees per second (mdps)
 *
 */
static float ism330dhcx_convert_gyro_data_to_mdps(int16_t gyro_raw_data)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	80fb      	strh	r3, [r7, #6]
  float gyro_data_mdps = 0.0;
 8001e66:	f04f 0300 	mov.w	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
  default:
    gyro_data_mdps = 0.0;
    break;
  }
#endif
  return gyro_data_mdps;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	ee07 3a90 	vmov	s15, r3
}
 8001e72:	eeb0 0a67 	vmov.f32	s0, s15
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <ism330dhcx_convert_accel_data_to_mg>:
 *
 * @return The converted value in milli-G' (mg)
 *
 */
static float ism330dhcx_convert_accel_data_to_mg(int16_t accel_raw_data)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	80fb      	strh	r3, [r7, #6]
  float accel_data_mg = 0.0;
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
#if (SENSOR_TYPE == ACCELEROMETER)
  switch (ACCELEROMETER_FS)
  {
  case ISM330DHCX_2g:
    accel_data_mg = ism330dhcx_from_fs2g_to_mg(accel_raw_data);
 8001e90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f004 f871 	bl	8005f7c <ism330dhcx_from_fs2g_to_mg>
 8001e9a:	ed87 0a03 	vstr	s0, [r7, #12]
    break;
 8001e9e:	bf00      	nop
  default:
    accel_data_mg = 0.0;
    break;
  }
#endif
  return accel_data_mg;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	ee07 3a90 	vmov	s15, r3
}
 8001ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb4:	b672      	cpsid	i
}
 8001eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <Error_Handler+0x8>
	...

08001ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <HAL_MspInit+0x44>)
 8001ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec6:	4a0e      	ldr	r2, [pc, #56]	; (8001f00 <HAL_MspInit+0x44>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6613      	str	r3, [r2, #96]	; 0x60
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <HAL_MspInit+0x44>)
 8001ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	607b      	str	r3, [r7, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <HAL_MspInit+0x44>)
 8001edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ede:	4a08      	ldr	r2, [pc, #32]	; (8001f00 <HAL_MspInit+0x44>)
 8001ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_MspInit+0x44>)
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000

08001f04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a17      	ldr	r2, [pc, #92]	; (8001f80 <HAL_SPI_MspInit+0x7c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d127      	bne.n	8001f76 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f26:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <HAL_SPI_MspInit+0x80>)
 8001f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2a:	4a16      	ldr	r2, [pc, #88]	; (8001f84 <HAL_SPI_MspInit+0x80>)
 8001f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f30:	6593      	str	r3, [r2, #88]	; 0x58
 8001f32:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_SPI_MspInit+0x80>)
 8001f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_SPI_MspInit+0x80>)
 8001f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f42:	4a10      	ldr	r2, [pc, #64]	; (8001f84 <HAL_SPI_MspInit+0x80>)
 8001f44:	f043 0302 	orr.w	r3, r3, #2
 8001f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <HAL_SPI_MspInit+0x80>)
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin|SPI3_CLK_Pin;
 8001f56:	2338      	movs	r3, #56	; 0x38
 8001f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f62:	2303      	movs	r3, #3
 8001f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f66:	2306      	movs	r3, #6
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6a:	f107 0314 	add.w	r3, r7, #20
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4805      	ldr	r0, [pc, #20]	; (8001f88 <HAL_SPI_MspInit+0x84>)
 8001f72:	f000 fb51 	bl	8002618 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001f76:	bf00      	nop
 8001f78:	3728      	adds	r7, #40	; 0x28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40003c00 	.word	0x40003c00
 8001f84:	40021000 	.word	0x40021000
 8001f88:	48000400 	.word	0x48000400

08001f8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b0b0      	sub	sp, #192	; 0xc0
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fa4:	f107 0310 	add.w	r3, r7, #16
 8001fa8:	229c      	movs	r2, #156	; 0x9c
 8001faa:	2100      	movs	r1, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f007 f907 	bl	80091c0 <memset>
  if(huart->Instance==USART2)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a21      	ldr	r2, [pc, #132]	; (800203c <HAL_UART_MspInit+0xb0>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d13a      	bne.n	8002032 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fc4:	f107 0310 	add.w	r3, r7, #16
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f001 fc8f 	bl	80038ec <HAL_RCCEx_PeriphCLKConfig>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fd4:	f7ff ff6c 	bl	8001eb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fd8:	4b19      	ldr	r3, [pc, #100]	; (8002040 <HAL_UART_MspInit+0xb4>)
 8001fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fdc:	4a18      	ldr	r2, [pc, #96]	; (8002040 <HAL_UART_MspInit+0xb4>)
 8001fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fe4:	4b16      	ldr	r3, [pc, #88]	; (8002040 <HAL_UART_MspInit+0xb4>)
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ff0:	4b13      	ldr	r3, [pc, #76]	; (8002040 <HAL_UART_MspInit+0xb4>)
 8001ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff4:	4a12      	ldr	r2, [pc, #72]	; (8002040 <HAL_UART_MspInit+0xb4>)
 8001ff6:	f043 0308 	orr.w	r3, r3, #8
 8001ffa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ffc:	4b10      	ldr	r3, [pc, #64]	; (8002040 <HAL_UART_MspInit+0xb4>)
 8001ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 8002008:	2370      	movs	r3, #112	; 0x70
 800200a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2302      	movs	r3, #2
 8002010:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201a:	2303      	movs	r3, #3
 800201c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002020:	2307      	movs	r3, #7
 8002022:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002026:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800202a:	4619      	mov	r1, r3
 800202c:	4805      	ldr	r0, [pc, #20]	; (8002044 <HAL_UART_MspInit+0xb8>)
 800202e:	f000 faf3 	bl	8002618 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002032:	bf00      	nop
 8002034:	37c0      	adds	r7, #192	; 0xc0
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40004400 	.word	0x40004400
 8002040:	40021000 	.word	0x40021000
 8002044:	48000c00 	.word	0x48000c00

08002048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800204c:	e7fe      	b.n	800204c <NMI_Handler+0x4>

0800204e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002052:	e7fe      	b.n	8002052 <HardFault_Handler+0x4>

08002054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <MemManage_Handler+0x4>

0800205a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205e:	e7fe      	b.n	800205e <BusFault_Handler+0x4>

08002060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002064:	e7fe      	b.n	8002064 <UsageFault_Handler+0x4>

08002066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002094:	f000 f96a 	bl	800236c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}

0800209c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_HTS_Pin);
 80020a0:	2040      	movs	r0, #64	; 0x40
 80020a2:	f000 fc63 	bl	800296c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PGOOD_Pin);
 80020a6:	2080      	movs	r0, #128	; 0x80
 80020a8:	f000 fc60 	bl	800296c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT1_DHC_Pin);
 80020ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020b0:	f000 fc5c 	bl	800296c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_M_Pin);
 80020b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80020b8:	f000 fc58 	bl	800296c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}

080020c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
	return 1;
 80020c4:	2301      	movs	r3, #1
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <_kill>:

int _kill(int pid, int sig)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020da:	f007 f839 	bl	8009150 <__errno>
 80020de:	4603      	mov	r3, r0
 80020e0:	2216      	movs	r2, #22
 80020e2:	601a      	str	r2, [r3, #0]
	return -1;
 80020e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <_exit>:

void _exit (int status)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020f8:	f04f 31ff 	mov.w	r1, #4294967295
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ffe7 	bl	80020d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002102:	e7fe      	b.n	8002102 <_exit+0x12>

08002104 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	e00a      	b.n	800212c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002116:	f3af 8000 	nop.w
 800211a:	4601      	mov	r1, r0
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	60ba      	str	r2, [r7, #8]
 8002122:	b2ca      	uxtb	r2, r1
 8002124:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	3301      	adds	r3, #1
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	429a      	cmp	r2, r3
 8002132:	dbf0      	blt.n	8002116 <_read+0x12>
	}

return len;
 8002134:	687b      	ldr	r3, [r7, #4]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b086      	sub	sp, #24
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	e009      	b.n	8002164 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	60ba      	str	r2, [r7, #8]
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fcaf 	bl	8001abc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	3301      	adds	r3, #1
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	429a      	cmp	r2, r3
 800216a:	dbf1      	blt.n	8002150 <_write+0x12>
	}
	return len;
 800216c:	687b      	ldr	r3, [r7, #4]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <_close>:

int _close(int file)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
	return -1;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800219e:	605a      	str	r2, [r3, #4]
	return 0;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <_isatty>:

int _isatty(int file)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
	return 1;
 80021b6:	2301      	movs	r3, #1
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
	return 0;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
	...

080021e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021e8:	4a14      	ldr	r2, [pc, #80]	; (800223c <_sbrk+0x5c>)
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <_sbrk+0x60>)
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f4:	4b13      	ldr	r3, [pc, #76]	; (8002244 <_sbrk+0x64>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d102      	bne.n	8002202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <_sbrk+0x64>)
 80021fe:	4a12      	ldr	r2, [pc, #72]	; (8002248 <_sbrk+0x68>)
 8002200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <_sbrk+0x64>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	429a      	cmp	r2, r3
 800220e:	d207      	bcs.n	8002220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002210:	f006 ff9e 	bl	8009150 <__errno>
 8002214:	4603      	mov	r3, r0
 8002216:	220c      	movs	r2, #12
 8002218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
 800221e:	e009      	b.n	8002234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002220:	4b08      	ldr	r3, [pc, #32]	; (8002244 <_sbrk+0x64>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <_sbrk+0x64>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	4a05      	ldr	r2, [pc, #20]	; (8002244 <_sbrk+0x64>)
 8002230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002232:	68fb      	ldr	r3, [r7, #12]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200a0000 	.word	0x200a0000
 8002240:	00000400 	.word	0x00000400
 8002244:	200010a0 	.word	0x200010a0
 8002248:	20001b90 	.word	0x20001b90

0800224c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <SystemInit+0x20>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002256:	4a05      	ldr	r2, [pc, #20]	; (800226c <SystemInit+0x20>)
 8002258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800225c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002274:	f7ff ffea 	bl	800224c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002278:	480c      	ldr	r0, [pc, #48]	; (80022ac <LoopForever+0x6>)
  ldr r1, =_edata
 800227a:	490d      	ldr	r1, [pc, #52]	; (80022b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800227c:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <LoopForever+0xe>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002280:	e002      	b.n	8002288 <LoopCopyDataInit>

08002282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002286:	3304      	adds	r3, #4

08002288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800228c:	d3f9      	bcc.n	8002282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002290:	4c0a      	ldr	r4, [pc, #40]	; (80022bc <LoopForever+0x16>)
  movs r3, #0
 8002292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002294:	e001      	b.n	800229a <LoopFillZerobss>

08002296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002298:	3204      	adds	r2, #4

0800229a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800229c:	d3fb      	bcc.n	8002296 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800229e:	f006 ff5d 	bl	800915c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022a2:	f7fe fec1 	bl	8001028 <main>

080022a6 <LoopForever>:

LoopForever:
    b LoopForever
 80022a6:	e7fe      	b.n	80022a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022a8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80022ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80022b4:	0800e29c 	.word	0x0800e29c
  ldr r2, =_sbss
 80022b8:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 80022bc:	20001b90 	.word	0x20001b90

080022c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022c0:	e7fe      	b.n	80022c0 <ADC1_IRQHandler>

080022c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022cc:	2003      	movs	r0, #3
 80022ce:	f000 f961 	bl	8002594 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022d2:	2000      	movs	r0, #0
 80022d4:	f000 f80e 	bl	80022f4 <HAL_InitTick>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	71fb      	strb	r3, [r7, #7]
 80022e2:	e001      	b.n	80022e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022e4:	f7ff fdea 	bl	8001ebc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022e8:	79fb      	ldrb	r3, [r7, #7]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002300:	4b17      	ldr	r3, [pc, #92]	; (8002360 <HAL_InitTick+0x6c>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d023      	beq.n	8002350 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002308:	4b16      	ldr	r3, [pc, #88]	; (8002364 <HAL_InitTick+0x70>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b14      	ldr	r3, [pc, #80]	; (8002360 <HAL_InitTick+0x6c>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	4619      	mov	r1, r3
 8002312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002316:	fbb3 f3f1 	udiv	r3, r3, r1
 800231a:	fbb2 f3f3 	udiv	r3, r2, r3
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f96d 	bl	80025fe <HAL_SYSTICK_Config>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10f      	bne.n	800234a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b0f      	cmp	r3, #15
 800232e:	d809      	bhi.n	8002344 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002330:	2200      	movs	r2, #0
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	f04f 30ff 	mov.w	r0, #4294967295
 8002338:	f000 f937 	bl	80025aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800233c:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <HAL_InitTick+0x74>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	e007      	b.n	8002354 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	e004      	b.n	8002354 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
 800234e:	e001      	b.n	8002354 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002354:	7bfb      	ldrb	r3, [r7, #15]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	2000000c 	.word	0x2000000c
 8002364:	20000004 	.word	0x20000004
 8002368:	20000008 	.word	0x20000008

0800236c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_IncTick+0x20>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_IncTick+0x24>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4413      	add	r3, r2
 800237c:	4a04      	ldr	r2, [pc, #16]	; (8002390 <HAL_IncTick+0x24>)
 800237e:	6013      	str	r3, [r2, #0]
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	2000000c 	.word	0x2000000c
 8002390:	200010a4 	.word	0x200010a4

08002394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return uwTick;
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <HAL_GetTick+0x14>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	200010a4 	.word	0x200010a4

080023ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b4:	f7ff ffee 	bl	8002394 <HAL_GetTick>
 80023b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d005      	beq.n	80023d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80023c6:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <HAL_Delay+0x44>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4413      	add	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023d2:	bf00      	nop
 80023d4:	f7ff ffde 	bl	8002394 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d8f7      	bhi.n	80023d4 <HAL_Delay+0x28>
  {
  }
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	2000000c 	.word	0x2000000c

080023f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002410:	4013      	ands	r3, r2
 8002412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800241c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002426:	4a04      	ldr	r2, [pc, #16]	; (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	60d3      	str	r3, [r2, #12]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <__NVIC_GetPriorityGrouping+0x18>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	f003 0307 	and.w	r3, r3, #7
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	2b00      	cmp	r3, #0
 8002468:	db0b      	blt.n	8002482 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	f003 021f 	and.w	r2, r3, #31
 8002470:	4907      	ldr	r1, [pc, #28]	; (8002490 <__NVIC_EnableIRQ+0x38>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	2001      	movs	r0, #1
 800247a:	fa00 f202 	lsl.w	r2, r0, r2
 800247e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	e000e100 	.word	0xe000e100

08002494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	6039      	str	r1, [r7, #0]
 800249e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	db0a      	blt.n	80024be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	490c      	ldr	r1, [pc, #48]	; (80024e0 <__NVIC_SetPriority+0x4c>)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	0112      	lsls	r2, r2, #4
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	440b      	add	r3, r1
 80024b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024bc:	e00a      	b.n	80024d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4908      	ldr	r1, [pc, #32]	; (80024e4 <__NVIC_SetPriority+0x50>)
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	3b04      	subs	r3, #4
 80024cc:	0112      	lsls	r2, r2, #4
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	440b      	add	r3, r1
 80024d2:	761a      	strb	r2, [r3, #24]
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000e100 	.word	0xe000e100
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	; 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f1c3 0307 	rsb	r3, r3, #7
 8002502:	2b04      	cmp	r3, #4
 8002504:	bf28      	it	cs
 8002506:	2304      	movcs	r3, #4
 8002508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3304      	adds	r3, #4
 800250e:	2b06      	cmp	r3, #6
 8002510:	d902      	bls.n	8002518 <NVIC_EncodePriority+0x30>
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3b03      	subs	r3, #3
 8002516:	e000      	b.n	800251a <NVIC_EncodePriority+0x32>
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800251c:	f04f 32ff 	mov.w	r2, #4294967295
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43da      	mvns	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	401a      	ands	r2, r3
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002530:	f04f 31ff 	mov.w	r1, #4294967295
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	43d9      	mvns	r1, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002540:	4313      	orrs	r3, r2
         );
}
 8002542:	4618      	mov	r0, r3
 8002544:	3724      	adds	r7, #36	; 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3b01      	subs	r3, #1
 800255c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002560:	d301      	bcc.n	8002566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002562:	2301      	movs	r3, #1
 8002564:	e00f      	b.n	8002586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002566:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <SysTick_Config+0x40>)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3b01      	subs	r3, #1
 800256c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800256e:	210f      	movs	r1, #15
 8002570:	f04f 30ff 	mov.w	r0, #4294967295
 8002574:	f7ff ff8e 	bl	8002494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <SysTick_Config+0x40>)
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800257e:	4b04      	ldr	r3, [pc, #16]	; (8002590 <SysTick_Config+0x40>)
 8002580:	2207      	movs	r2, #7
 8002582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	e000e010 	.word	0xe000e010

08002594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff ff29 	bl	80023f4 <__NVIC_SetPriorityGrouping>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b086      	sub	sp, #24
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	4603      	mov	r3, r0
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	607a      	str	r2, [r7, #4]
 80025b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025bc:	f7ff ff3e 	bl	800243c <__NVIC_GetPriorityGrouping>
 80025c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	6978      	ldr	r0, [r7, #20]
 80025c8:	f7ff ff8e 	bl	80024e8 <NVIC_EncodePriority>
 80025cc:	4602      	mov	r2, r0
 80025ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d2:	4611      	mov	r1, r2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff5d 	bl	8002494 <__NVIC_SetPriority>
}
 80025da:	bf00      	nop
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff31 	bl	8002458 <__NVIC_EnableIRQ>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ffa2 	bl	8002550 <SysTick_Config>
 800260c:	4603      	mov	r3, r0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002618:	b480      	push	{r7}
 800261a:	b087      	sub	sp, #28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002626:	e166      	b.n	80028f6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	2101      	movs	r1, #1
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	fa01 f303 	lsl.w	r3, r1, r3
 8002634:	4013      	ands	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 8158 	beq.w	80028f0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d005      	beq.n	8002658 <HAL_GPIO_Init+0x40>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d130      	bne.n	80026ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	2203      	movs	r2, #3
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4013      	ands	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800268e:	2201      	movs	r2, #1
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	091b      	lsrs	r3, r3, #4
 80026a4:	f003 0201 	and.w	r2, r3, #1
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d017      	beq.n	80026f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	2203      	movs	r2, #3
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4013      	ands	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d123      	bne.n	800274a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	08da      	lsrs	r2, r3, #3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3208      	adds	r2, #8
 800270a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800270e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	220f      	movs	r2, #15
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	08da      	lsrs	r2, r3, #3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3208      	adds	r2, #8
 8002744:	6939      	ldr	r1, [r7, #16]
 8002746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	2203      	movs	r2, #3
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 0203 	and.w	r2, r3, #3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 80b2 	beq.w	80028f0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278c:	4b61      	ldr	r3, [pc, #388]	; (8002914 <HAL_GPIO_Init+0x2fc>)
 800278e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002790:	4a60      	ldr	r2, [pc, #384]	; (8002914 <HAL_GPIO_Init+0x2fc>)
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	6613      	str	r3, [r2, #96]	; 0x60
 8002798:	4b5e      	ldr	r3, [pc, #376]	; (8002914 <HAL_GPIO_Init+0x2fc>)
 800279a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027a4:	4a5c      	ldr	r2, [pc, #368]	; (8002918 <HAL_GPIO_Init+0x300>)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	089b      	lsrs	r3, r3, #2
 80027aa:	3302      	adds	r3, #2
 80027ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	220f      	movs	r2, #15
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027ce:	d02b      	beq.n	8002828 <HAL_GPIO_Init+0x210>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a52      	ldr	r2, [pc, #328]	; (800291c <HAL_GPIO_Init+0x304>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d025      	beq.n	8002824 <HAL_GPIO_Init+0x20c>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a51      	ldr	r2, [pc, #324]	; (8002920 <HAL_GPIO_Init+0x308>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d01f      	beq.n	8002820 <HAL_GPIO_Init+0x208>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a50      	ldr	r2, [pc, #320]	; (8002924 <HAL_GPIO_Init+0x30c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d019      	beq.n	800281c <HAL_GPIO_Init+0x204>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a4f      	ldr	r2, [pc, #316]	; (8002928 <HAL_GPIO_Init+0x310>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d013      	beq.n	8002818 <HAL_GPIO_Init+0x200>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a4e      	ldr	r2, [pc, #312]	; (800292c <HAL_GPIO_Init+0x314>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d00d      	beq.n	8002814 <HAL_GPIO_Init+0x1fc>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a4d      	ldr	r2, [pc, #308]	; (8002930 <HAL_GPIO_Init+0x318>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d007      	beq.n	8002810 <HAL_GPIO_Init+0x1f8>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a4c      	ldr	r2, [pc, #304]	; (8002934 <HAL_GPIO_Init+0x31c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d101      	bne.n	800280c <HAL_GPIO_Init+0x1f4>
 8002808:	2307      	movs	r3, #7
 800280a:	e00e      	b.n	800282a <HAL_GPIO_Init+0x212>
 800280c:	2308      	movs	r3, #8
 800280e:	e00c      	b.n	800282a <HAL_GPIO_Init+0x212>
 8002810:	2306      	movs	r3, #6
 8002812:	e00a      	b.n	800282a <HAL_GPIO_Init+0x212>
 8002814:	2305      	movs	r3, #5
 8002816:	e008      	b.n	800282a <HAL_GPIO_Init+0x212>
 8002818:	2304      	movs	r3, #4
 800281a:	e006      	b.n	800282a <HAL_GPIO_Init+0x212>
 800281c:	2303      	movs	r3, #3
 800281e:	e004      	b.n	800282a <HAL_GPIO_Init+0x212>
 8002820:	2302      	movs	r3, #2
 8002822:	e002      	b.n	800282a <HAL_GPIO_Init+0x212>
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <HAL_GPIO_Init+0x212>
 8002828:	2300      	movs	r3, #0
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	f002 0203 	and.w	r2, r2, #3
 8002830:	0092      	lsls	r2, r2, #2
 8002832:	4093      	lsls	r3, r2
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800283a:	4937      	ldr	r1, [pc, #220]	; (8002918 <HAL_GPIO_Init+0x300>)
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	089b      	lsrs	r3, r3, #2
 8002840:	3302      	adds	r3, #2
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002848:	4b3b      	ldr	r3, [pc, #236]	; (8002938 <HAL_GPIO_Init+0x320>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	43db      	mvns	r3, r3
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4013      	ands	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800286c:	4a32      	ldr	r2, [pc, #200]	; (8002938 <HAL_GPIO_Init+0x320>)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002872:	4b31      	ldr	r3, [pc, #196]	; (8002938 <HAL_GPIO_Init+0x320>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	43db      	mvns	r3, r3
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4013      	ands	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002896:	4a28      	ldr	r2, [pc, #160]	; (8002938 <HAL_GPIO_Init+0x320>)
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800289c:	4b26      	ldr	r3, [pc, #152]	; (8002938 <HAL_GPIO_Init+0x320>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4013      	ands	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028c0:	4a1d      	ldr	r2, [pc, #116]	; (8002938 <HAL_GPIO_Init+0x320>)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80028c6:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <HAL_GPIO_Init+0x320>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	43db      	mvns	r3, r3
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4013      	ands	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028ea:	4a13      	ldr	r2, [pc, #76]	; (8002938 <HAL_GPIO_Init+0x320>)
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	3301      	adds	r3, #1
 80028f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	f47f ae91 	bne.w	8002628 <HAL_GPIO_Init+0x10>
  }
}
 8002906:	bf00      	nop
 8002908:	bf00      	nop
 800290a:	371c      	adds	r7, #28
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	40021000 	.word	0x40021000
 8002918:	40010000 	.word	0x40010000
 800291c:	48000400 	.word	0x48000400
 8002920:	48000800 	.word	0x48000800
 8002924:	48000c00 	.word	0x48000c00
 8002928:	48001000 	.word	0x48001000
 800292c:	48001400 	.word	0x48001400
 8002930:	48001800 	.word	0x48001800
 8002934:	48001c00 	.word	0x48001c00
 8002938:	40010400 	.word	0x40010400

0800293c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	807b      	strh	r3, [r7, #2]
 8002948:	4613      	mov	r3, r2
 800294a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800294c:	787b      	ldrb	r3, [r7, #1]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002952:	887a      	ldrh	r2, [r7, #2]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002958:	e002      	b.n	8002960 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800295a:	887a      	ldrh	r2, [r7, #2]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002976:	4b08      	ldr	r3, [pc, #32]	; (8002998 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d006      	beq.n	8002990 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002982:	4a05      	ldr	r2, [pc, #20]	; (8002998 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002984:	88fb      	ldrh	r3, [r7, #6]
 8002986:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff f8ac 	bl	8001ae8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40010400 	.word	0x40010400

0800299c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029a0:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ac:	d102      	bne.n	80029b4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80029ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029b2:	e00b      	b.n	80029cc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80029b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c2:	d102      	bne.n	80029ca <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80029c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029c8:	e000      	b.n	80029cc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80029ca:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40007000 	.word	0x40007000

080029dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d141      	bne.n	8002a6e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029ea:	4b4b      	ldr	r3, [pc, #300]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f6:	d131      	bne.n	8002a5c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029f8:	4b47      	ldr	r3, [pc, #284]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029fe:	4a46      	ldr	r2, [pc, #280]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a08:	4b43      	ldr	r3, [pc, #268]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a10:	4a41      	ldr	r2, [pc, #260]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002a18:	4b40      	ldr	r3, [pc, #256]	; (8002b1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2232      	movs	r2, #50	; 0x32
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	4a3f      	ldr	r2, [pc, #252]	; (8002b20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a24:	fba2 2303 	umull	r2, r3, r2, r3
 8002a28:	0c9b      	lsrs	r3, r3, #18
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a2e:	e002      	b.n	8002a36 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a36:	4b38      	ldr	r3, [pc, #224]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a42:	d102      	bne.n	8002a4a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f2      	bne.n	8002a30 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a4a:	4b33      	ldr	r3, [pc, #204]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a56:	d158      	bne.n	8002b0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e057      	b.n	8002b0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a5c:	4b2e      	ldr	r3, [pc, #184]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a62:	4a2d      	ldr	r2, [pc, #180]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a6c:	e04d      	b.n	8002b0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a74:	d141      	bne.n	8002afa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a76:	4b28      	ldr	r3, [pc, #160]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a82:	d131      	bne.n	8002ae8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a84:	4b24      	ldr	r3, [pc, #144]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a8a:	4a23      	ldr	r2, [pc, #140]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a94:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a9c:	4a1e      	ldr	r2, [pc, #120]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aa2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002aa4:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2232      	movs	r2, #50	; 0x32
 8002aaa:	fb02 f303 	mul.w	r3, r2, r3
 8002aae:	4a1c      	ldr	r2, [pc, #112]	; (8002b20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab4:	0c9b      	lsrs	r3, r3, #18
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aba:	e002      	b.n	8002ac2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ac2:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ace:	d102      	bne.n	8002ad6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f2      	bne.n	8002abc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ad6:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae2:	d112      	bne.n	8002b0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e011      	b.n	8002b0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aee:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002af8:	e007      	b.n	8002b0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002afa:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b02:	4a05      	ldr	r2, [pc, #20]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b08:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	40007000 	.word	0x40007000
 8002b1c:	20000004 	.word	0x20000004
 8002b20:	431bde83 	.word	0x431bde83

08002b24 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b32:	6053      	str	r3, [r2, #4]
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40007000 	.word	0x40007000

08002b44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d102      	bne.n	8002b58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	f000 bc08 	b.w	8003368 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b58:	4b96      	ldr	r3, [pc, #600]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b62:	4b94      	ldr	r3, [pc, #592]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80e4 	beq.w	8002d42 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d007      	beq.n	8002b90 <HAL_RCC_OscConfig+0x4c>
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2b0c      	cmp	r3, #12
 8002b84:	f040 808b 	bne.w	8002c9e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	f040 8087 	bne.w	8002c9e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b90:	4b88      	ldr	r3, [pc, #544]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x64>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e3df      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1a      	ldr	r2, [r3, #32]
 8002bac:	4b81      	ldr	r3, [pc, #516]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d004      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x7e>
 8002bb8:	4b7e      	ldr	r3, [pc, #504]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bc0:	e005      	b.n	8002bce <HAL_RCC_OscConfig+0x8a>
 8002bc2:	4b7c      	ldr	r3, [pc, #496]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d223      	bcs.n	8002c1a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 fdca 	bl	8003770 <RCC_SetFlashLatencyFromMSIRange>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e3c0      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002be6:	4b73      	ldr	r3, [pc, #460]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a72      	ldr	r2, [pc, #456]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002bec:	f043 0308 	orr.w	r3, r3, #8
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	4b70      	ldr	r3, [pc, #448]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	496d      	ldr	r1, [pc, #436]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c04:	4b6b      	ldr	r3, [pc, #428]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	4968      	ldr	r1, [pc, #416]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	604b      	str	r3, [r1, #4]
 8002c18:	e025      	b.n	8002c66 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c1a:	4b66      	ldr	r3, [pc, #408]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a65      	ldr	r2, [pc, #404]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002c20:	f043 0308 	orr.w	r3, r3, #8
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b63      	ldr	r3, [pc, #396]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	4960      	ldr	r1, [pc, #384]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c38:	4b5e      	ldr	r3, [pc, #376]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	021b      	lsls	r3, r3, #8
 8002c46:	495b      	ldr	r1, [pc, #364]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d109      	bne.n	8002c66 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 fd8a 	bl	8003770 <RCC_SetFlashLatencyFromMSIRange>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e380      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c66:	f000 fcc1 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	4b51      	ldr	r3, [pc, #324]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	4950      	ldr	r1, [pc, #320]	; (8002db8 <HAL_RCC_OscConfig+0x274>)
 8002c78:	5ccb      	ldrb	r3, [r1, r3]
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c82:	4a4e      	ldr	r2, [pc, #312]	; (8002dbc <HAL_RCC_OscConfig+0x278>)
 8002c84:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c86:	4b4e      	ldr	r3, [pc, #312]	; (8002dc0 <HAL_RCC_OscConfig+0x27c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff fb32 	bl	80022f4 <HAL_InitTick>
 8002c90:	4603      	mov	r3, r0
 8002c92:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d052      	beq.n	8002d40 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	e364      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d032      	beq.n	8002d0c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ca6:	4b43      	ldr	r3, [pc, #268]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a42      	ldr	r2, [pc, #264]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cb2:	f7ff fb6f 	bl	8002394 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cba:	f7ff fb6b 	bl	8002394 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e34d      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ccc:	4b39      	ldr	r3, [pc, #228]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f0      	beq.n	8002cba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cd8:	4b36      	ldr	r3, [pc, #216]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a35      	ldr	r2, [pc, #212]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002cde:	f043 0308 	orr.w	r3, r3, #8
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	4b33      	ldr	r3, [pc, #204]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	4930      	ldr	r1, [pc, #192]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cf6:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	021b      	lsls	r3, r3, #8
 8002d04:	492b      	ldr	r1, [pc, #172]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	604b      	str	r3, [r1, #4]
 8002d0a:	e01a      	b.n	8002d42 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d0c:	4b29      	ldr	r3, [pc, #164]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a28      	ldr	r2, [pc, #160]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002d12:	f023 0301 	bic.w	r3, r3, #1
 8002d16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d18:	f7ff fb3c 	bl	8002394 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d20:	f7ff fb38 	bl	8002394 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e31a      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d32:	4b20      	ldr	r3, [pc, #128]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x1dc>
 8002d3e:	e000      	b.n	8002d42 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d073      	beq.n	8002e36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d005      	beq.n	8002d60 <HAL_RCC_OscConfig+0x21c>
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	2b0c      	cmp	r3, #12
 8002d58:	d10e      	bne.n	8002d78 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d10b      	bne.n	8002d78 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d60:	4b14      	ldr	r3, [pc, #80]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d063      	beq.n	8002e34 <HAL_RCC_OscConfig+0x2f0>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d15f      	bne.n	8002e34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e2f7      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d80:	d106      	bne.n	8002d90 <HAL_RCC_OscConfig+0x24c>
 8002d82:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a0b      	ldr	r2, [pc, #44]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	e025      	b.n	8002ddc <HAL_RCC_OscConfig+0x298>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d98:	d114      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x280>
 8002d9a:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a05      	ldr	r2, [pc, #20]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a02      	ldr	r2, [pc, #8]	; (8002db4 <HAL_RCC_OscConfig+0x270>)
 8002dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	e013      	b.n	8002ddc <HAL_RCC_OscConfig+0x298>
 8002db4:	40021000 	.word	0x40021000
 8002db8:	0800dd6c 	.word	0x0800dd6c
 8002dbc:	20000004 	.word	0x20000004
 8002dc0:	20000008 	.word	0x20000008
 8002dc4:	4ba0      	ldr	r3, [pc, #640]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a9f      	ldr	r2, [pc, #636]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	4b9d      	ldr	r3, [pc, #628]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a9c      	ldr	r2, [pc, #624]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d013      	beq.n	8002e0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7ff fad6 	bl	8002394 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dec:	f7ff fad2 	bl	8002394 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b64      	cmp	r3, #100	; 0x64
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e2b4      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dfe:	4b92      	ldr	r3, [pc, #584]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x2a8>
 8002e0a:	e014      	b.n	8002e36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0c:	f7ff fac2 	bl	8002394 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e14:	f7ff fabe 	bl	8002394 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b64      	cmp	r3, #100	; 0x64
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e2a0      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e26:	4b88      	ldr	r3, [pc, #544]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x2d0>
 8002e32:	e000      	b.n	8002e36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d060      	beq.n	8002f04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d005      	beq.n	8002e54 <HAL_RCC_OscConfig+0x310>
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	2b0c      	cmp	r3, #12
 8002e4c:	d119      	bne.n	8002e82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d116      	bne.n	8002e82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e54:	4b7c      	ldr	r3, [pc, #496]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <HAL_RCC_OscConfig+0x328>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e27d      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6c:	4b76      	ldr	r3, [pc, #472]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	061b      	lsls	r3, r3, #24
 8002e7a:	4973      	ldr	r1, [pc, #460]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e80:	e040      	b.n	8002f04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d023      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e8a:	4b6f      	ldr	r3, [pc, #444]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a6e      	ldr	r2, [pc, #440]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e96:	f7ff fa7d 	bl	8002394 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e9e:	f7ff fa79 	bl	8002394 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e25b      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eb0:	4b65      	ldr	r3, [pc, #404]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ebc:	4b62      	ldr	r3, [pc, #392]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	061b      	lsls	r3, r3, #24
 8002eca:	495f      	ldr	r1, [pc, #380]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]
 8002ed0:	e018      	b.n	8002f04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ed2:	4b5d      	ldr	r3, [pc, #372]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a5c      	ldr	r2, [pc, #368]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ede:	f7ff fa59 	bl	8002394 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee6:	f7ff fa55 	bl	8002394 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e237      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ef8:	4b53      	ldr	r3, [pc, #332]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f0      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0308 	and.w	r3, r3, #8
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d03c      	beq.n	8002f8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01c      	beq.n	8002f52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f18:	4b4b      	ldr	r3, [pc, #300]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f1e:	4a4a      	ldr	r2, [pc, #296]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f28:	f7ff fa34 	bl	8002394 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f30:	f7ff fa30 	bl	8002394 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e212      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f42:	4b41      	ldr	r3, [pc, #260]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0ef      	beq.n	8002f30 <HAL_RCC_OscConfig+0x3ec>
 8002f50:	e01b      	b.n	8002f8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f52:	4b3d      	ldr	r3, [pc, #244]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f58:	4a3b      	ldr	r2, [pc, #236]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002f5a:	f023 0301 	bic.w	r3, r3, #1
 8002f5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f62:	f7ff fa17 	bl	8002394 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f6a:	f7ff fa13 	bl	8002394 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e1f5      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f7c:	4b32      	ldr	r3, [pc, #200]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1ef      	bne.n	8002f6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 80a6 	beq.w	80030e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f9c:	4b2a      	ldr	r3, [pc, #168]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10d      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa8:	4b27      	ldr	r3, [pc, #156]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fac:	4a26      	ldr	r2, [pc, #152]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	6593      	str	r3, [r2, #88]	; 0x58
 8002fb4:	4b24      	ldr	r3, [pc, #144]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fc4:	4b21      	ldr	r3, [pc, #132]	; (800304c <HAL_RCC_OscConfig+0x508>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d118      	bne.n	8003002 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fd0:	4b1e      	ldr	r3, [pc, #120]	; (800304c <HAL_RCC_OscConfig+0x508>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a1d      	ldr	r2, [pc, #116]	; (800304c <HAL_RCC_OscConfig+0x508>)
 8002fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fdc:	f7ff f9da 	bl	8002394 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe4:	f7ff f9d6 	bl	8002394 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e1b8      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ff6:	4b15      	ldr	r3, [pc, #84]	; (800304c <HAL_RCC_OscConfig+0x508>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d108      	bne.n	800301c <HAL_RCC_OscConfig+0x4d8>
 800300a:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 800300c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003010:	4a0d      	ldr	r2, [pc, #52]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800301a:	e029      	b.n	8003070 <HAL_RCC_OscConfig+0x52c>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2b05      	cmp	r3, #5
 8003022:	d115      	bne.n	8003050 <HAL_RCC_OscConfig+0x50c>
 8003024:	4b08      	ldr	r3, [pc, #32]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8003026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302a:	4a07      	ldr	r2, [pc, #28]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 800302c:	f043 0304 	orr.w	r3, r3, #4
 8003030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003034:	4b04      	ldr	r3, [pc, #16]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303a:	4a03      	ldr	r2, [pc, #12]	; (8003048 <HAL_RCC_OscConfig+0x504>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003044:	e014      	b.n	8003070 <HAL_RCC_OscConfig+0x52c>
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000
 800304c:	40007000 	.word	0x40007000
 8003050:	4b9d      	ldr	r3, [pc, #628]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003056:	4a9c      	ldr	r2, [pc, #624]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 8003058:	f023 0301 	bic.w	r3, r3, #1
 800305c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003060:	4b99      	ldr	r3, [pc, #612]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003066:	4a98      	ldr	r2, [pc, #608]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 8003068:	f023 0304 	bic.w	r3, r3, #4
 800306c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d016      	beq.n	80030a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003078:	f7ff f98c 	bl	8002394 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800307e:	e00a      	b.n	8003096 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003080:	f7ff f988 	bl	8002394 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	; 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e168      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003096:	4b8c      	ldr	r3, [pc, #560]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 8003098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0ed      	beq.n	8003080 <HAL_RCC_OscConfig+0x53c>
 80030a4:	e015      	b.n	80030d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a6:	f7ff f975 	bl	8002394 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030ac:	e00a      	b.n	80030c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ae:	f7ff f971 	bl	8002394 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030bc:	4293      	cmp	r3, r2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e151      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030c4:	4b80      	ldr	r3, [pc, #512]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1ed      	bne.n	80030ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030d2:	7ffb      	ldrb	r3, [r7, #31]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d105      	bne.n	80030e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d8:	4b7b      	ldr	r3, [pc, #492]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 80030da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030dc:	4a7a      	ldr	r2, [pc, #488]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 80030de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0320 	and.w	r3, r3, #32
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d03c      	beq.n	800316a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d01c      	beq.n	8003132 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030f8:	4b73      	ldr	r3, [pc, #460]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 80030fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030fe:	4a72      	ldr	r2, [pc, #456]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003108:	f7ff f944 	bl	8002394 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003110:	f7ff f940 	bl	8002394 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e122      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003122:	4b69      	ldr	r3, [pc, #420]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 8003124:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0ef      	beq.n	8003110 <HAL_RCC_OscConfig+0x5cc>
 8003130:	e01b      	b.n	800316a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003132:	4b65      	ldr	r3, [pc, #404]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 8003134:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003138:	4a63      	ldr	r2, [pc, #396]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 800313a:	f023 0301 	bic.w	r3, r3, #1
 800313e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003142:	f7ff f927 	bl	8002394 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800314a:	f7ff f923 	bl	8002394 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e105      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800315c:	4b5a      	ldr	r3, [pc, #360]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 800315e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1ef      	bne.n	800314a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 80f9 	beq.w	8003366 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	2b02      	cmp	r3, #2
 800317a:	f040 80cf 	bne.w	800331c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800317e:	4b52      	ldr	r3, [pc, #328]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f003 0203 	and.w	r2, r3, #3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318e:	429a      	cmp	r2, r3
 8003190:	d12c      	bne.n	80031ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	3b01      	subs	r3, #1
 800319e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d123      	bne.n	80031ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d11b      	bne.n	80031ec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031be:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d113      	bne.n	80031ec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ce:	085b      	lsrs	r3, r3, #1
 80031d0:	3b01      	subs	r3, #1
 80031d2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d109      	bne.n	80031ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	085b      	lsrs	r3, r3, #1
 80031e4:	3b01      	subs	r3, #1
 80031e6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d071      	beq.n	80032d0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	2b0c      	cmp	r3, #12
 80031f0:	d068      	beq.n	80032c4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031f2:	4b35      	ldr	r3, [pc, #212]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d105      	bne.n	800320a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80031fe:	4b32      	ldr	r3, [pc, #200]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e0ac      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800320e:	4b2e      	ldr	r3, [pc, #184]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a2d      	ldr	r2, [pc, #180]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 8003214:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003218:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800321a:	f7ff f8bb 	bl	8002394 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003222:	f7ff f8b7 	bl	8002394 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e099      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003234:	4b24      	ldr	r3, [pc, #144]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f0      	bne.n	8003222 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003240:	4b21      	ldr	r3, [pc, #132]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	4b21      	ldr	r3, [pc, #132]	; (80032cc <HAL_RCC_OscConfig+0x788>)
 8003246:	4013      	ands	r3, r2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003250:	3a01      	subs	r2, #1
 8003252:	0112      	lsls	r2, r2, #4
 8003254:	4311      	orrs	r1, r2
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800325a:	0212      	lsls	r2, r2, #8
 800325c:	4311      	orrs	r1, r2
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003262:	0852      	lsrs	r2, r2, #1
 8003264:	3a01      	subs	r2, #1
 8003266:	0552      	lsls	r2, r2, #21
 8003268:	4311      	orrs	r1, r2
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800326e:	0852      	lsrs	r2, r2, #1
 8003270:	3a01      	subs	r2, #1
 8003272:	0652      	lsls	r2, r2, #25
 8003274:	4311      	orrs	r1, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800327a:	06d2      	lsls	r2, r2, #27
 800327c:	430a      	orrs	r2, r1
 800327e:	4912      	ldr	r1, [pc, #72]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 8003280:	4313      	orrs	r3, r2
 8003282:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003284:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a0f      	ldr	r2, [pc, #60]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 800328a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800328e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003290:	4b0d      	ldr	r3, [pc, #52]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	4a0c      	ldr	r2, [pc, #48]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 8003296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800329a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800329c:	f7ff f87a 	bl	8002394 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a4:	f7ff f876 	bl	8002394 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e058      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032b6:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <HAL_RCC_OscConfig+0x784>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032c2:	e050      	b.n	8003366 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e04f      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
 80032c8:	40021000 	.word	0x40021000
 80032cc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032d0:	4b27      	ldr	r3, [pc, #156]	; (8003370 <HAL_RCC_OscConfig+0x82c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d144      	bne.n	8003366 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032dc:	4b24      	ldr	r3, [pc, #144]	; (8003370 <HAL_RCC_OscConfig+0x82c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a23      	ldr	r2, [pc, #140]	; (8003370 <HAL_RCC_OscConfig+0x82c>)
 80032e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032e8:	4b21      	ldr	r3, [pc, #132]	; (8003370 <HAL_RCC_OscConfig+0x82c>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4a20      	ldr	r2, [pc, #128]	; (8003370 <HAL_RCC_OscConfig+0x82c>)
 80032ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032f4:	f7ff f84e 	bl	8002394 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fc:	f7ff f84a 	bl	8002394 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e02c      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800330e:	4b18      	ldr	r3, [pc, #96]	; (8003370 <HAL_RCC_OscConfig+0x82c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x7b8>
 800331a:	e024      	b.n	8003366 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	2b0c      	cmp	r3, #12
 8003320:	d01f      	beq.n	8003362 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003322:	4b13      	ldr	r3, [pc, #76]	; (8003370 <HAL_RCC_OscConfig+0x82c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a12      	ldr	r2, [pc, #72]	; (8003370 <HAL_RCC_OscConfig+0x82c>)
 8003328:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800332c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332e:	f7ff f831 	bl	8002394 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003336:	f7ff f82d 	bl	8002394 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e00f      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003348:	4b09      	ldr	r3, [pc, #36]	; (8003370 <HAL_RCC_OscConfig+0x82c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f0      	bne.n	8003336 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003354:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_RCC_OscConfig+0x82c>)
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	4905      	ldr	r1, [pc, #20]	; (8003370 <HAL_RCC_OscConfig+0x82c>)
 800335a:	4b06      	ldr	r3, [pc, #24]	; (8003374 <HAL_RCC_OscConfig+0x830>)
 800335c:	4013      	ands	r3, r2
 800335e:	60cb      	str	r3, [r1, #12]
 8003360:	e001      	b.n	8003366 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3720      	adds	r7, #32
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000
 8003374:	feeefffc 	.word	0xfeeefffc

08003378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e11d      	b.n	80035cc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003390:	4b90      	ldr	r3, [pc, #576]	; (80035d4 <HAL_RCC_ClockConfig+0x25c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 030f 	and.w	r3, r3, #15
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d910      	bls.n	80033c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339e:	4b8d      	ldr	r3, [pc, #564]	; (80035d4 <HAL_RCC_ClockConfig+0x25c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f023 020f 	bic.w	r2, r3, #15
 80033a6:	498b      	ldr	r1, [pc, #556]	; (80035d4 <HAL_RCC_ClockConfig+0x25c>)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ae:	4b89      	ldr	r3, [pc, #548]	; (80035d4 <HAL_RCC_ClockConfig+0x25c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e105      	b.n	80035cc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d010      	beq.n	80033ee <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	4b81      	ldr	r3, [pc, #516]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033d8:	429a      	cmp	r2, r3
 80033da:	d908      	bls.n	80033ee <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033dc:	4b7e      	ldr	r3, [pc, #504]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	497b      	ldr	r1, [pc, #492]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d079      	beq.n	80034ee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d11e      	bne.n	8003440 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003402:	4b75      	ldr	r3, [pc, #468]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e0dc      	b.n	80035cc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003412:	f000 fa07 	bl	8003824 <RCC_GetSysClockFreqFromPLLSource>
 8003416:	4603      	mov	r3, r0
 8003418:	4a70      	ldr	r2, [pc, #448]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d946      	bls.n	80034ac <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800341e:	4b6e      	ldr	r3, [pc, #440]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d140      	bne.n	80034ac <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800342a:	4b6b      	ldr	r3, [pc, #428]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003432:	4a69      	ldr	r2, [pc, #420]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 8003434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003438:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800343a:	2380      	movs	r3, #128	; 0x80
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	e035      	b.n	80034ac <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b02      	cmp	r3, #2
 8003446:	d107      	bne.n	8003458 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003448:	4b63      	ldr	r3, [pc, #396]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d115      	bne.n	8003480 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0b9      	b.n	80035cc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d107      	bne.n	8003470 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003460:	4b5d      	ldr	r3, [pc, #372]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d109      	bne.n	8003480 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0ad      	b.n	80035cc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003470:	4b59      	ldr	r3, [pc, #356]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0a5      	b.n	80035cc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003480:	f000 f8b4 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 8003484:	4603      	mov	r3, r0
 8003486:	4a55      	ldr	r2, [pc, #340]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d90f      	bls.n	80034ac <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800348c:	4b52      	ldr	r3, [pc, #328]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d109      	bne.n	80034ac <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003498:	4b4f      	ldr	r3, [pc, #316]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034a0:	4a4d      	ldr	r2, [pc, #308]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 80034a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034ac:	4b4a      	ldr	r3, [pc, #296]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f023 0203 	bic.w	r2, r3, #3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	4947      	ldr	r1, [pc, #284]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034be:	f7fe ff69 	bl	8002394 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c4:	e00a      	b.n	80034dc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c6:	f7fe ff65 	bl	8002394 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e077      	b.n	80035cc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034dc:	4b3e      	ldr	r3, [pc, #248]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 020c 	and.w	r2, r3, #12
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d1eb      	bne.n	80034c6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2b80      	cmp	r3, #128	; 0x80
 80034f2:	d105      	bne.n	8003500 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80034f4:	4b38      	ldr	r3, [pc, #224]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	4a37      	ldr	r2, [pc, #220]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 80034fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034fe:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d010      	beq.n	800352e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	4b31      	ldr	r3, [pc, #196]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003518:	429a      	cmp	r2, r3
 800351a:	d208      	bcs.n	800352e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800351c:	4b2e      	ldr	r3, [pc, #184]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	492b      	ldr	r1, [pc, #172]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 800352a:	4313      	orrs	r3, r2
 800352c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800352e:	4b29      	ldr	r3, [pc, #164]	; (80035d4 <HAL_RCC_ClockConfig+0x25c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d210      	bcs.n	800355e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353c:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <HAL_RCC_ClockConfig+0x25c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f023 020f 	bic.w	r2, r3, #15
 8003544:	4923      	ldr	r1, [pc, #140]	; (80035d4 <HAL_RCC_ClockConfig+0x25c>)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	4313      	orrs	r3, r2
 800354a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800354c:	4b21      	ldr	r3, [pc, #132]	; (80035d4 <HAL_RCC_ClockConfig+0x25c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d001      	beq.n	800355e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e036      	b.n	80035cc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	d008      	beq.n	800357c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800356a:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	4918      	ldr	r1, [pc, #96]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 8003578:	4313      	orrs	r3, r2
 800357a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b00      	cmp	r3, #0
 8003586:	d009      	beq.n	800359c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003588:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4910      	ldr	r1, [pc, #64]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 8003598:	4313      	orrs	r3, r2
 800359a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800359c:	f000 f826 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 80035a0:	4602      	mov	r2, r0
 80035a2:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	091b      	lsrs	r3, r3, #4
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	490c      	ldr	r1, [pc, #48]	; (80035e0 <HAL_RCC_ClockConfig+0x268>)
 80035ae:	5ccb      	ldrb	r3, [r1, r3]
 80035b0:	f003 031f 	and.w	r3, r3, #31
 80035b4:	fa22 f303 	lsr.w	r3, r2, r3
 80035b8:	4a0a      	ldr	r2, [pc, #40]	; (80035e4 <HAL_RCC_ClockConfig+0x26c>)
 80035ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035bc:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <HAL_RCC_ClockConfig+0x270>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fe fe97 	bl	80022f4 <HAL_InitTick>
 80035c6:	4603      	mov	r3, r0
 80035c8:	73fb      	strb	r3, [r7, #15]

  return status;
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40022000 	.word	0x40022000
 80035d8:	40021000 	.word	0x40021000
 80035dc:	04c4b400 	.word	0x04c4b400
 80035e0:	0800dd6c 	.word	0x0800dd6c
 80035e4:	20000004 	.word	0x20000004
 80035e8:	20000008 	.word	0x20000008

080035ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b089      	sub	sp, #36	; 0x24
 80035f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61fb      	str	r3, [r7, #28]
 80035f6:	2300      	movs	r3, #0
 80035f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035fa:	4b3e      	ldr	r3, [pc, #248]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003604:	4b3b      	ldr	r3, [pc, #236]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0x34>
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	2b0c      	cmp	r3, #12
 8003618:	d121      	bne.n	800365e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d11e      	bne.n	800365e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003620:	4b34      	ldr	r3, [pc, #208]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b00      	cmp	r3, #0
 800362a:	d107      	bne.n	800363c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800362c:	4b31      	ldr	r3, [pc, #196]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800362e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003632:	0a1b      	lsrs	r3, r3, #8
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	e005      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800363c:	4b2d      	ldr	r3, [pc, #180]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	091b      	lsrs	r3, r3, #4
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003648:	4a2b      	ldr	r2, [pc, #172]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003650:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10d      	bne.n	8003674 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800365c:	e00a      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	2b04      	cmp	r3, #4
 8003662:	d102      	bne.n	800366a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003664:	4b25      	ldr	r3, [pc, #148]	; (80036fc <HAL_RCC_GetSysClockFreq+0x110>)
 8003666:	61bb      	str	r3, [r7, #24]
 8003668:	e004      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	2b08      	cmp	r3, #8
 800366e:	d101      	bne.n	8003674 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003670:	4b22      	ldr	r3, [pc, #136]	; (80036fc <HAL_RCC_GetSysClockFreq+0x110>)
 8003672:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	2b0c      	cmp	r3, #12
 8003678:	d134      	bne.n	80036e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800367a:	4b1e      	ldr	r3, [pc, #120]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d003      	beq.n	8003692 <HAL_RCC_GetSysClockFreq+0xa6>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b03      	cmp	r3, #3
 800368e:	d003      	beq.n	8003698 <HAL_RCC_GetSysClockFreq+0xac>
 8003690:	e005      	b.n	800369e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003692:	4b1a      	ldr	r3, [pc, #104]	; (80036fc <HAL_RCC_GetSysClockFreq+0x110>)
 8003694:	617b      	str	r3, [r7, #20]
      break;
 8003696:	e005      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003698:	4b18      	ldr	r3, [pc, #96]	; (80036fc <HAL_RCC_GetSysClockFreq+0x110>)
 800369a:	617b      	str	r3, [r7, #20]
      break;
 800369c:	e002      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	617b      	str	r3, [r7, #20]
      break;
 80036a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036a4:	4b13      	ldr	r3, [pc, #76]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	3301      	adds	r3, #1
 80036b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036b2:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	0a1b      	lsrs	r3, r3, #8
 80036b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	fb03 f202 	mul.w	r2, r3, r2
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036ca:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	0e5b      	lsrs	r3, r3, #25
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	3301      	adds	r3, #1
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036e4:	69bb      	ldr	r3, [r7, #24]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3724      	adds	r7, #36	; 0x24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40021000 	.word	0x40021000
 80036f8:	0800dd84 	.word	0x0800dd84
 80036fc:	00f42400 	.word	0x00f42400

08003700 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003704:	4b03      	ldr	r3, [pc, #12]	; (8003714 <HAL_RCC_GetHCLKFreq+0x14>)
 8003706:	681b      	ldr	r3, [r3, #0]
}
 8003708:	4618      	mov	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	20000004 	.word	0x20000004

08003718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800371c:	f7ff fff0 	bl	8003700 <HAL_RCC_GetHCLKFreq>
 8003720:	4602      	mov	r2, r0
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	0a1b      	lsrs	r3, r3, #8
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	4904      	ldr	r1, [pc, #16]	; (8003740 <HAL_RCC_GetPCLK1Freq+0x28>)
 800372e:	5ccb      	ldrb	r3, [r1, r3]
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003738:	4618      	mov	r0, r3
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40021000 	.word	0x40021000
 8003740:	0800dd7c 	.word	0x0800dd7c

08003744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003748:	f7ff ffda 	bl	8003700 <HAL_RCC_GetHCLKFreq>
 800374c:	4602      	mov	r2, r0
 800374e:	4b06      	ldr	r3, [pc, #24]	; (8003768 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	0adb      	lsrs	r3, r3, #11
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	4904      	ldr	r1, [pc, #16]	; (800376c <HAL_RCC_GetPCLK2Freq+0x28>)
 800375a:	5ccb      	ldrb	r3, [r1, r3]
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003764:	4618      	mov	r0, r3
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40021000 	.word	0x40021000
 800376c:	0800dd7c 	.word	0x0800dd7c

08003770 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003778:	2300      	movs	r3, #0
 800377a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800377c:	4b27      	ldr	r3, [pc, #156]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800377e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003788:	f7ff f908 	bl	800299c <HAL_PWREx_GetVoltageRange>
 800378c:	6178      	str	r0, [r7, #20]
 800378e:	e014      	b.n	80037ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003790:	4b22      	ldr	r3, [pc, #136]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	4a21      	ldr	r2, [pc, #132]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800379a:	6593      	str	r3, [r2, #88]	; 0x58
 800379c:	4b1f      	ldr	r3, [pc, #124]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800379e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037a8:	f7ff f8f8 	bl	800299c <HAL_PWREx_GetVoltageRange>
 80037ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037ae:	4b1b      	ldr	r3, [pc, #108]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b2:	4a1a      	ldr	r2, [pc, #104]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037c0:	d10b      	bne.n	80037da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b80      	cmp	r3, #128	; 0x80
 80037c6:	d913      	bls.n	80037f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2ba0      	cmp	r3, #160	; 0xa0
 80037cc:	d902      	bls.n	80037d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037ce:	2302      	movs	r3, #2
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	e00d      	b.n	80037f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037d4:	2301      	movs	r3, #1
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	e00a      	b.n	80037f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b7f      	cmp	r3, #127	; 0x7f
 80037de:	d902      	bls.n	80037e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80037e0:	2302      	movs	r3, #2
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	e004      	b.n	80037f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b70      	cmp	r3, #112	; 0x70
 80037ea:	d101      	bne.n	80037f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037ec:	2301      	movs	r3, #1
 80037ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f023 020f 	bic.w	r2, r3, #15
 80037f8:	4909      	ldr	r1, [pc, #36]	; (8003820 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003800:	4b07      	ldr	r3, [pc, #28]	; (8003820 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	429a      	cmp	r2, r3
 800380c:	d001      	beq.n	8003812 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e000      	b.n	8003814 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40021000 	.word	0x40021000
 8003820:	40022000 	.word	0x40022000

08003824 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003824:	b480      	push	{r7}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800382a:	4b2d      	ldr	r3, [pc, #180]	; (80038e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b03      	cmp	r3, #3
 8003838:	d00b      	beq.n	8003852 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2b03      	cmp	r3, #3
 800383e:	d825      	bhi.n	800388c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d008      	beq.n	8003858 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d11f      	bne.n	800388c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800384c:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800384e:	613b      	str	r3, [r7, #16]
    break;
 8003850:	e01f      	b.n	8003892 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003852:	4b24      	ldr	r3, [pc, #144]	; (80038e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003854:	613b      	str	r3, [r7, #16]
    break;
 8003856:	e01c      	b.n	8003892 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003858:	4b21      	ldr	r3, [pc, #132]	; (80038e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	d107      	bne.n	8003874 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003864:	4b1e      	ldr	r3, [pc, #120]	; (80038e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800386a:	0a1b      	lsrs	r3, r3, #8
 800386c:	f003 030f 	and.w	r3, r3, #15
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	e005      	b.n	8003880 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003874:	4b1a      	ldr	r3, [pc, #104]	; (80038e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003880:	4a19      	ldr	r2, [pc, #100]	; (80038e8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003888:	613b      	str	r3, [r7, #16]
    break;
 800388a:	e002      	b.n	8003892 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800388c:	2300      	movs	r3, #0
 800388e:	613b      	str	r3, [r7, #16]
    break;
 8003890:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003892:	4b13      	ldr	r3, [pc, #76]	; (80038e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	091b      	lsrs	r3, r3, #4
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	3301      	adds	r3, #1
 800389e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038a0:	4b0f      	ldr	r3, [pc, #60]	; (80038e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	0a1b      	lsrs	r3, r3, #8
 80038a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	fb03 f202 	mul.w	r2, r3, r2
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038b8:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	0e5b      	lsrs	r3, r3, #25
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	3301      	adds	r3, #1
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80038d2:	683b      	ldr	r3, [r7, #0]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	371c      	adds	r7, #28
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	40021000 	.word	0x40021000
 80038e4:	00f42400 	.word	0x00f42400
 80038e8:	0800dd84 	.word	0x0800dd84

080038ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038f4:	2300      	movs	r3, #0
 80038f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038f8:	2300      	movs	r3, #0
 80038fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003904:	2b00      	cmp	r3, #0
 8003906:	d040      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800390c:	2b80      	cmp	r3, #128	; 0x80
 800390e:	d02a      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003910:	2b80      	cmp	r3, #128	; 0x80
 8003912:	d825      	bhi.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003914:	2b60      	cmp	r3, #96	; 0x60
 8003916:	d026      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003918:	2b60      	cmp	r3, #96	; 0x60
 800391a:	d821      	bhi.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	d006      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003920:	2b40      	cmp	r3, #64	; 0x40
 8003922:	d81d      	bhi.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d009      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003928:	2b20      	cmp	r3, #32
 800392a:	d010      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800392c:	e018      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800392e:	4b89      	ldr	r3, [pc, #548]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	4a88      	ldr	r2, [pc, #544]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003938:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800393a:	e015      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3304      	adds	r3, #4
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fb62 	bl	800400c <RCCEx_PLLSAI1_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800394c:	e00c      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3320      	adds	r3, #32
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fc4d 	bl	80041f4 <RCCEx_PLLSAI2_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800395e:	e003      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	74fb      	strb	r3, [r7, #19]
      break;
 8003964:	e000      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003966:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003968:	7cfb      	ldrb	r3, [r7, #19]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10b      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800396e:	4b79      	ldr	r3, [pc, #484]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003970:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003974:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800397c:	4975      	ldr	r1, [pc, #468]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003984:	e001      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003986:	7cfb      	ldrb	r3, [r7, #19]
 8003988:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d047      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800399e:	d030      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80039a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a4:	d82a      	bhi.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80039a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039aa:	d02a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80039ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039b0:	d824      	bhi.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80039b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b6:	d008      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xde>
 80039b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039bc:	d81e      	bhi.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80039c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c6:	d010      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80039c8:	e018      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039ca:	4b62      	ldr	r3, [pc, #392]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	4a61      	ldr	r2, [pc, #388]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039d6:	e015      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3304      	adds	r3, #4
 80039dc:	2100      	movs	r1, #0
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fb14 	bl	800400c <RCCEx_PLLSAI1_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039e8:	e00c      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3320      	adds	r3, #32
 80039ee:	2100      	movs	r1, #0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fbff 	bl	80041f4 <RCCEx_PLLSAI2_Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039fa:	e003      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	74fb      	strb	r3, [r7, #19]
      break;
 8003a00:	e000      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a04:	7cfb      	ldrb	r3, [r7, #19]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10b      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a0a:	4b52      	ldr	r3, [pc, #328]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	494e      	ldr	r1, [pc, #312]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003a20:	e001      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a22:	7cfb      	ldrb	r3, [r7, #19]
 8003a24:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 809f 	beq.w	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a34:	2300      	movs	r3, #0
 8003a36:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a38:	4b46      	ldr	r3, [pc, #280]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003a44:	2301      	movs	r3, #1
 8003a46:	e000      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00d      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4e:	4b41      	ldr	r3, [pc, #260]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a52:	4a40      	ldr	r2, [pc, #256]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a58:	6593      	str	r3, [r2, #88]	; 0x58
 8003a5a:	4b3e      	ldr	r3, [pc, #248]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a62:	60bb      	str	r3, [r7, #8]
 8003a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a66:	2301      	movs	r3, #1
 8003a68:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a6a:	4b3b      	ldr	r3, [pc, #236]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a3a      	ldr	r2, [pc, #232]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a76:	f7fe fc8d 	bl	8002394 <HAL_GetTick>
 8003a7a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a7c:	e009      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7e:	f7fe fc89 	bl	8002394 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d902      	bls.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	74fb      	strb	r3, [r7, #19]
        break;
 8003a90:	e005      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a92:	4b31      	ldr	r3, [pc, #196]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0ef      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003a9e:	7cfb      	ldrb	r3, [r7, #19]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d15b      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003aa4:	4b2b      	ldr	r3, [pc, #172]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aae:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d01f      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d019      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ac2:	4b24      	ldr	r3, [pc, #144]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003acc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ace:	4b21      	ldr	r3, [pc, #132]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad4:	4a1f      	ldr	r2, [pc, #124]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ada:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ade:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae4:	4a1b      	ldr	r2, [pc, #108]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003aee:	4a19      	ldr	r2, [pc, #100]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d016      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b00:	f7fe fc48 	bl	8002394 <HAL_GetTick>
 8003b04:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b06:	e00b      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b08:	f7fe fc44 	bl	8002394 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d902      	bls.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	74fb      	strb	r3, [r7, #19]
            break;
 8003b1e:	e006      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b20:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0ec      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003b2e:	7cfb      	ldrb	r3, [r7, #19]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10c      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b34:	4b07      	ldr	r3, [pc, #28]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b44:	4903      	ldr	r1, [pc, #12]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b4c:	e008      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b4e:	7cfb      	ldrb	r3, [r7, #19]
 8003b50:	74bb      	strb	r3, [r7, #18]
 8003b52:	e005      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5c:	7cfb      	ldrb	r3, [r7, #19]
 8003b5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b60:	7c7b      	ldrb	r3, [r7, #17]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d105      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b66:	4ba0      	ldr	r3, [pc, #640]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6a:	4a9f      	ldr	r2, [pc, #636]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b7e:	4b9a      	ldr	r3, [pc, #616]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b84:	f023 0203 	bic.w	r2, r3, #3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8c:	4996      	ldr	r1, [pc, #600]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ba0:	4b91      	ldr	r3, [pc, #580]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba6:	f023 020c 	bic.w	r2, r3, #12
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	498e      	ldr	r1, [pc, #568]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bc2:	4b89      	ldr	r3, [pc, #548]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd0:	4985      	ldr	r1, [pc, #532]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003be4:	4b80      	ldr	r3, [pc, #512]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf2:	497d      	ldr	r1, [pc, #500]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0310 	and.w	r3, r3, #16
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c06:	4b78      	ldr	r3, [pc, #480]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c14:	4974      	ldr	r1, [pc, #464]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0320 	and.w	r3, r3, #32
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c28:	4b6f      	ldr	r3, [pc, #444]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c36:	496c      	ldr	r1, [pc, #432]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c4a:	4b67      	ldr	r3, [pc, #412]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c58:	4963      	ldr	r1, [pc, #396]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c6c:	4b5e      	ldr	r3, [pc, #376]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c7a:	495b      	ldr	r1, [pc, #364]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c8e:	4b56      	ldr	r3, [pc, #344]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9c:	4952      	ldr	r1, [pc, #328]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cb0:	4b4d      	ldr	r3, [pc, #308]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbe:	494a      	ldr	r1, [pc, #296]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cd2:	4b45      	ldr	r3, [pc, #276]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce0:	4941      	ldr	r1, [pc, #260]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cf4:	4b3c      	ldr	r3, [pc, #240]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cfa:	f023 0203 	bic.w	r2, r3, #3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d02:	4939      	ldr	r1, [pc, #228]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d028      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d16:	4b34      	ldr	r3, [pc, #208]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d24:	4930      	ldr	r1, [pc, #192]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d34:	d106      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d36:	4b2c      	ldr	r3, [pc, #176]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	4a2b      	ldr	r2, [pc, #172]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d40:	60d3      	str	r3, [r2, #12]
 8003d42:	e011      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d4c:	d10c      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3304      	adds	r3, #4
 8003d52:	2101      	movs	r1, #1
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 f959 	bl	800400c <RCCEx_PLLSAI1_Config>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d5e:	7cfb      	ldrb	r3, [r7, #19]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003d64:	7cfb      	ldrb	r3, [r7, #19]
 8003d66:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d04d      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d7c:	d108      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003d7e:	4b1a      	ldr	r3, [pc, #104]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d84:	4a18      	ldr	r2, [pc, #96]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d8a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003d8e:	e012      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003d90:	4b15      	ldr	r3, [pc, #84]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d96:	4a14      	ldr	r2, [pc, #80]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d9c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003da0:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dae:	490e      	ldr	r1, [pc, #56]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dbe:	d106      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dc0:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4a08      	ldr	r2, [pc, #32]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dca:	60d3      	str	r3, [r2, #12]
 8003dcc:	e020      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dd6:	d109      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dd8:	4b03      	ldr	r3, [pc, #12]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4a02      	ldr	r2, [pc, #8]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de2:	60d3      	str	r3, [r2, #12]
 8003de4:	e014      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003de6:	bf00      	nop
 8003de8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003df0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003df4:	d10c      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 f905 	bl	800400c <RCCEx_PLLSAI1_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e06:	7cfb      	ldrb	r3, [r7, #19]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003e0c:	7cfb      	ldrb	r3, [r7, #19]
 8003e0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d028      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e1c:	4b7a      	ldr	r3, [pc, #488]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e2a:	4977      	ldr	r1, [pc, #476]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e3a:	d106      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e3c:	4b72      	ldr	r3, [pc, #456]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	4a71      	ldr	r2, [pc, #452]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003e42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e46:	60d3      	str	r3, [r2, #12]
 8003e48:	e011      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e52:	d10c      	bne.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3304      	adds	r3, #4
 8003e58:	2101      	movs	r1, #1
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 f8d6 	bl	800400c <RCCEx_PLLSAI1_Config>
 8003e60:	4603      	mov	r3, r0
 8003e62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e64:	7cfb      	ldrb	r3, [r7, #19]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003e6a:	7cfb      	ldrb	r3, [r7, #19]
 8003e6c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01e      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e7a:	4b63      	ldr	r3, [pc, #396]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e80:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e8a:	495f      	ldr	r1, [pc, #380]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e9c:	d10c      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	2102      	movs	r1, #2
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 f8b1 	bl	800400c <RCCEx_PLLSAI1_Config>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eae:	7cfb      	ldrb	r3, [r7, #19]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003eb4:	7cfb      	ldrb	r3, [r7, #19]
 8003eb6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00b      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ec4:	4b50      	ldr	r3, [pc, #320]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003ec6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eca:	f023 0204 	bic.w	r2, r3, #4
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed4:	494c      	ldr	r1, [pc, #304]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00b      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ee8:	4b47      	ldr	r3, [pc, #284]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003eea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eee:	f023 0218 	bic.w	r2, r3, #24
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef8:	4943      	ldr	r1, [pc, #268]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d035      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f0c:	4b3e      	ldr	r3, [pc, #248]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a3d      	ldr	r2, [pc, #244]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f18:	f7fe fa3c 	bl	8002394 <HAL_GetTick>
 8003f1c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f1e:	e009      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f20:	f7fe fa38 	bl	8002394 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d902      	bls.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	74fb      	strb	r3, [r7, #19]
        break;
 8003f32:	e005      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f34:	4b34      	ldr	r3, [pc, #208]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1ef      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8003f40:	7cfb      	ldrb	r3, [r7, #19]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d113      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8003f46:	4b30      	ldr	r3, [pc, #192]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003f48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f56:	492c      	ldr	r1, [pc, #176]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3320      	adds	r3, #32
 8003f62:	2102      	movs	r1, #2
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 f945 	bl	80041f4 <RCCEx_PLLSAI2_Config>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8003f6e:	7cfb      	ldrb	r3, [r7, #19]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8003f74:	7cfb      	ldrb	r3, [r7, #19]
 8003f76:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d01e      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003f84:	4b20      	ldr	r3, [pc, #128]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f94:	491c      	ldr	r1, [pc, #112]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa6:	d10c      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3320      	adds	r3, #32
 8003fac:	2101      	movs	r1, #1
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 f920 	bl	80041f4 <RCCEx_PLLSAI2_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fb8:	7cfb      	ldrb	r3, [r7, #19]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8003fbe:	7cfb      	ldrb	r3, [r7, #19]
 8003fc0:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d017      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003fce:	4b0e      	ldr	r3, [pc, #56]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003fd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fde:	490a      	ldr	r1, [pc, #40]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ff0:	d105      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ff2:	4b05      	ldr	r3, [pc, #20]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	4a04      	ldr	r2, [pc, #16]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003ff8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ffc:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ffe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40021000 	.word	0x40021000

0800400c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800401a:	4b72      	ldr	r3, [pc, #456]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00e      	beq.n	8004044 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004026:	4b6f      	ldr	r3, [pc, #444]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f003 0203 	and.w	r2, r3, #3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d103      	bne.n	800403e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
       ||
 800403a:	2b00      	cmp	r3, #0
 800403c:	d142      	bne.n	80040c4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
 8004042:	e03f      	b.n	80040c4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b03      	cmp	r3, #3
 800404a:	d018      	beq.n	800407e <RCCEx_PLLSAI1_Config+0x72>
 800404c:	2b03      	cmp	r3, #3
 800404e:	d825      	bhi.n	800409c <RCCEx_PLLSAI1_Config+0x90>
 8004050:	2b01      	cmp	r3, #1
 8004052:	d002      	beq.n	800405a <RCCEx_PLLSAI1_Config+0x4e>
 8004054:	2b02      	cmp	r3, #2
 8004056:	d009      	beq.n	800406c <RCCEx_PLLSAI1_Config+0x60>
 8004058:	e020      	b.n	800409c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800405a:	4b62      	ldr	r3, [pc, #392]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d11d      	bne.n	80040a2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800406a:	e01a      	b.n	80040a2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800406c:	4b5d      	ldr	r3, [pc, #372]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004074:	2b00      	cmp	r3, #0
 8004076:	d116      	bne.n	80040a6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800407c:	e013      	b.n	80040a6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800407e:	4b59      	ldr	r3, [pc, #356]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10f      	bne.n	80040aa <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800408a:	4b56      	ldr	r3, [pc, #344]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800409a:	e006      	b.n	80040aa <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	73fb      	strb	r3, [r7, #15]
      break;
 80040a0:	e004      	b.n	80040ac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80040a2:	bf00      	nop
 80040a4:	e002      	b.n	80040ac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80040a6:	bf00      	nop
 80040a8:	e000      	b.n	80040ac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80040aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d108      	bne.n	80040c4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80040b2:	4b4c      	ldr	r3, [pc, #304]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f023 0203 	bic.w	r2, r3, #3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4949      	ldr	r1, [pc, #292]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f040 8086 	bne.w	80041d8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80040cc:	4b45      	ldr	r3, [pc, #276]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a44      	ldr	r2, [pc, #272]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d8:	f7fe f95c 	bl	8002394 <HAL_GetTick>
 80040dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040de:	e009      	b.n	80040f4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040e0:	f7fe f958 	bl	8002394 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d902      	bls.n	80040f4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	73fb      	strb	r3, [r7, #15]
        break;
 80040f2:	e005      	b.n	8004100 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040f4:	4b3b      	ldr	r3, [pc, #236]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1ef      	bne.n	80040e0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d168      	bne.n	80041d8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d113      	bne.n	8004134 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800410c:	4b35      	ldr	r3, [pc, #212]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	4b35      	ldr	r3, [pc, #212]	; (80041e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004112:	4013      	ands	r3, r2
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6892      	ldr	r2, [r2, #8]
 8004118:	0211      	lsls	r1, r2, #8
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68d2      	ldr	r2, [r2, #12]
 800411e:	06d2      	lsls	r2, r2, #27
 8004120:	4311      	orrs	r1, r2
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6852      	ldr	r2, [r2, #4]
 8004126:	3a01      	subs	r2, #1
 8004128:	0112      	lsls	r2, r2, #4
 800412a:	430a      	orrs	r2, r1
 800412c:	492d      	ldr	r1, [pc, #180]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800412e:	4313      	orrs	r3, r2
 8004130:	610b      	str	r3, [r1, #16]
 8004132:	e02d      	b.n	8004190 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d115      	bne.n	8004166 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800413a:	4b2a      	ldr	r3, [pc, #168]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800413c:	691a      	ldr	r2, [r3, #16]
 800413e:	4b2b      	ldr	r3, [pc, #172]	; (80041ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004140:	4013      	ands	r3, r2
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6892      	ldr	r2, [r2, #8]
 8004146:	0211      	lsls	r1, r2, #8
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6912      	ldr	r2, [r2, #16]
 800414c:	0852      	lsrs	r2, r2, #1
 800414e:	3a01      	subs	r2, #1
 8004150:	0552      	lsls	r2, r2, #21
 8004152:	4311      	orrs	r1, r2
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6852      	ldr	r2, [r2, #4]
 8004158:	3a01      	subs	r2, #1
 800415a:	0112      	lsls	r2, r2, #4
 800415c:	430a      	orrs	r2, r1
 800415e:	4921      	ldr	r1, [pc, #132]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004160:	4313      	orrs	r3, r2
 8004162:	610b      	str	r3, [r1, #16]
 8004164:	e014      	b.n	8004190 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004166:	4b1f      	ldr	r3, [pc, #124]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	4b21      	ldr	r3, [pc, #132]	; (80041f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800416c:	4013      	ands	r3, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6892      	ldr	r2, [r2, #8]
 8004172:	0211      	lsls	r1, r2, #8
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6952      	ldr	r2, [r2, #20]
 8004178:	0852      	lsrs	r2, r2, #1
 800417a:	3a01      	subs	r2, #1
 800417c:	0652      	lsls	r2, r2, #25
 800417e:	4311      	orrs	r1, r2
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6852      	ldr	r2, [r2, #4]
 8004184:	3a01      	subs	r2, #1
 8004186:	0112      	lsls	r2, r2, #4
 8004188:	430a      	orrs	r2, r1
 800418a:	4916      	ldr	r1, [pc, #88]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800418c:	4313      	orrs	r3, r2
 800418e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004190:	4b14      	ldr	r3, [pc, #80]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a13      	ldr	r2, [pc, #76]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004196:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800419a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419c:	f7fe f8fa 	bl	8002394 <HAL_GetTick>
 80041a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041a2:	e009      	b.n	80041b8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041a4:	f7fe f8f6 	bl	8002394 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d902      	bls.n	80041b8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	73fb      	strb	r3, [r7, #15]
          break;
 80041b6:	e005      	b.n	80041c4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041b8:	4b0a      	ldr	r3, [pc, #40]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0ef      	beq.n	80041a4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d106      	bne.n	80041d8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80041ca:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041cc:	691a      	ldr	r2, [r3, #16]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	4904      	ldr	r1, [pc, #16]	; (80041e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40021000 	.word	0x40021000
 80041e8:	07ff800f 	.word	0x07ff800f
 80041ec:	ff9f800f 	.word	0xff9f800f
 80041f0:	f9ff800f 	.word	0xf9ff800f

080041f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004202:	4b72      	ldr	r3, [pc, #456]	; (80043cc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00e      	beq.n	800422c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800420e:	4b6f      	ldr	r3, [pc, #444]	; (80043cc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f003 0203 	and.w	r2, r3, #3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d103      	bne.n	8004226 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
       ||
 8004222:	2b00      	cmp	r3, #0
 8004224:	d142      	bne.n	80042ac <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
 800422a:	e03f      	b.n	80042ac <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b03      	cmp	r3, #3
 8004232:	d018      	beq.n	8004266 <RCCEx_PLLSAI2_Config+0x72>
 8004234:	2b03      	cmp	r3, #3
 8004236:	d825      	bhi.n	8004284 <RCCEx_PLLSAI2_Config+0x90>
 8004238:	2b01      	cmp	r3, #1
 800423a:	d002      	beq.n	8004242 <RCCEx_PLLSAI2_Config+0x4e>
 800423c:	2b02      	cmp	r3, #2
 800423e:	d009      	beq.n	8004254 <RCCEx_PLLSAI2_Config+0x60>
 8004240:	e020      	b.n	8004284 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004242:	4b62      	ldr	r3, [pc, #392]	; (80043cc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d11d      	bne.n	800428a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004252:	e01a      	b.n	800428a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004254:	4b5d      	ldr	r3, [pc, #372]	; (80043cc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800425c:	2b00      	cmp	r3, #0
 800425e:	d116      	bne.n	800428e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004264:	e013      	b.n	800428e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004266:	4b59      	ldr	r3, [pc, #356]	; (80043cc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10f      	bne.n	8004292 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004272:	4b56      	ldr	r3, [pc, #344]	; (80043cc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004282:	e006      	b.n	8004292 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	73fb      	strb	r3, [r7, #15]
      break;
 8004288:	e004      	b.n	8004294 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800428a:	bf00      	nop
 800428c:	e002      	b.n	8004294 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800428e:	bf00      	nop
 8004290:	e000      	b.n	8004294 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004292:	bf00      	nop
    }

    if(status == HAL_OK)
 8004294:	7bfb      	ldrb	r3, [r7, #15]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d108      	bne.n	80042ac <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800429a:	4b4c      	ldr	r3, [pc, #304]	; (80043cc <RCCEx_PLLSAI2_Config+0x1d8>)
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f023 0203 	bic.w	r2, r3, #3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4949      	ldr	r1, [pc, #292]	; (80043cc <RCCEx_PLLSAI2_Config+0x1d8>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f040 8086 	bne.w	80043c0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80042b4:	4b45      	ldr	r3, [pc, #276]	; (80043cc <RCCEx_PLLSAI2_Config+0x1d8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a44      	ldr	r2, [pc, #272]	; (80043cc <RCCEx_PLLSAI2_Config+0x1d8>)
 80042ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c0:	f7fe f868 	bl	8002394 <HAL_GetTick>
 80042c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042c6:	e009      	b.n	80042dc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042c8:	f7fe f864 	bl	8002394 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d902      	bls.n	80042dc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	73fb      	strb	r3, [r7, #15]
        break;
 80042da:	e005      	b.n	80042e8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042dc:	4b3b      	ldr	r3, [pc, #236]	; (80043cc <RCCEx_PLLSAI2_Config+0x1d8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1ef      	bne.n	80042c8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d168      	bne.n	80043c0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d113      	bne.n	800431c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042f4:	4b35      	ldr	r3, [pc, #212]	; (80043cc <RCCEx_PLLSAI2_Config+0x1d8>)
 80042f6:	695a      	ldr	r2, [r3, #20]
 80042f8:	4b35      	ldr	r3, [pc, #212]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6892      	ldr	r2, [r2, #8]
 8004300:	0211      	lsls	r1, r2, #8
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	68d2      	ldr	r2, [r2, #12]
 8004306:	06d2      	lsls	r2, r2, #27
 8004308:	4311      	orrs	r1, r2
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6852      	ldr	r2, [r2, #4]
 800430e:	3a01      	subs	r2, #1
 8004310:	0112      	lsls	r2, r2, #4
 8004312:	430a      	orrs	r2, r1
 8004314:	492d      	ldr	r1, [pc, #180]	; (80043cc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004316:	4313      	orrs	r3, r2
 8004318:	614b      	str	r3, [r1, #20]
 800431a:	e02d      	b.n	8004378 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d115      	bne.n	800434e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004322:	4b2a      	ldr	r3, [pc, #168]	; (80043cc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004324:	695a      	ldr	r2, [r3, #20]
 8004326:	4b2b      	ldr	r3, [pc, #172]	; (80043d4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004328:	4013      	ands	r3, r2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6892      	ldr	r2, [r2, #8]
 800432e:	0211      	lsls	r1, r2, #8
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6912      	ldr	r2, [r2, #16]
 8004334:	0852      	lsrs	r2, r2, #1
 8004336:	3a01      	subs	r2, #1
 8004338:	0552      	lsls	r2, r2, #21
 800433a:	4311      	orrs	r1, r2
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6852      	ldr	r2, [r2, #4]
 8004340:	3a01      	subs	r2, #1
 8004342:	0112      	lsls	r2, r2, #4
 8004344:	430a      	orrs	r2, r1
 8004346:	4921      	ldr	r1, [pc, #132]	; (80043cc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004348:	4313      	orrs	r3, r2
 800434a:	614b      	str	r3, [r1, #20]
 800434c:	e014      	b.n	8004378 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800434e:	4b1f      	ldr	r3, [pc, #124]	; (80043cc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004350:	695a      	ldr	r2, [r3, #20]
 8004352:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004354:	4013      	ands	r3, r2
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6892      	ldr	r2, [r2, #8]
 800435a:	0211      	lsls	r1, r2, #8
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6952      	ldr	r2, [r2, #20]
 8004360:	0852      	lsrs	r2, r2, #1
 8004362:	3a01      	subs	r2, #1
 8004364:	0652      	lsls	r2, r2, #25
 8004366:	4311      	orrs	r1, r2
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6852      	ldr	r2, [r2, #4]
 800436c:	3a01      	subs	r2, #1
 800436e:	0112      	lsls	r2, r2, #4
 8004370:	430a      	orrs	r2, r1
 8004372:	4916      	ldr	r1, [pc, #88]	; (80043cc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004374:	4313      	orrs	r3, r2
 8004376:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004378:	4b14      	ldr	r3, [pc, #80]	; (80043cc <RCCEx_PLLSAI2_Config+0x1d8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a13      	ldr	r2, [pc, #76]	; (80043cc <RCCEx_PLLSAI2_Config+0x1d8>)
 800437e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004382:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004384:	f7fe f806 	bl	8002394 <HAL_GetTick>
 8004388:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800438a:	e009      	b.n	80043a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800438c:	f7fe f802 	bl	8002394 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d902      	bls.n	80043a0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	73fb      	strb	r3, [r7, #15]
          break;
 800439e:	e005      	b.n	80043ac <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043a0:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <RCCEx_PLLSAI2_Config+0x1d8>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0ef      	beq.n	800438c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80043b2:	4b06      	ldr	r3, [pc, #24]	; (80043cc <RCCEx_PLLSAI2_Config+0x1d8>)
 80043b4:	695a      	ldr	r2, [r3, #20]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	4904      	ldr	r1, [pc, #16]	; (80043cc <RCCEx_PLLSAI2_Config+0x1d8>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40021000 	.word	0x40021000
 80043d0:	07ff800f 	.word	0x07ff800f
 80043d4:	ff9f800f 	.word	0xff9f800f
 80043d8:	f9ff800f 	.word	0xf9ff800f

080043dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e095      	b.n	800451a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d108      	bne.n	8004408 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043fe:	d009      	beq.n	8004414 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	61da      	str	r2, [r3, #28]
 8004406:	e005      	b.n	8004414 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fd fd68 	bl	8001f04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800444a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004454:	d902      	bls.n	800445c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	e002      	b.n	8004462 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800445c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004460:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800446a:	d007      	beq.n	800447c <HAL_SPI_Init+0xa0>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004474:	d002      	beq.n	800447c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044be:	ea42 0103 	orr.w	r1, r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	0c1b      	lsrs	r3, r3, #16
 80044d8:	f003 0204 	and.w	r2, r3, #4
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	f003 0310 	and.w	r3, r3, #16
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80044f8:	ea42 0103 	orr.w	r1, r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b088      	sub	sp, #32
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	603b      	str	r3, [r7, #0]
 800452e:	4613      	mov	r3, r2
 8004530:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_SPI_Transmit+0x22>
 8004540:	2302      	movs	r3, #2
 8004542:	e158      	b.n	80047f6 <HAL_SPI_Transmit+0x2d4>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800454c:	f7fd ff22 	bl	8002394 <HAL_GetTick>
 8004550:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004552:	88fb      	ldrh	r3, [r7, #6]
 8004554:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b01      	cmp	r3, #1
 8004560:	d002      	beq.n	8004568 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004562:	2302      	movs	r3, #2
 8004564:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004566:	e13d      	b.n	80047e4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <HAL_SPI_Transmit+0x52>
 800456e:	88fb      	ldrh	r3, [r7, #6]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d102      	bne.n	800457a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004578:	e134      	b.n	80047e4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2203      	movs	r2, #3
 800457e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	88fa      	ldrh	r2, [r7, #6]
 8004592:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	88fa      	ldrh	r2, [r7, #6]
 8004598:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c4:	d10f      	bne.n	80045e6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f0:	2b40      	cmp	r3, #64	; 0x40
 80045f2:	d007      	beq.n	8004604 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004602:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800460c:	d94b      	bls.n	80046a6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d002      	beq.n	800461c <HAL_SPI_Transmit+0xfa>
 8004616:	8afb      	ldrh	r3, [r7, #22]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d13e      	bne.n	800469a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	881a      	ldrh	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	1c9a      	adds	r2, r3, #2
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004636:	b29b      	uxth	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004640:	e02b      	b.n	800469a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b02      	cmp	r3, #2
 800464e:	d112      	bne.n	8004676 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	881a      	ldrh	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	1c9a      	adds	r2, r3, #2
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004674:	e011      	b.n	800469a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004676:	f7fd fe8d 	bl	8002394 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d803      	bhi.n	800468e <HAL_SPI_Transmit+0x16c>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468c:	d102      	bne.n	8004694 <HAL_SPI_Transmit+0x172>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d102      	bne.n	800469a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004698:	e0a4      	b.n	80047e4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800469e:	b29b      	uxth	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1ce      	bne.n	8004642 <HAL_SPI_Transmit+0x120>
 80046a4:	e07c      	b.n	80047a0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d002      	beq.n	80046b4 <HAL_SPI_Transmit+0x192>
 80046ae:	8afb      	ldrh	r3, [r7, #22]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d170      	bne.n	8004796 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d912      	bls.n	80046e4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	881a      	ldrh	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	1c9a      	adds	r2, r3, #2
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b02      	subs	r3, #2
 80046dc:	b29a      	uxth	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046e2:	e058      	b.n	8004796 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	330c      	adds	r3, #12
 80046ee:	7812      	ldrb	r2, [r2, #0]
 80046f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800470a:	e044      	b.n	8004796 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b02      	cmp	r3, #2
 8004718:	d12b      	bne.n	8004772 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b01      	cmp	r3, #1
 8004722:	d912      	bls.n	800474a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	881a      	ldrh	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	1c9a      	adds	r2, r3, #2
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b02      	subs	r3, #2
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004748:	e025      	b.n	8004796 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	330c      	adds	r3, #12
 8004754:	7812      	ldrb	r2, [r2, #0]
 8004756:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004770:	e011      	b.n	8004796 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004772:	f7fd fe0f 	bl	8002394 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d803      	bhi.n	800478a <HAL_SPI_Transmit+0x268>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004788:	d102      	bne.n	8004790 <HAL_SPI_Transmit+0x26e>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d102      	bne.n	8004796 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004794:	e026      	b.n	80047e4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800479a:	b29b      	uxth	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1b5      	bne.n	800470c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	6839      	ldr	r1, [r7, #0]
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 fce3 	bl	8005170 <SPI_EndRxTxTransaction>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2220      	movs	r2, #32
 80047b4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10a      	bne.n	80047d4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047be:	2300      	movs	r3, #0
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	77fb      	strb	r3, [r7, #31]
 80047e0:	e000      	b.n	80047e4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80047e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80047f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3720      	adds	r7, #32
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b088      	sub	sp, #32
 8004802:	af02      	add	r7, sp, #8
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	603b      	str	r3, [r7, #0]
 800480a:	4613      	mov	r3, r2
 800480c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800481a:	d112      	bne.n	8004842 <HAL_SPI_Receive+0x44>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10e      	bne.n	8004842 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2204      	movs	r2, #4
 8004828:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800482c:	88fa      	ldrh	r2, [r7, #6]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	4613      	mov	r3, r2
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	68b9      	ldr	r1, [r7, #8]
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 f910 	bl	8004a5e <HAL_SPI_TransmitReceive>
 800483e:	4603      	mov	r3, r0
 8004840:	e109      	b.n	8004a56 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_SPI_Receive+0x52>
 800484c:	2302      	movs	r3, #2
 800484e:	e102      	b.n	8004a56 <HAL_SPI_Receive+0x258>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004858:	f7fd fd9c 	bl	8002394 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b01      	cmp	r3, #1
 8004868:	d002      	beq.n	8004870 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800486a:	2302      	movs	r3, #2
 800486c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800486e:	e0e9      	b.n	8004a44 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <HAL_SPI_Receive+0x7e>
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d102      	bne.n	8004882 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004880:	e0e0      	b.n	8004a44 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2204      	movs	r2, #4
 8004886:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	88fa      	ldrh	r2, [r7, #6]
 800489a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	88fa      	ldrh	r2, [r7, #6]
 80048a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048cc:	d908      	bls.n	80048e0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048dc:	605a      	str	r2, [r3, #4]
 80048de:	e007      	b.n	80048f0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048ee:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f8:	d10f      	bne.n	800491a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004908:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004918:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004924:	2b40      	cmp	r3, #64	; 0x40
 8004926:	d007      	beq.n	8004938 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004936:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004940:	d867      	bhi.n	8004a12 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004942:	e030      	b.n	80049a6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b01      	cmp	r3, #1
 8004950:	d117      	bne.n	8004982 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f103 020c 	add.w	r2, r3, #12
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	7812      	ldrb	r2, [r2, #0]
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004980:	e011      	b.n	80049a6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004982:	f7fd fd07 	bl	8002394 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d803      	bhi.n	800499a <HAL_SPI_Receive+0x19c>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004998:	d102      	bne.n	80049a0 <HAL_SPI_Receive+0x1a2>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d102      	bne.n	80049a6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80049a4:	e04e      	b.n	8004a44 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1c8      	bne.n	8004944 <HAL_SPI_Receive+0x146>
 80049b2:	e034      	b.n	8004a1e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d115      	bne.n	80049ee <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049cc:	b292      	uxth	r2, r2
 80049ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	1c9a      	adds	r2, r3, #2
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80049ec:	e011      	b.n	8004a12 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049ee:	f7fd fcd1 	bl	8002394 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d803      	bhi.n	8004a06 <HAL_SPI_Receive+0x208>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a04:	d102      	bne.n	8004a0c <HAL_SPI_Receive+0x20e>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d102      	bne.n	8004a12 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004a10:	e018      	b.n	8004a44 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1ca      	bne.n	80049b4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	6839      	ldr	r1, [r7, #0]
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 fb4c 	bl	80050c0 <SPI_EndRxTransaction>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2220      	movs	r2, #32
 8004a32:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	75fb      	strb	r3, [r7, #23]
 8004a40:	e000      	b.n	8004a44 <HAL_SPI_Receive+0x246>
  }

error :
 8004a42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3718      	adds	r7, #24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b08a      	sub	sp, #40	; 0x28
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]
 8004a6a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a70:	2300      	movs	r3, #0
 8004a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <HAL_SPI_TransmitReceive+0x26>
 8004a80:	2302      	movs	r3, #2
 8004a82:	e1fb      	b.n	8004e7c <HAL_SPI_TransmitReceive+0x41e>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a8c:	f7fd fc82 	bl	8002394 <HAL_GetTick>
 8004a90:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a98:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004aa0:	887b      	ldrh	r3, [r7, #2]
 8004aa2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004aa4:	887b      	ldrh	r3, [r7, #2]
 8004aa6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004aa8:	7efb      	ldrb	r3, [r7, #27]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d00e      	beq.n	8004acc <HAL_SPI_TransmitReceive+0x6e>
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ab4:	d106      	bne.n	8004ac4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d102      	bne.n	8004ac4 <HAL_SPI_TransmitReceive+0x66>
 8004abe:	7efb      	ldrb	r3, [r7, #27]
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d003      	beq.n	8004acc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004aca:	e1cd      	b.n	8004e68 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d005      	beq.n	8004ade <HAL_SPI_TransmitReceive+0x80>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <HAL_SPI_TransmitReceive+0x80>
 8004ad8:	887b      	ldrh	r3, [r7, #2]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d103      	bne.n	8004ae6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004ae4:	e1c0      	b.n	8004e68 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d003      	beq.n	8004afa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2205      	movs	r2, #5
 8004af6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	887a      	ldrh	r2, [r7, #2]
 8004b0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	887a      	ldrh	r2, [r7, #2]
 8004b12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	887a      	ldrh	r2, [r7, #2]
 8004b20:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	887a      	ldrh	r2, [r7, #2]
 8004b26:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b3c:	d802      	bhi.n	8004b44 <HAL_SPI_TransmitReceive+0xe6>
 8004b3e:	8a3b      	ldrh	r3, [r7, #16]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d908      	bls.n	8004b56 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b52:	605a      	str	r2, [r3, #4]
 8004b54:	e007      	b.n	8004b66 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b64:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b70:	2b40      	cmp	r3, #64	; 0x40
 8004b72:	d007      	beq.n	8004b84 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b8c:	d97c      	bls.n	8004c88 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <HAL_SPI_TransmitReceive+0x13e>
 8004b96:	8a7b      	ldrh	r3, [r7, #18]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d169      	bne.n	8004c70 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba0:	881a      	ldrh	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	1c9a      	adds	r2, r3, #2
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bc0:	e056      	b.n	8004c70 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d11b      	bne.n	8004c08 <HAL_SPI_TransmitReceive+0x1aa>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d016      	beq.n	8004c08 <HAL_SPI_TransmitReceive+0x1aa>
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d113      	bne.n	8004c08 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be4:	881a      	ldrh	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	1c9a      	adds	r2, r3, #2
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d11c      	bne.n	8004c50 <HAL_SPI_TransmitReceive+0x1f2>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d016      	beq.n	8004c50 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68da      	ldr	r2, [r3, #12]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	b292      	uxth	r2, r2
 8004c2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	1c9a      	adds	r2, r3, #2
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c50:	f7fd fba0 	bl	8002394 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d807      	bhi.n	8004c70 <HAL_SPI_TransmitReceive+0x212>
 8004c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c66:	d003      	beq.n	8004c70 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004c6e:	e0fb      	b.n	8004e68 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1a3      	bne.n	8004bc2 <HAL_SPI_TransmitReceive+0x164>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d19d      	bne.n	8004bc2 <HAL_SPI_TransmitReceive+0x164>
 8004c86:	e0df      	b.n	8004e48 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <HAL_SPI_TransmitReceive+0x23a>
 8004c90:	8a7b      	ldrh	r3, [r7, #18]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	f040 80cb 	bne.w	8004e2e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d912      	bls.n	8004cc8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	881a      	ldrh	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb2:	1c9a      	adds	r2, r3, #2
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	3b02      	subs	r3, #2
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cc6:	e0b2      	b.n	8004e2e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	330c      	adds	r3, #12
 8004cd2:	7812      	ldrb	r2, [r2, #0]
 8004cd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cee:	e09e      	b.n	8004e2e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d134      	bne.n	8004d68 <HAL_SPI_TransmitReceive+0x30a>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d02f      	beq.n	8004d68 <HAL_SPI_TransmitReceive+0x30a>
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d12c      	bne.n	8004d68 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d912      	bls.n	8004d3e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1c:	881a      	ldrh	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	1c9a      	adds	r2, r3, #2
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3b02      	subs	r3, #2
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d3c:	e012      	b.n	8004d64 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	330c      	adds	r3, #12
 8004d48:	7812      	ldrb	r2, [r2, #0]
 8004d4a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d148      	bne.n	8004e08 <HAL_SPI_TransmitReceive+0x3aa>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d042      	beq.n	8004e08 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d923      	bls.n	8004dd6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	b292      	uxth	r2, r2
 8004d9a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	1c9a      	adds	r2, r3, #2
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b02      	subs	r3, #2
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d81f      	bhi.n	8004e04 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004dd2:	605a      	str	r2, [r3, #4]
 8004dd4:	e016      	b.n	8004e04 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f103 020c 	add.w	r2, r3, #12
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	7812      	ldrb	r2, [r2, #0]
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e04:	2301      	movs	r3, #1
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e08:	f7fd fac4 	bl	8002394 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d803      	bhi.n	8004e20 <HAL_SPI_TransmitReceive+0x3c2>
 8004e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1e:	d102      	bne.n	8004e26 <HAL_SPI_TransmitReceive+0x3c8>
 8004e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d103      	bne.n	8004e2e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004e2c:	e01c      	b.n	8004e68 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f47f af5b 	bne.w	8004cf0 <HAL_SPI_TransmitReceive+0x292>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f47f af54 	bne.w	8004cf0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f98f 	bl	8005170 <SPI_EndRxTxTransaction>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d006      	beq.n	8004e66 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2220      	movs	r2, #32
 8004e62:	661a      	str	r2, [r3, #96]	; 0x60
 8004e64:	e000      	b.n	8004e68 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004e66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3728      	adds	r7, #40	; 0x28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	603b      	str	r3, [r7, #0]
 8004e90:	4613      	mov	r3, r2
 8004e92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e94:	f7fd fa7e 	bl	8002394 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	1a9b      	subs	r3, r3, r2
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ea4:	f7fd fa76 	bl	8002394 <HAL_GetTick>
 8004ea8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004eaa:	4b39      	ldr	r3, [pc, #228]	; (8004f90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	015b      	lsls	r3, r3, #5
 8004eb0:	0d1b      	lsrs	r3, r3, #20
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	fb02 f303 	mul.w	r3, r2, r3
 8004eb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eba:	e054      	b.n	8004f66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec2:	d050      	beq.n	8004f66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ec4:	f7fd fa66 	bl	8002394 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	69fa      	ldr	r2, [r7, #28]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d902      	bls.n	8004eda <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d13d      	bne.n	8004f56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ee8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ef2:	d111      	bne.n	8004f18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004efc:	d004      	beq.n	8004f08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f06:	d107      	bne.n	8004f18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f20:	d10f      	bne.n	8004f42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e017      	b.n	8004f86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	bf0c      	ite	eq
 8004f76:	2301      	moveq	r3, #1
 8004f78:	2300      	movne	r3, #0
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d19b      	bne.n	8004ebc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3720      	adds	r7, #32
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20000004 	.word	0x20000004

08004f94 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08a      	sub	sp, #40	; 0x28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004fa6:	f7fd f9f5 	bl	8002394 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fae:	1a9b      	subs	r3, r3, r2
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004fb6:	f7fd f9ed 	bl	8002394 <HAL_GetTick>
 8004fba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	330c      	adds	r3, #12
 8004fc2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004fc4:	4b3d      	ldr	r3, [pc, #244]	; (80050bc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	00da      	lsls	r2, r3, #3
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	0d1b      	lsrs	r3, r3, #20
 8004fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd6:	fb02 f303 	mul.w	r3, r2, r3
 8004fda:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004fdc:	e060      	b.n	80050a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004fe4:	d107      	bne.n	8004ff6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d104      	bne.n	8004ff6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ff4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffc:	d050      	beq.n	80050a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ffe:	f7fd f9c9 	bl	8002394 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500a:	429a      	cmp	r2, r3
 800500c:	d902      	bls.n	8005014 <SPI_WaitFifoStateUntilTimeout+0x80>
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	2b00      	cmp	r3, #0
 8005012:	d13d      	bne.n	8005090 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005022:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800502c:	d111      	bne.n	8005052 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005036:	d004      	beq.n	8005042 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005040:	d107      	bne.n	8005052 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005050:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800505a:	d10f      	bne.n	800507c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800507a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e010      	b.n	80050b2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	3b01      	subs	r3, #1
 800509e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689a      	ldr	r2, [r3, #8]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	4013      	ands	r3, r2
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d196      	bne.n	8004fde <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3728      	adds	r7, #40	; 0x28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20000004 	.word	0x20000004

080050c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050d4:	d111      	bne.n	80050fa <SPI_EndRxTransaction+0x3a>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050de:	d004      	beq.n	80050ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e8:	d107      	bne.n	80050fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2200      	movs	r2, #0
 8005102:	2180      	movs	r1, #128	; 0x80
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff febd 	bl	8004e84 <SPI_WaitFlagStateUntilTimeout>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d007      	beq.n	8005120 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005114:	f043 0220 	orr.w	r2, r3, #32
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e023      	b.n	8005168 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005128:	d11d      	bne.n	8005166 <SPI_EndRxTransaction+0xa6>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005132:	d004      	beq.n	800513e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800513c:	d113      	bne.n	8005166 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2200      	movs	r2, #0
 8005146:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f7ff ff22 	bl	8004f94 <SPI_WaitFifoStateUntilTimeout>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d007      	beq.n	8005166 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800515a:	f043 0220 	orr.w	r2, r3, #32
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e000      	b.n	8005168 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af02      	add	r7, sp, #8
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2200      	movs	r2, #0
 8005184:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f7ff ff03 	bl	8004f94 <SPI_WaitFifoStateUntilTimeout>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d007      	beq.n	80051a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005198:	f043 0220 	orr.w	r2, r3, #32
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e027      	b.n	80051f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2200      	movs	r2, #0
 80051ac:	2180      	movs	r1, #128	; 0x80
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f7ff fe68 	bl	8004e84 <SPI_WaitFlagStateUntilTimeout>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d007      	beq.n	80051ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051be:	f043 0220 	orr.w	r2, r3, #32
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e014      	b.n	80051f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f7ff fedc 	bl	8004f94 <SPI_WaitFifoStateUntilTimeout>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d007      	beq.n	80051f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e6:	f043 0220 	orr.w	r2, r3, #32
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e000      	b.n	80051f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e042      	b.n	8005294 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005214:	2b00      	cmp	r3, #0
 8005216:	d106      	bne.n	8005226 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7fc feb3 	bl	8001f8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2224      	movs	r2, #36	; 0x24
 800522a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0201 	bic.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f8b4 	bl	80053ac <UART_SetConfig>
 8005244:	4603      	mov	r3, r0
 8005246:	2b01      	cmp	r3, #1
 8005248:	d101      	bne.n	800524e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e022      	b.n	8005294 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005252:	2b00      	cmp	r3, #0
 8005254:	d002      	beq.n	800525c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fba4 	bl	80059a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800526a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689a      	ldr	r2, [r3, #8]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800527a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0201 	orr.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fc2b 	bl	8005ae8 <UART_CheckIdleState>
 8005292:	4603      	mov	r3, r0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08a      	sub	sp, #40	; 0x28
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	603b      	str	r3, [r7, #0]
 80052a8:	4613      	mov	r3, r2
 80052aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b2:	2b20      	cmp	r3, #32
 80052b4:	d174      	bne.n	80053a0 <HAL_UART_Transmit+0x104>
  {
    if ((pData == NULL) || (Size == 0U))
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <HAL_UART_Transmit+0x26>
 80052bc:	88fb      	ldrh	r3, [r7, #6]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e06d      	b.n	80053a2 <HAL_UART_Transmit+0x106>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2221      	movs	r2, #33	; 0x21
 80052d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052d6:	f7fd f85d 	bl	8002394 <HAL_GetTick>
 80052da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	88fa      	ldrh	r2, [r7, #6]
 80052e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	88fa      	ldrh	r2, [r7, #6]
 80052e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f4:	d108      	bne.n	8005308 <HAL_UART_Transmit+0x6c>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d104      	bne.n	8005308 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052fe:	2300      	movs	r3, #0
 8005300:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	61bb      	str	r3, [r7, #24]
 8005306:	e003      	b.n	8005310 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800530c:	2300      	movs	r3, #0
 800530e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005310:	e02d      	b.n	800536e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2200      	movs	r2, #0
 800531a:	2180      	movs	r1, #128	; 0x80
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 fc31 	bl	8005b84 <UART_WaitOnFlagUntilTimeout>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e03a      	b.n	80053a2 <HAL_UART_Transmit+0x106>
      }
      if (pdata8bits == NULL)
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10b      	bne.n	800534a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	881a      	ldrh	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800533e:	b292      	uxth	r2, r2
 8005340:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	3302      	adds	r3, #2
 8005346:	61bb      	str	r3, [r7, #24]
 8005348:	e008      	b.n	800535c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	781a      	ldrb	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	b292      	uxth	r2, r2
 8005354:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	3301      	adds	r3, #1
 800535a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005362:	b29b      	uxth	r3, r3
 8005364:	3b01      	subs	r3, #1
 8005366:	b29a      	uxth	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005374:	b29b      	uxth	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1cb      	bne.n	8005312 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2200      	movs	r2, #0
 8005382:	2140      	movs	r1, #64	; 0x40
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 fbfd 	bl	8005b84 <UART_WaitOnFlagUntilTimeout>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <HAL_UART_Transmit+0xf8>
    {
      return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e006      	b.n	80053a2 <HAL_UART_Transmit+0x106>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2220      	movs	r2, #32
 8005398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800539c:	2300      	movs	r3, #0
 800539e:	e000      	b.n	80053a2 <HAL_UART_Transmit+0x106>
  }
  else
  {
    return HAL_BUSY;
 80053a0:	2302      	movs	r3, #2
  }
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3720      	adds	r7, #32
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053b0:	b08c      	sub	sp, #48	; 0x30
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	431a      	orrs	r2, r3
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4baa      	ldr	r3, [pc, #680]	; (8005684 <UART_SetConfig+0x2d8>)
 80053dc:	4013      	ands	r3, r2
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	6812      	ldr	r2, [r2, #0]
 80053e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053e4:	430b      	orrs	r3, r1
 80053e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a9f      	ldr	r2, [pc, #636]	; (8005688 <UART_SetConfig+0x2dc>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d004      	beq.n	8005418 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005414:	4313      	orrs	r3, r2
 8005416:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005422:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	6812      	ldr	r2, [r2, #0]
 800542a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800542c:	430b      	orrs	r3, r1
 800542e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005436:	f023 010f 	bic.w	r1, r3, #15
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a90      	ldr	r2, [pc, #576]	; (800568c <UART_SetConfig+0x2e0>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d125      	bne.n	800549c <UART_SetConfig+0xf0>
 8005450:	4b8f      	ldr	r3, [pc, #572]	; (8005690 <UART_SetConfig+0x2e4>)
 8005452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	2b03      	cmp	r3, #3
 800545c:	d81a      	bhi.n	8005494 <UART_SetConfig+0xe8>
 800545e:	a201      	add	r2, pc, #4	; (adr r2, 8005464 <UART_SetConfig+0xb8>)
 8005460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005464:	08005475 	.word	0x08005475
 8005468:	08005485 	.word	0x08005485
 800546c:	0800547d 	.word	0x0800547d
 8005470:	0800548d 	.word	0x0800548d
 8005474:	2301      	movs	r3, #1
 8005476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800547a:	e116      	b.n	80056aa <UART_SetConfig+0x2fe>
 800547c:	2302      	movs	r3, #2
 800547e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005482:	e112      	b.n	80056aa <UART_SetConfig+0x2fe>
 8005484:	2304      	movs	r3, #4
 8005486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800548a:	e10e      	b.n	80056aa <UART_SetConfig+0x2fe>
 800548c:	2308      	movs	r3, #8
 800548e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005492:	e10a      	b.n	80056aa <UART_SetConfig+0x2fe>
 8005494:	2310      	movs	r3, #16
 8005496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800549a:	e106      	b.n	80056aa <UART_SetConfig+0x2fe>
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a7c      	ldr	r2, [pc, #496]	; (8005694 <UART_SetConfig+0x2e8>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d138      	bne.n	8005518 <UART_SetConfig+0x16c>
 80054a6:	4b7a      	ldr	r3, [pc, #488]	; (8005690 <UART_SetConfig+0x2e4>)
 80054a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ac:	f003 030c 	and.w	r3, r3, #12
 80054b0:	2b0c      	cmp	r3, #12
 80054b2:	d82d      	bhi.n	8005510 <UART_SetConfig+0x164>
 80054b4:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <UART_SetConfig+0x110>)
 80054b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ba:	bf00      	nop
 80054bc:	080054f1 	.word	0x080054f1
 80054c0:	08005511 	.word	0x08005511
 80054c4:	08005511 	.word	0x08005511
 80054c8:	08005511 	.word	0x08005511
 80054cc:	08005501 	.word	0x08005501
 80054d0:	08005511 	.word	0x08005511
 80054d4:	08005511 	.word	0x08005511
 80054d8:	08005511 	.word	0x08005511
 80054dc:	080054f9 	.word	0x080054f9
 80054e0:	08005511 	.word	0x08005511
 80054e4:	08005511 	.word	0x08005511
 80054e8:	08005511 	.word	0x08005511
 80054ec:	08005509 	.word	0x08005509
 80054f0:	2300      	movs	r3, #0
 80054f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054f6:	e0d8      	b.n	80056aa <UART_SetConfig+0x2fe>
 80054f8:	2302      	movs	r3, #2
 80054fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054fe:	e0d4      	b.n	80056aa <UART_SetConfig+0x2fe>
 8005500:	2304      	movs	r3, #4
 8005502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005506:	e0d0      	b.n	80056aa <UART_SetConfig+0x2fe>
 8005508:	2308      	movs	r3, #8
 800550a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800550e:	e0cc      	b.n	80056aa <UART_SetConfig+0x2fe>
 8005510:	2310      	movs	r3, #16
 8005512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005516:	e0c8      	b.n	80056aa <UART_SetConfig+0x2fe>
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a5e      	ldr	r2, [pc, #376]	; (8005698 <UART_SetConfig+0x2ec>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d125      	bne.n	800556e <UART_SetConfig+0x1c2>
 8005522:	4b5b      	ldr	r3, [pc, #364]	; (8005690 <UART_SetConfig+0x2e4>)
 8005524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005528:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800552c:	2b30      	cmp	r3, #48	; 0x30
 800552e:	d016      	beq.n	800555e <UART_SetConfig+0x1b2>
 8005530:	2b30      	cmp	r3, #48	; 0x30
 8005532:	d818      	bhi.n	8005566 <UART_SetConfig+0x1ba>
 8005534:	2b20      	cmp	r3, #32
 8005536:	d00a      	beq.n	800554e <UART_SetConfig+0x1a2>
 8005538:	2b20      	cmp	r3, #32
 800553a:	d814      	bhi.n	8005566 <UART_SetConfig+0x1ba>
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <UART_SetConfig+0x19a>
 8005540:	2b10      	cmp	r3, #16
 8005542:	d008      	beq.n	8005556 <UART_SetConfig+0x1aa>
 8005544:	e00f      	b.n	8005566 <UART_SetConfig+0x1ba>
 8005546:	2300      	movs	r3, #0
 8005548:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800554c:	e0ad      	b.n	80056aa <UART_SetConfig+0x2fe>
 800554e:	2302      	movs	r3, #2
 8005550:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005554:	e0a9      	b.n	80056aa <UART_SetConfig+0x2fe>
 8005556:	2304      	movs	r3, #4
 8005558:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800555c:	e0a5      	b.n	80056aa <UART_SetConfig+0x2fe>
 800555e:	2308      	movs	r3, #8
 8005560:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005564:	e0a1      	b.n	80056aa <UART_SetConfig+0x2fe>
 8005566:	2310      	movs	r3, #16
 8005568:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800556c:	e09d      	b.n	80056aa <UART_SetConfig+0x2fe>
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a4a      	ldr	r2, [pc, #296]	; (800569c <UART_SetConfig+0x2f0>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d125      	bne.n	80055c4 <UART_SetConfig+0x218>
 8005578:	4b45      	ldr	r3, [pc, #276]	; (8005690 <UART_SetConfig+0x2e4>)
 800557a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005582:	2bc0      	cmp	r3, #192	; 0xc0
 8005584:	d016      	beq.n	80055b4 <UART_SetConfig+0x208>
 8005586:	2bc0      	cmp	r3, #192	; 0xc0
 8005588:	d818      	bhi.n	80055bc <UART_SetConfig+0x210>
 800558a:	2b80      	cmp	r3, #128	; 0x80
 800558c:	d00a      	beq.n	80055a4 <UART_SetConfig+0x1f8>
 800558e:	2b80      	cmp	r3, #128	; 0x80
 8005590:	d814      	bhi.n	80055bc <UART_SetConfig+0x210>
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <UART_SetConfig+0x1f0>
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	d008      	beq.n	80055ac <UART_SetConfig+0x200>
 800559a:	e00f      	b.n	80055bc <UART_SetConfig+0x210>
 800559c:	2300      	movs	r3, #0
 800559e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055a2:	e082      	b.n	80056aa <UART_SetConfig+0x2fe>
 80055a4:	2302      	movs	r3, #2
 80055a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055aa:	e07e      	b.n	80056aa <UART_SetConfig+0x2fe>
 80055ac:	2304      	movs	r3, #4
 80055ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055b2:	e07a      	b.n	80056aa <UART_SetConfig+0x2fe>
 80055b4:	2308      	movs	r3, #8
 80055b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ba:	e076      	b.n	80056aa <UART_SetConfig+0x2fe>
 80055bc:	2310      	movs	r3, #16
 80055be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055c2:	e072      	b.n	80056aa <UART_SetConfig+0x2fe>
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a35      	ldr	r2, [pc, #212]	; (80056a0 <UART_SetConfig+0x2f4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d12a      	bne.n	8005624 <UART_SetConfig+0x278>
 80055ce:	4b30      	ldr	r3, [pc, #192]	; (8005690 <UART_SetConfig+0x2e4>)
 80055d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055dc:	d01a      	beq.n	8005614 <UART_SetConfig+0x268>
 80055de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055e2:	d81b      	bhi.n	800561c <UART_SetConfig+0x270>
 80055e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e8:	d00c      	beq.n	8005604 <UART_SetConfig+0x258>
 80055ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055ee:	d815      	bhi.n	800561c <UART_SetConfig+0x270>
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <UART_SetConfig+0x250>
 80055f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055f8:	d008      	beq.n	800560c <UART_SetConfig+0x260>
 80055fa:	e00f      	b.n	800561c <UART_SetConfig+0x270>
 80055fc:	2300      	movs	r3, #0
 80055fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005602:	e052      	b.n	80056aa <UART_SetConfig+0x2fe>
 8005604:	2302      	movs	r3, #2
 8005606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800560a:	e04e      	b.n	80056aa <UART_SetConfig+0x2fe>
 800560c:	2304      	movs	r3, #4
 800560e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005612:	e04a      	b.n	80056aa <UART_SetConfig+0x2fe>
 8005614:	2308      	movs	r3, #8
 8005616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800561a:	e046      	b.n	80056aa <UART_SetConfig+0x2fe>
 800561c:	2310      	movs	r3, #16
 800561e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005622:	e042      	b.n	80056aa <UART_SetConfig+0x2fe>
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a17      	ldr	r2, [pc, #92]	; (8005688 <UART_SetConfig+0x2dc>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d13a      	bne.n	80056a4 <UART_SetConfig+0x2f8>
 800562e:	4b18      	ldr	r3, [pc, #96]	; (8005690 <UART_SetConfig+0x2e4>)
 8005630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005634:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005638:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800563c:	d01a      	beq.n	8005674 <UART_SetConfig+0x2c8>
 800563e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005642:	d81b      	bhi.n	800567c <UART_SetConfig+0x2d0>
 8005644:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005648:	d00c      	beq.n	8005664 <UART_SetConfig+0x2b8>
 800564a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800564e:	d815      	bhi.n	800567c <UART_SetConfig+0x2d0>
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <UART_SetConfig+0x2b0>
 8005654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005658:	d008      	beq.n	800566c <UART_SetConfig+0x2c0>
 800565a:	e00f      	b.n	800567c <UART_SetConfig+0x2d0>
 800565c:	2300      	movs	r3, #0
 800565e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005662:	e022      	b.n	80056aa <UART_SetConfig+0x2fe>
 8005664:	2302      	movs	r3, #2
 8005666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800566a:	e01e      	b.n	80056aa <UART_SetConfig+0x2fe>
 800566c:	2304      	movs	r3, #4
 800566e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005672:	e01a      	b.n	80056aa <UART_SetConfig+0x2fe>
 8005674:	2308      	movs	r3, #8
 8005676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800567a:	e016      	b.n	80056aa <UART_SetConfig+0x2fe>
 800567c:	2310      	movs	r3, #16
 800567e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005682:	e012      	b.n	80056aa <UART_SetConfig+0x2fe>
 8005684:	cfff69f3 	.word	0xcfff69f3
 8005688:	40008000 	.word	0x40008000
 800568c:	40013800 	.word	0x40013800
 8005690:	40021000 	.word	0x40021000
 8005694:	40004400 	.word	0x40004400
 8005698:	40004800 	.word	0x40004800
 800569c:	40004c00 	.word	0x40004c00
 80056a0:	40005000 	.word	0x40005000
 80056a4:	2310      	movs	r3, #16
 80056a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4aae      	ldr	r2, [pc, #696]	; (8005968 <UART_SetConfig+0x5bc>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	f040 8097 	bne.w	80057e4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056ba:	2b08      	cmp	r3, #8
 80056bc:	d823      	bhi.n	8005706 <UART_SetConfig+0x35a>
 80056be:	a201      	add	r2, pc, #4	; (adr r2, 80056c4 <UART_SetConfig+0x318>)
 80056c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c4:	080056e9 	.word	0x080056e9
 80056c8:	08005707 	.word	0x08005707
 80056cc:	080056f1 	.word	0x080056f1
 80056d0:	08005707 	.word	0x08005707
 80056d4:	080056f7 	.word	0x080056f7
 80056d8:	08005707 	.word	0x08005707
 80056dc:	08005707 	.word	0x08005707
 80056e0:	08005707 	.word	0x08005707
 80056e4:	080056ff 	.word	0x080056ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056e8:	f7fe f816 	bl	8003718 <HAL_RCC_GetPCLK1Freq>
 80056ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056ee:	e010      	b.n	8005712 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056f0:	4b9e      	ldr	r3, [pc, #632]	; (800596c <UART_SetConfig+0x5c0>)
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056f4:	e00d      	b.n	8005712 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056f6:	f7fd ff79 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 80056fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056fc:	e009      	b.n	8005712 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005704:	e005      	b.n	8005712 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005706:	2300      	movs	r3, #0
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005710:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 8130 	beq.w	800597a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	4a94      	ldr	r2, [pc, #592]	; (8005970 <UART_SetConfig+0x5c4>)
 8005720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005724:	461a      	mov	r2, r3
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	fbb3 f3f2 	udiv	r3, r3, r2
 800572c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	4613      	mov	r3, r2
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	4413      	add	r3, r2
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	429a      	cmp	r2, r3
 800573c:	d305      	bcc.n	800574a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	429a      	cmp	r2, r3
 8005748:	d903      	bls.n	8005752 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005750:	e113      	b.n	800597a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	2200      	movs	r2, #0
 8005756:	60bb      	str	r3, [r7, #8]
 8005758:	60fa      	str	r2, [r7, #12]
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	4a84      	ldr	r2, [pc, #528]	; (8005970 <UART_SetConfig+0x5c4>)
 8005760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005764:	b29b      	uxth	r3, r3
 8005766:	2200      	movs	r2, #0
 8005768:	603b      	str	r3, [r7, #0]
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005770:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005774:	f7fb faa0 	bl	8000cb8 <__aeabi_uldivmod>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	4610      	mov	r0, r2
 800577e:	4619      	mov	r1, r3
 8005780:	f04f 0200 	mov.w	r2, #0
 8005784:	f04f 0300 	mov.w	r3, #0
 8005788:	020b      	lsls	r3, r1, #8
 800578a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800578e:	0202      	lsls	r2, r0, #8
 8005790:	6979      	ldr	r1, [r7, #20]
 8005792:	6849      	ldr	r1, [r1, #4]
 8005794:	0849      	lsrs	r1, r1, #1
 8005796:	2000      	movs	r0, #0
 8005798:	460c      	mov	r4, r1
 800579a:	4605      	mov	r5, r0
 800579c:	eb12 0804 	adds.w	r8, r2, r4
 80057a0:	eb43 0905 	adc.w	r9, r3, r5
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	469a      	mov	sl, r3
 80057ac:	4693      	mov	fp, r2
 80057ae:	4652      	mov	r2, sl
 80057b0:	465b      	mov	r3, fp
 80057b2:	4640      	mov	r0, r8
 80057b4:	4649      	mov	r1, r9
 80057b6:	f7fb fa7f 	bl	8000cb8 <__aeabi_uldivmod>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4613      	mov	r3, r2
 80057c0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057c8:	d308      	bcc.n	80057dc <UART_SetConfig+0x430>
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057d0:	d204      	bcs.n	80057dc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6a3a      	ldr	r2, [r7, #32]
 80057d8:	60da      	str	r2, [r3, #12]
 80057da:	e0ce      	b.n	800597a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80057e2:	e0ca      	b.n	800597a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ec:	d166      	bne.n	80058bc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80057ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80057f2:	2b08      	cmp	r3, #8
 80057f4:	d827      	bhi.n	8005846 <UART_SetConfig+0x49a>
 80057f6:	a201      	add	r2, pc, #4	; (adr r2, 80057fc <UART_SetConfig+0x450>)
 80057f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fc:	08005821 	.word	0x08005821
 8005800:	08005829 	.word	0x08005829
 8005804:	08005831 	.word	0x08005831
 8005808:	08005847 	.word	0x08005847
 800580c:	08005837 	.word	0x08005837
 8005810:	08005847 	.word	0x08005847
 8005814:	08005847 	.word	0x08005847
 8005818:	08005847 	.word	0x08005847
 800581c:	0800583f 	.word	0x0800583f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005820:	f7fd ff7a 	bl	8003718 <HAL_RCC_GetPCLK1Freq>
 8005824:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005826:	e014      	b.n	8005852 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005828:	f7fd ff8c 	bl	8003744 <HAL_RCC_GetPCLK2Freq>
 800582c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800582e:	e010      	b.n	8005852 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005830:	4b4e      	ldr	r3, [pc, #312]	; (800596c <UART_SetConfig+0x5c0>)
 8005832:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005834:	e00d      	b.n	8005852 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005836:	f7fd fed9 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 800583a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800583c:	e009      	b.n	8005852 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800583e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005842:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005844:	e005      	b.n	8005852 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005850:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 8090 	beq.w	800597a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	4a44      	ldr	r2, [pc, #272]	; (8005970 <UART_SetConfig+0x5c4>)
 8005860:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005864:	461a      	mov	r2, r3
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	fbb3 f3f2 	udiv	r3, r3, r2
 800586c:	005a      	lsls	r2, r3, #1
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	085b      	lsrs	r3, r3, #1
 8005874:	441a      	add	r2, r3
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	fbb2 f3f3 	udiv	r3, r2, r3
 800587e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	2b0f      	cmp	r3, #15
 8005884:	d916      	bls.n	80058b4 <UART_SetConfig+0x508>
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800588c:	d212      	bcs.n	80058b4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800588e:	6a3b      	ldr	r3, [r7, #32]
 8005890:	b29b      	uxth	r3, r3
 8005892:	f023 030f 	bic.w	r3, r3, #15
 8005896:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	085b      	lsrs	r3, r3, #1
 800589c:	b29b      	uxth	r3, r3
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	8bfb      	ldrh	r3, [r7, #30]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	8bfa      	ldrh	r2, [r7, #30]
 80058b0:	60da      	str	r2, [r3, #12]
 80058b2:	e062      	b.n	800597a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80058ba:	e05e      	b.n	800597a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d828      	bhi.n	8005916 <UART_SetConfig+0x56a>
 80058c4:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <UART_SetConfig+0x520>)
 80058c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ca:	bf00      	nop
 80058cc:	080058f1 	.word	0x080058f1
 80058d0:	080058f9 	.word	0x080058f9
 80058d4:	08005901 	.word	0x08005901
 80058d8:	08005917 	.word	0x08005917
 80058dc:	08005907 	.word	0x08005907
 80058e0:	08005917 	.word	0x08005917
 80058e4:	08005917 	.word	0x08005917
 80058e8:	08005917 	.word	0x08005917
 80058ec:	0800590f 	.word	0x0800590f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058f0:	f7fd ff12 	bl	8003718 <HAL_RCC_GetPCLK1Freq>
 80058f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058f6:	e014      	b.n	8005922 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058f8:	f7fd ff24 	bl	8003744 <HAL_RCC_GetPCLK2Freq>
 80058fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058fe:	e010      	b.n	8005922 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005900:	4b1a      	ldr	r3, [pc, #104]	; (800596c <UART_SetConfig+0x5c0>)
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005904:	e00d      	b.n	8005922 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005906:	f7fd fe71 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 800590a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800590c:	e009      	b.n	8005922 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800590e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005912:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005914:	e005      	b.n	8005922 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005920:	bf00      	nop
    }

    if (pclk != 0U)
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	2b00      	cmp	r3, #0
 8005926:	d028      	beq.n	800597a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	4a10      	ldr	r2, [pc, #64]	; (8005970 <UART_SetConfig+0x5c4>)
 800592e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005932:	461a      	mov	r2, r3
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	fbb3 f2f2 	udiv	r2, r3, r2
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	085b      	lsrs	r3, r3, #1
 8005940:	441a      	add	r2, r3
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	fbb2 f3f3 	udiv	r3, r2, r3
 800594a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	2b0f      	cmp	r3, #15
 8005950:	d910      	bls.n	8005974 <UART_SetConfig+0x5c8>
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005958:	d20c      	bcs.n	8005974 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	b29a      	uxth	r2, r3
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	60da      	str	r2, [r3, #12]
 8005964:	e009      	b.n	800597a <UART_SetConfig+0x5ce>
 8005966:	bf00      	nop
 8005968:	40008000 	.word	0x40008000
 800596c:	00f42400 	.word	0x00f42400
 8005970:	0800ddb4 	.word	0x0800ddb4
      }
      else
      {
        ret = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2201      	movs	r2, #1
 800597e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2201      	movs	r2, #1
 8005986:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2200      	movs	r2, #0
 800598e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	2200      	movs	r2, #0
 8005994:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005996:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800599a:	4618      	mov	r0, r3
 800599c:	3730      	adds	r7, #48	; 0x30
 800599e:	46bd      	mov	sp, r7
 80059a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080059a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00a      	beq.n	80059ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00a      	beq.n	8005a12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00a      	beq.n	8005a34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a38:	f003 0310 	and.w	r3, r3, #16
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00a      	beq.n	8005a56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5a:	f003 0320 	and.w	r3, r3, #32
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00a      	beq.n	8005a78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d01a      	beq.n	8005aba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aa2:	d10a      	bne.n	8005aba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00a      	beq.n	8005adc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	605a      	str	r2, [r3, #4]
  }
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af02      	add	r7, sp, #8
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005af8:	f7fc fc4c 	bl	8002394 <HAL_GetTick>
 8005afc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d10e      	bne.n	8005b2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f832 	bl	8005b84 <UART_WaitOnFlagUntilTimeout>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e028      	b.n	8005b7c <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0304 	and.w	r3, r3, #4
 8005b34:	2b04      	cmp	r3, #4
 8005b36:	d10e      	bne.n	8005b56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f81c 	bl	8005b84 <UART_WaitOnFlagUntilTimeout>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e012      	b.n	8005b7c <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2220      	movs	r2, #32
 8005b62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b09c      	sub	sp, #112	; 0x70
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	4613      	mov	r3, r2
 8005b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b94:	e0a9      	b.n	8005cea <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9c:	f000 80a5 	beq.w	8005cea <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ba0:	f7fc fbf8 	bl	8002394 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d302      	bcc.n	8005bb6 <UART_WaitOnFlagUntilTimeout+0x32>
 8005bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d140      	bne.n	8005c38 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bbe:	e853 3f00 	ldrex	r3, [r3]
 8005bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bca:	667b      	str	r3, [r7, #100]	; 0x64
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bd6:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005bda:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005bdc:	e841 2300 	strex	r3, r2, [r1]
 8005be0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1e6      	bne.n	8005bb6 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3308      	adds	r3, #8
 8005bee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf2:	e853 3f00 	ldrex	r3, [r3]
 8005bf6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfa:	f023 0301 	bic.w	r3, r3, #1
 8005bfe:	663b      	str	r3, [r7, #96]	; 0x60
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3308      	adds	r3, #8
 8005c06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c08:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c0a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c10:	e841 2300 	strex	r3, r2, [r1]
 8005c14:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1e5      	bne.n	8005be8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e069      	b.n	8005d0c <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0304 	and.w	r3, r3, #4
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d051      	beq.n	8005cea <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c54:	d149      	bne.n	8005cea <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c5e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c80:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c86:	e841 2300 	strex	r3, r2, [r1]
 8005c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1e6      	bne.n	8005c60 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3308      	adds	r3, #8
 8005c98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	f023 0301 	bic.w	r3, r3, #1
 8005ca8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3308      	adds	r3, #8
 8005cb0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005cb2:	623a      	str	r2, [r7, #32]
 8005cb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb6:	69f9      	ldr	r1, [r7, #28]
 8005cb8:	6a3a      	ldr	r2, [r7, #32]
 8005cba:	e841 2300 	strex	r3, r2, [r1]
 8005cbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1e5      	bne.n	8005c92 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e010      	b.n	8005d0c <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69da      	ldr	r2, [r3, #28]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	bf0c      	ite	eq
 8005cfa:	2301      	moveq	r3, #1
 8005cfc:	2300      	movne	r3, #0
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	461a      	mov	r2, r3
 8005d02:	79fb      	ldrb	r3, [r7, #7]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	f43f af46 	beq.w	8005b96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3770      	adds	r7, #112	; 0x70
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d101      	bne.n	8005d2a <HAL_UARTEx_DisableFifoMode+0x16>
 8005d26:	2302      	movs	r3, #2
 8005d28:	e027      	b.n	8005d7a <HAL_UARTEx_DisableFifoMode+0x66>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2224      	movs	r2, #36	; 0x24
 8005d36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0201 	bic.w	r2, r2, #1
 8005d50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b084      	sub	sp, #16
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d101      	bne.n	8005d9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	e02d      	b.n	8005dfa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2224      	movs	r2, #36	; 0x24
 8005daa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0201 	bic.w	r2, r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f850 	bl	8005e80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b084      	sub	sp, #16
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d101      	bne.n	8005e1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e16:	2302      	movs	r3, #2
 8005e18:	e02d      	b.n	8005e76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2224      	movs	r2, #36	; 0x24
 8005e26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0201 	bic.w	r2, r2, #1
 8005e40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f812 	bl	8005e80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d108      	bne.n	8005ea2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ea0:	e031      	b.n	8005f06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ea2:	2308      	movs	r3, #8
 8005ea4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ea6:	2308      	movs	r3, #8
 8005ea8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	0e5b      	lsrs	r3, r3, #25
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	0f5b      	lsrs	r3, r3, #29
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	f003 0307 	and.w	r3, r3, #7
 8005ec8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005eca:	7bbb      	ldrb	r3, [r7, #14]
 8005ecc:	7b3a      	ldrb	r2, [r7, #12]
 8005ece:	4911      	ldr	r1, [pc, #68]	; (8005f14 <UARTEx_SetNbDataToProcess+0x94>)
 8005ed0:	5c8a      	ldrb	r2, [r1, r2]
 8005ed2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ed6:	7b3a      	ldrb	r2, [r7, #12]
 8005ed8:	490f      	ldr	r1, [pc, #60]	; (8005f18 <UARTEx_SetNbDataToProcess+0x98>)
 8005eda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005edc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ee8:	7bfb      	ldrb	r3, [r7, #15]
 8005eea:	7b7a      	ldrb	r2, [r7, #13]
 8005eec:	4909      	ldr	r1, [pc, #36]	; (8005f14 <UARTEx_SetNbDataToProcess+0x94>)
 8005eee:	5c8a      	ldrb	r2, [r1, r2]
 8005ef0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ef4:	7b7a      	ldrb	r2, [r7, #13]
 8005ef6:	4908      	ldr	r1, [pc, #32]	; (8005f18 <UARTEx_SetNbDataToProcess+0x98>)
 8005ef8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005efa:	fb93 f3f2 	sdiv	r3, r3, r2
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005f06:	bf00      	nop
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	0800ddcc 	.word	0x0800ddcc
 8005f18:	0800ddd4 	.word	0x0800ddd4

08005f1c <ism330dhcx_read_reg>:
  *
  */
int32_t __weak ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8005f1c:	b590      	push	{r4, r7, lr}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	607a      	str	r2, [r7, #4]
 8005f26:	461a      	mov	r2, r3
 8005f28:	460b      	mov	r3, r1
 8005f2a:	72fb      	strb	r3, [r7, #11]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	685c      	ldr	r4, [r3, #4]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	68d8      	ldr	r0, [r3, #12]
 8005f38:	893b      	ldrh	r3, [r7, #8]
 8005f3a:	7af9      	ldrb	r1, [r7, #11]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	47a0      	blx	r4
 8005f40:	6178      	str	r0, [r7, #20]

  return ret;
 8005f42:	697b      	ldr	r3, [r7, #20]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	371c      	adds	r7, #28
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd90      	pop	{r4, r7, pc}

08005f4c <ism330dhcx_write_reg>:
  *
  */
int32_t __weak ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8005f4c:	b590      	push	{r4, r7, lr}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	607a      	str	r2, [r7, #4]
 8005f56:	461a      	mov	r2, r3
 8005f58:	460b      	mov	r3, r1
 8005f5a:	72fb      	strb	r3, [r7, #11]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681c      	ldr	r4, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	68d8      	ldr	r0, [r3, #12]
 8005f68:	893b      	ldrh	r3, [r7, #8]
 8005f6a:	7af9      	ldrb	r1, [r7, #11]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	47a0      	blx	r4
 8005f70:	6178      	str	r0, [r7, #20]

  return ret;
 8005f72:	697b      	ldr	r3, [r7, #20]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	371c      	adds	r7, #28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd90      	pop	{r4, r7, pc}

08005f7c <ism330dhcx_from_fs2g_to_mg>:
  * @{
  *
  */

float_t ism330dhcx_from_fs2g_to_mg(int16_t lsb)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	4603      	mov	r3, r0
 8005f84:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8005f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f8a:	ee07 3a90 	vmov	s15, r3
 8005f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f92:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005fa8 <ism330dhcx_from_fs2g_to_mg+0x2c>
 8005f96:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	3d79db23 	.word	0x3d79db23

08005fac <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005fb8:	f107 0208 	add.w	r2, r7, #8
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	2110      	movs	r1, #16
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7ff ffab 	bl	8005f1c <ism330dhcx_read_reg>
 8005fc6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10f      	bne.n	8005fee <ism330dhcx_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8005fce:	78fb      	ldrb	r3, [r7, #3]
 8005fd0:	f003 0303 	and.w	r3, r3, #3
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	7a3b      	ldrb	r3, [r7, #8]
 8005fd8:	f362 0383 	bfi	r3, r2, #2, #2
 8005fdc:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005fde:	f107 0208 	add.w	r2, r7, #8
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	2110      	movs	r1, #16
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7ff ffb0 	bl	8005f4c <ism330dhcx_write_reg>
 8005fec:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8005fee:	68fb      	ldr	r3, [r7, #12]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	460b      	mov	r3, r1
 8006002:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8006008:	f107 030c 	add.w	r3, r7, #12
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fb92 	bl	8006738 <ism330dhcx_fsm_enable_get>
 8006014:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	f040 80c4 	bne.w	80061a6 <ism330dhcx_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800601e:	7b3b      	ldrb	r3, [r7, #12]
 8006020:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006024:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006026:	7b3b      	ldrb	r3, [r7, #12]
 8006028:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800602c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800602e:	4313      	orrs	r3, r2
 8006030:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006032:	7b3b      	ldrb	r3, [r7, #12]
 8006034:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006038:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800603a:	4313      	orrs	r3, r2
 800603c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800603e:	7b3b      	ldrb	r3, [r7, #12]
 8006040:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006044:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006046:	4313      	orrs	r3, r2
 8006048:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800604a:	7b3b      	ldrb	r3, [r7, #12]
 800604c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006050:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006052:	4313      	orrs	r3, r2
 8006054:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006056:	7b3b      	ldrb	r3, [r7, #12]
 8006058:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800605c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800605e:	4313      	orrs	r3, r2
 8006060:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006062:	7b3b      	ldrb	r3, [r7, #12]
 8006064:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006068:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800606a:	4313      	orrs	r3, r2
 800606c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800606e:	7b3b      	ldrb	r3, [r7, #12]
 8006070:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006074:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006076:	4313      	orrs	r3, r2
 8006078:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800607a:	7b7b      	ldrb	r3, [r7, #13]
 800607c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006080:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006082:	4313      	orrs	r3, r2
 8006084:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006086:	7b7b      	ldrb	r3, [r7, #13]
 8006088:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800608c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800608e:	4313      	orrs	r3, r2
 8006090:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006092:	7b7b      	ldrb	r3, [r7, #13]
 8006094:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006098:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800609a:	4313      	orrs	r3, r2
 800609c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800609e:	7b7b      	ldrb	r3, [r7, #13]
 80060a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80060a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80060a6:	4313      	orrs	r3, r2
 80060a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80060aa:	7b7b      	ldrb	r3, [r7, #13]
 80060ac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80060b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80060b2:	4313      	orrs	r3, r2
 80060b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80060b6:	7b7b      	ldrb	r3, [r7, #13]
 80060b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80060bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80060be:	4313      	orrs	r3, r2
 80060c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80060c2:	7b7b      	ldrb	r3, [r7, #13]
 80060c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80060c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80060ca:	4313      	orrs	r3, r2
 80060cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80060ce:	7b7b      	ldrb	r3, [r7, #13]
 80060d0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80060d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80060d6:	4313      	orrs	r3, r2
 80060d8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d163      	bne.n	80061a6 <ism330dhcx_xl_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 80060de:	f107 030b 	add.w	r3, r7, #11
 80060e2:	4619      	mov	r1, r3
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fb53 	bl	8006790 <ism330dhcx_fsm_data_rate_get>
 80060ea:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d159      	bne.n	80061a6 <ism330dhcx_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80060f2:	7afb      	ldrb	r3, [r7, #11]
 80060f4:	2b03      	cmp	r3, #3
 80060f6:	d853      	bhi.n	80061a0 <ism330dhcx_xl_data_rate_set+0x1a8>
 80060f8:	a201      	add	r2, pc, #4	; (adr r2, 8006100 <ism330dhcx_xl_data_rate_set+0x108>)
 80060fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fe:	bf00      	nop
 8006100:	08006111 	.word	0x08006111
 8006104:	08006123 	.word	0x08006123
 8006108:	08006141 	.word	0x08006141
 800610c:	0800616b 	.word	0x0800616b
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8006110:	78fb      	ldrb	r3, [r7, #3]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d102      	bne.n	800611c <ism330dhcx_xl_data_rate_set+0x124>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8006116:	2301      	movs	r3, #1
 8006118:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800611a:	e045      	b.n	80061a8 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800611c:	78fb      	ldrb	r3, [r7, #3]
 800611e:	75fb      	strb	r3, [r7, #23]
            break;
 8006120:	e042      	b.n	80061a8 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8006122:	78fb      	ldrb	r3, [r7, #3]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d102      	bne.n	800612e <ism330dhcx_xl_data_rate_set+0x136>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8006128:	2302      	movs	r3, #2
 800612a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800612c:	e03c      	b.n	80061a8 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 800612e:	78fb      	ldrb	r3, [r7, #3]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d102      	bne.n	800613a <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8006134:	2302      	movs	r3, #2
 8006136:	75fb      	strb	r3, [r7, #23]
            break;
 8006138:	e036      	b.n	80061a8 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800613a:	78fb      	ldrb	r3, [r7, #3]
 800613c:	75fb      	strb	r3, [r7, #23]
            break;
 800613e:	e033      	b.n	80061a8 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d102      	bne.n	800614c <ism330dhcx_xl_data_rate_set+0x154>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8006146:	2303      	movs	r3, #3
 8006148:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800614a:	e02d      	b.n	80061a8 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 800614c:	78fb      	ldrb	r3, [r7, #3]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d102      	bne.n	8006158 <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8006152:	2303      	movs	r3, #3
 8006154:	75fb      	strb	r3, [r7, #23]
            break;
 8006156:	e027      	b.n	80061a8 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8006158:	78fb      	ldrb	r3, [r7, #3]
 800615a:	2b02      	cmp	r3, #2
 800615c:	d102      	bne.n	8006164 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800615e:	2303      	movs	r3, #3
 8006160:	75fb      	strb	r3, [r7, #23]
            break;
 8006162:	e021      	b.n	80061a8 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	75fb      	strb	r3, [r7, #23]
            break;
 8006168:	e01e      	b.n	80061a8 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d102      	bne.n	8006176 <ism330dhcx_xl_data_rate_set+0x17e>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8006170:	2304      	movs	r3, #4
 8006172:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006174:	e018      	b.n	80061a8 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8006176:	78fb      	ldrb	r3, [r7, #3]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d102      	bne.n	8006182 <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800617c:	2304      	movs	r3, #4
 800617e:	75fb      	strb	r3, [r7, #23]
            break;
 8006180:	e012      	b.n	80061a8 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8006182:	78fb      	ldrb	r3, [r7, #3]
 8006184:	2b02      	cmp	r3, #2
 8006186:	d102      	bne.n	800618e <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8006188:	2304      	movs	r3, #4
 800618a:	75fb      	strb	r3, [r7, #23]
            break;
 800618c:	e00c      	b.n	80061a8 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 800618e:	78fb      	ldrb	r3, [r7, #3]
 8006190:	2b03      	cmp	r3, #3
 8006192:	d102      	bne.n	800619a <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8006194:	2304      	movs	r3, #4
 8006196:	75fb      	strb	r3, [r7, #23]
            break;
 8006198:	e006      	b.n	80061a8 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800619a:	78fb      	ldrb	r3, [r7, #3]
 800619c:	75fb      	strb	r3, [r7, #23]
            break;
 800619e:	e003      	b.n	80061a8 <ism330dhcx_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80061a0:	78fb      	ldrb	r3, [r7, #3]
 80061a2:	75fb      	strb	r3, [r7, #23]
            break;
 80061a4:	e000      	b.n	80061a8 <ism330dhcx_xl_data_rate_set+0x1b0>
        }
      }
 80061a6:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 80061a8:	2300      	movs	r3, #0
 80061aa:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d16d      	bne.n	800628e <ism330dhcx_xl_data_rate_set+0x296>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 80061b2:	f107 030a 	add.w	r3, r7, #10
 80061b6:	4619      	mov	r1, r3
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 fb31 	bl	8006820 <ism330dhcx_mlc_get>
 80061be:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 80061c0:	7abb      	ldrb	r3, [r7, #10]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d163      	bne.n	800628e <ism330dhcx_xl_data_rate_set+0x296>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 80061c6:	f107 0309 	add.w	r3, r7, #9
 80061ca:	4619      	mov	r1, r3
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fb51 	bl	8006874 <ism330dhcx_mlc_data_rate_get>
 80061d2:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d159      	bne.n	800628e <ism330dhcx_xl_data_rate_set+0x296>
      {
        switch (mlc_odr)
 80061da:	7a7b      	ldrb	r3, [r7, #9]
 80061dc:	2b03      	cmp	r3, #3
 80061de:	d853      	bhi.n	8006288 <ism330dhcx_xl_data_rate_set+0x290>
 80061e0:	a201      	add	r2, pc, #4	; (adr r2, 80061e8 <ism330dhcx_xl_data_rate_set+0x1f0>)
 80061e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e6:	bf00      	nop
 80061e8:	080061f9 	.word	0x080061f9
 80061ec:	0800620b 	.word	0x0800620b
 80061f0:	08006229 	.word	0x08006229
 80061f4:	08006253 	.word	0x08006253
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80061f8:	78fb      	ldrb	r3, [r7, #3]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d102      	bne.n	8006204 <ism330dhcx_xl_data_rate_set+0x20c>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 80061fe:	2301      	movs	r3, #1
 8006200:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006202:	e045      	b.n	8006290 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8006204:	78fb      	ldrb	r3, [r7, #3]
 8006206:	75fb      	strb	r3, [r7, #23]
            break;
 8006208:	e042      	b.n	8006290 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800620a:	78fb      	ldrb	r3, [r7, #3]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d102      	bne.n	8006216 <ism330dhcx_xl_data_rate_set+0x21e>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8006210:	2302      	movs	r3, #2
 8006212:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006214:	e03c      	b.n	8006290 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8006216:	78fb      	ldrb	r3, [r7, #3]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d102      	bne.n	8006222 <ism330dhcx_xl_data_rate_set+0x22a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 800621c:	2302      	movs	r3, #2
 800621e:	75fb      	strb	r3, [r7, #23]
            break;
 8006220:	e036      	b.n	8006290 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8006222:	78fb      	ldrb	r3, [r7, #3]
 8006224:	75fb      	strb	r3, [r7, #23]
            break;
 8006226:	e033      	b.n	8006290 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d102      	bne.n	8006234 <ism330dhcx_xl_data_rate_set+0x23c>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800622e:	2303      	movs	r3, #3
 8006230:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006232:	e02d      	b.n	8006290 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8006234:	78fb      	ldrb	r3, [r7, #3]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d102      	bne.n	8006240 <ism330dhcx_xl_data_rate_set+0x248>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800623a:	2303      	movs	r3, #3
 800623c:	75fb      	strb	r3, [r7, #23]
            break;
 800623e:	e027      	b.n	8006290 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	2b02      	cmp	r3, #2
 8006244:	d102      	bne.n	800624c <ism330dhcx_xl_data_rate_set+0x254>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8006246:	2303      	movs	r3, #3
 8006248:	75fb      	strb	r3, [r7, #23]
            break;
 800624a:	e021      	b.n	8006290 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 800624c:	78fb      	ldrb	r3, [r7, #3]
 800624e:	75fb      	strb	r3, [r7, #23]
            break;
 8006250:	e01e      	b.n	8006290 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8006252:	78fb      	ldrb	r3, [r7, #3]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d102      	bne.n	800625e <ism330dhcx_xl_data_rate_set+0x266>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8006258:	2304      	movs	r3, #4
 800625a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800625c:	e018      	b.n	8006290 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 800625e:	78fb      	ldrb	r3, [r7, #3]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d102      	bne.n	800626a <ism330dhcx_xl_data_rate_set+0x272>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8006264:	2304      	movs	r3, #4
 8006266:	75fb      	strb	r3, [r7, #23]
            break;
 8006268:	e012      	b.n	8006290 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	2b02      	cmp	r3, #2
 800626e:	d102      	bne.n	8006276 <ism330dhcx_xl_data_rate_set+0x27e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8006270:	2304      	movs	r3, #4
 8006272:	75fb      	strb	r3, [r7, #23]
            break;
 8006274:	e00c      	b.n	8006290 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 8006276:	78fb      	ldrb	r3, [r7, #3]
 8006278:	2b03      	cmp	r3, #3
 800627a:	d102      	bne.n	8006282 <ism330dhcx_xl_data_rate_set+0x28a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800627c:	2304      	movs	r3, #4
 800627e:	75fb      	strb	r3, [r7, #23]
            break;
 8006280:	e006      	b.n	8006290 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	75fb      	strb	r3, [r7, #23]
            break;
 8006286:	e003      	b.n	8006290 <ism330dhcx_xl_data_rate_set+0x298>

          default:
            odr_xl = val;
 8006288:	78fb      	ldrb	r3, [r7, #3]
 800628a:	75fb      	strb	r3, [r7, #23]
            break;
 800628c:	e000      	b.n	8006290 <ism330dhcx_xl_data_rate_set+0x298>
        }
      }
 800628e:	bf00      	nop
    }
  }

  if (ret == 0)
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d107      	bne.n	80062a6 <ism330dhcx_xl_data_rate_set+0x2ae>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8006296:	f107 0208 	add.w	r2, r7, #8
 800629a:	2301      	movs	r3, #1
 800629c:	2110      	movs	r1, #16
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7ff fe3c 	bl	8005f1c <ism330dhcx_read_reg>
 80062a4:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0)
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10f      	bne.n	80062cc <ism330dhcx_xl_data_rate_set+0x2d4>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 80062ac:	7dfb      	ldrb	r3, [r7, #23]
 80062ae:	f003 030f 	and.w	r3, r3, #15
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	7a3b      	ldrb	r3, [r7, #8]
 80062b6:	f362 1307 	bfi	r3, r2, #4, #4
 80062ba:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 80062bc:	f107 0208 	add.w	r2, r7, #8
 80062c0:	2301      	movs	r3, #1
 80062c2:	2110      	movs	r1, #16
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7ff fe41 	bl	8005f4c <ism330dhcx_write_reg>
 80062ca:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80062cc:	693b      	ldr	r3, [r7, #16]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3718      	adds	r7, #24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop

080062d8 <ism330dhcx_fifo_out_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_out_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_DATA_OUT_X_L, buff, 6);
 80062e2:	2306      	movs	r3, #6
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	2179      	movs	r1, #121	; 0x79
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7ff fe17 	bl	8005f1c <ism330dhcx_read_reg>
 80062ee:	60f8      	str	r0, [r7, #12]

  return ret;
 80062f0:	68fb      	ldr	r3, [r7, #12]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b084      	sub	sp, #16
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	460b      	mov	r3, r1
 8006304:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 8006306:	f107 0208 	add.w	r2, r7, #8
 800630a:	2301      	movs	r3, #1
 800630c:	2118      	movs	r1, #24
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7ff fe04 	bl	8005f1c <ism330dhcx_read_reg>
 8006314:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10f      	bne.n	800633c <ism330dhcx_device_conf_set+0x42>
  {
    ctrl9_xl.device_conf = (uint8_t)val;
 800631c:	78fb      	ldrb	r3, [r7, #3]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	b2da      	uxtb	r2, r3
 8006324:	7a3b      	ldrb	r3, [r7, #8]
 8006326:	f362 0341 	bfi	r3, r2, #1, #1
 800632a:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 800632c:	f107 0208 	add.w	r2, r7, #8
 8006330:	2301      	movs	r3, #1
 8006332:	2118      	movs	r1, #24
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7ff fe09 	bl	8005f4c <ism330dhcx_write_reg>
 800633a:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 800633c:	68fb      	ldr	r3, [r7, #12]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b084      	sub	sp, #16
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
 800634e:	460b      	mov	r3, r1
 8006350:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8006352:	f107 0208 	add.w	r2, r7, #8
 8006356:	2301      	movs	r3, #1
 8006358:	2101      	movs	r1, #1
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7ff fdde 	bl	8005f1c <ism330dhcx_read_reg>
 8006360:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10f      	bne.n	8006388 <ism330dhcx_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	f003 0303 	and.w	r3, r3, #3
 800636e:	b2da      	uxtb	r2, r3
 8006370:	7a3b      	ldrb	r3, [r7, #8]
 8006372:	f362 1387 	bfi	r3, r2, #6, #2
 8006376:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8006378:	f107 0208 	add.w	r2, r7, #8
 800637c:	2301      	movs	r3, #1
 800637e:	2101      	movs	r1, #1
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f7ff fde3 	bl	8005f4c <ism330dhcx_write_reg>
 8006386:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8006388:	68fb      	ldr	r3, [r7, #12]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 800639c:	2301      	movs	r3, #1
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	210f      	movs	r1, #15
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f7ff fdba 	bl	8005f1c <ism330dhcx_read_reg>
 80063a8:	60f8      	str	r0, [r7, #12]

  return ret;
 80063aa:	68fb      	ldr	r3, [r7, #12]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	460b      	mov	r3, r1
 80063be:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80063c0:	f107 0208 	add.w	r2, r7, #8
 80063c4:	2301      	movs	r3, #1
 80063c6:	2112      	movs	r1, #18
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff fda7 	bl	8005f1c <ism330dhcx_read_reg>
 80063ce:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10f      	bne.n	80063f6 <ism330dhcx_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 80063d6:	78fb      	ldrb	r3, [r7, #3]
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	7a3b      	ldrb	r3, [r7, #8]
 80063e0:	f362 0300 	bfi	r3, r2, #0, #1
 80063e4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80063e6:	f107 0208 	add.w	r2, r7, #8
 80063ea:	2301      	movs	r3, #1
 80063ec:	2112      	movs	r1, #18
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7ff fdac 	bl	8005f4c <ism330dhcx_write_reg>
 80063f4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80063f6:	68fb      	ldr	r3, [r7, #12]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <ism330dhcx_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800640a:	f107 0208 	add.w	r2, r7, #8
 800640e:	2301      	movs	r3, #1
 8006410:	2112      	movs	r1, #18
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff fd82 	bl	8005f1c <ism330dhcx_read_reg>
 8006418:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);
  *val = ctrl3_c.sw_reset;
 800641a:	7a3b      	ldrb	r3, [r7, #8]
 800641c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006420:	b2db      	uxtb	r3, r3
 8006422:	461a      	mov	r2, r3
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	701a      	strb	r2, [r3, #0]

  return ret;
 8006428:	68fb      	ldr	r3, [r7, #12]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <ism330dhcx_fifo_watermark_set>:
  * @param  val    Change the values of wtm in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b086      	sub	sp, #24
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	460b      	mov	r3, r1
 800643c:	807b      	strh	r3, [r7, #2]
  ism330dhcx_fifo_ctrl1_t fifo_ctrl1;
  ism330dhcx_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 800643e:	f107 020c 	add.w	r2, r7, #12
 8006442:	2301      	movs	r3, #1
 8006444:	2108      	movs	r1, #8
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff fd68 	bl	8005f1c <ism330dhcx_read_reg>
 800644c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d111      	bne.n	8006478 <ism330dhcx_fifo_watermark_set+0x46>
  {
    fifo_ctrl2.wtm = (uint8_t)(val / 256U) & 0x01U;
 8006454:	887b      	ldrh	r3, [r7, #2]
 8006456:	0a1b      	lsrs	r3, r3, #8
 8006458:	b29b      	uxth	r3, r3
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	b2da      	uxtb	r2, r3
 8006460:	7b3b      	ldrb	r3, [r7, #12]
 8006462:	f362 0300 	bfi	r3, r2, #0, #1
 8006466:	733b      	strb	r3, [r7, #12]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 8006468:	f107 020c 	add.w	r2, r7, #12
 800646c:	2301      	movs	r3, #1
 800646e:	2108      	movs	r1, #8
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7ff fd6b 	bl	8005f4c <ism330dhcx_write_reg>
 8006476:	6178      	str	r0, [r7, #20]
                               (uint8_t *)&fifo_ctrl2, 1);
  }

  if (ret == 0)
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10a      	bne.n	8006494 <ism330dhcx_fifo_watermark_set+0x62>
  {
    fifo_ctrl1.wtm = (uint8_t)(val - (fifo_ctrl2.wtm * 256U));
 800647e:	887b      	ldrh	r3, [r7, #2]
 8006480:	b2db      	uxtb	r3, r3
 8006482:	743b      	strb	r3, [r7, #16]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL1,
 8006484:	f107 0210 	add.w	r2, r7, #16
 8006488:	2301      	movs	r3, #1
 800648a:	2107      	movs	r1, #7
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7ff fd5d 	bl	8005f4c <ism330dhcx_write_reg>
 8006492:	6178      	str	r0, [r7, #20]
                               (uint8_t *)&fifo_ctrl1, 1);
  }

  return ret;
 8006494:	697b      	ldr	r3, [r7, #20]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <ism330dhcx_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_bdr_xl_t val)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b084      	sub	sp, #16
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	460b      	mov	r3, r1
 80064a8:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 80064aa:	f107 0208 	add.w	r2, r7, #8
 80064ae:	2301      	movs	r3, #1
 80064b0:	2109      	movs	r1, #9
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7ff fd32 	bl	8005f1c <ism330dhcx_read_reg>
 80064b8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10f      	bne.n	80064e0 <ism330dhcx_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val;
 80064c0:	78fb      	ldrb	r3, [r7, #3]
 80064c2:	f003 030f 	and.w	r3, r3, #15
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	7a3b      	ldrb	r3, [r7, #8]
 80064ca:	f362 0303 	bfi	r3, r2, #0, #4
 80064ce:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 80064d0:	f107 0208 	add.w	r2, r7, #8
 80064d4:	2301      	movs	r3, #1
 80064d6:	2109      	movs	r1, #9
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff fd37 	bl	8005f4c <ism330dhcx_write_reg>
 80064de:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 80064e0:	68fb      	ldr	r3, [r7, #12]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <ism330dhcx_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_bdr_gy_t val)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b084      	sub	sp, #16
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	460b      	mov	r3, r1
 80064f4:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 80064f6:	f107 0208 	add.w	r2, r7, #8
 80064fa:	2301      	movs	r3, #1
 80064fc:	2109      	movs	r1, #9
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7ff fd0c 	bl	8005f1c <ism330dhcx_read_reg>
 8006504:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10f      	bne.n	800652c <ism330dhcx_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val;
 800650c:	78fb      	ldrb	r3, [r7, #3]
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	b2da      	uxtb	r2, r3
 8006514:	7a3b      	ldrb	r3, [r7, #8]
 8006516:	f362 1307 	bfi	r3, r2, #4, #4
 800651a:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 800651c:	f107 0208 	add.w	r2, r7, #8
 8006520:	2301      	movs	r3, #1
 8006522:	2109      	movs	r1, #9
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7ff fd11 	bl	8005f4c <ism330dhcx_write_reg>
 800652a:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 800652c:	68fb      	ldr	r3, [r7, #12]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b084      	sub	sp, #16
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	460b      	mov	r3, r1
 8006540:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8006542:	f107 0208 	add.w	r2, r7, #8
 8006546:	2301      	movs	r3, #1
 8006548:	210a      	movs	r1, #10
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7ff fce6 	bl	8005f1c <ism330dhcx_read_reg>
 8006550:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10f      	bne.n	8006578 <ism330dhcx_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8006558:	78fb      	ldrb	r3, [r7, #3]
 800655a:	f003 0307 	and.w	r3, r3, #7
 800655e:	b2da      	uxtb	r2, r3
 8006560:	7a3b      	ldrb	r3, [r7, #8]
 8006562:	f362 0302 	bfi	r3, r2, #0, #3
 8006566:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8006568:	f107 0208 	add.w	r2, r7, #8
 800656c:	2301      	movs	r3, #1
 800656e:	210a      	movs	r1, #10
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff fceb 	bl	8005f4c <ism330dhcx_write_reg>
 8006576:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 8006578:	68fb      	ldr	r3, [r7, #12]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <ism330dhcx_fifo_data_level_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_data_level_get(stmdev_ctx_t *ctx,
                                       uint16_t *val)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b086      	sub	sp, #24
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	6039      	str	r1, [r7, #0]
  ism330dhcx_fifo_status1_t fifo_status1;
  ism330dhcx_fifo_status2_t fifo_status2;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_STATUS1,
 800658c:	f107 0210 	add.w	r2, r7, #16
 8006590:	2301      	movs	r3, #1
 8006592:	213a      	movs	r1, #58	; 0x3a
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7ff fcc1 	bl	8005f1c <ism330dhcx_read_reg>
 800659a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_status1, 1);

  if (ret == 0)
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d118      	bne.n	80065d4 <ism330dhcx_fifo_data_level_get+0x52>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_STATUS2,
 80065a2:	f107 020c 	add.w	r2, r7, #12
 80065a6:	2301      	movs	r3, #1
 80065a8:	213b      	movs	r1, #59	; 0x3b
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7ff fcb6 	bl	8005f1c <ism330dhcx_read_reg>
 80065b0:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&fifo_status2, 1);
    *val = fifo_status2.diff_fifo;
 80065b2:	7b3b      	ldrb	r3, [r7, #12]
 80065b4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256U) +  fifo_status1.diff_fifo;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	021b      	lsls	r3, r3, #8
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	7c3b      	ldrb	r3, [r7, #16]
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	4413      	add	r3, r2
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 80065d4:	697b      	ldr	r3, [r7, #20]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
	...

080065e0 <ism330dhcx_fifo_sensor_tag_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_sensor_tag_get(stmdev_ctx_t *ctx,
                                       ism330dhcx_fifo_tag_t *val)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  ism330dhcx_fifo_data_out_tag_t fifo_data_out_tag;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_DATA_OUT_TAG,
 80065ea:	f107 0208 	add.w	r2, r7, #8
 80065ee:	2301      	movs	r3, #1
 80065f0:	2178      	movs	r1, #120	; 0x78
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7ff fc92 	bl	8005f1c <ism330dhcx_read_reg>
 80065f8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_data_out_tag, 1);

  switch (fifo_data_out_tag.tag_sensor)
 80065fa:	7a3b      	ldrb	r3, [r7, #8]
 80065fc:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8006600:	b2db      	uxtb	r3, r3
 8006602:	3b01      	subs	r3, #1
 8006604:	2b18      	cmp	r3, #24
 8006606:	f200 808d 	bhi.w	8006724 <ism330dhcx_fifo_sensor_tag_get+0x144>
 800660a:	a201      	add	r2, pc, #4	; (adr r2, 8006610 <ism330dhcx_fifo_sensor_tag_get+0x30>)
 800660c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006610:	08006675 	.word	0x08006675
 8006614:	0800667d 	.word	0x0800667d
 8006618:	08006685 	.word	0x08006685
 800661c:	0800668d 	.word	0x0800668d
 8006620:	08006695 	.word	0x08006695
 8006624:	0800669d 	.word	0x0800669d
 8006628:	080066a5 	.word	0x080066a5
 800662c:	080066ad 	.word	0x080066ad
 8006630:	080066b5 	.word	0x080066b5
 8006634:	080066bd 	.word	0x080066bd
 8006638:	080066c5 	.word	0x080066c5
 800663c:	080066cd 	.word	0x080066cd
 8006640:	080066d5 	.word	0x080066d5
 8006644:	080066dd 	.word	0x080066dd
 8006648:	080066e5 	.word	0x080066e5
 800664c:	080066ed 	.word	0x080066ed
 8006650:	080066f5 	.word	0x080066f5
 8006654:	080066fd 	.word	0x080066fd
 8006658:	08006705 	.word	0x08006705
 800665c:	0800670d 	.word	0x0800670d
 8006660:	08006715 	.word	0x08006715
 8006664:	08006725 	.word	0x08006725
 8006668:	08006725 	.word	0x08006725
 800666c:	08006725 	.word	0x08006725
 8006670:	0800671d 	.word	0x0800671d
  {
    case ISM330DHCX_GYRO_NC_TAG:
      *val = ISM330DHCX_GYRO_NC_TAG;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2201      	movs	r2, #1
 8006678:	701a      	strb	r2, [r3, #0]
      break;
 800667a:	e057      	b.n	800672c <ism330dhcx_fifo_sensor_tag_get+0x14c>

    case ISM330DHCX_XL_NC_TAG:
      *val = ISM330DHCX_XL_NC_TAG;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2202      	movs	r2, #2
 8006680:	701a      	strb	r2, [r3, #0]
      break;
 8006682:	e053      	b.n	800672c <ism330dhcx_fifo_sensor_tag_get+0x14c>

    case ISM330DHCX_TEMPERATURE_TAG:
      *val = ISM330DHCX_TEMPERATURE_TAG;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2203      	movs	r2, #3
 8006688:	701a      	strb	r2, [r3, #0]
      break;
 800668a:	e04f      	b.n	800672c <ism330dhcx_fifo_sensor_tag_get+0x14c>

    case ISM330DHCX_TIMESTAMP_TAG:
      *val = ISM330DHCX_TIMESTAMP_TAG;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2204      	movs	r2, #4
 8006690:	701a      	strb	r2, [r3, #0]
      break;
 8006692:	e04b      	b.n	800672c <ism330dhcx_fifo_sensor_tag_get+0x14c>

    case ISM330DHCX_CFG_CHANGE_TAG:
      *val = ISM330DHCX_CFG_CHANGE_TAG;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2205      	movs	r2, #5
 8006698:	701a      	strb	r2, [r3, #0]
      break;
 800669a:	e047      	b.n	800672c <ism330dhcx_fifo_sensor_tag_get+0x14c>

    case ISM330DHCX_XL_NC_T_2_TAG:
      *val = ISM330DHCX_XL_NC_T_2_TAG;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	2206      	movs	r2, #6
 80066a0:	701a      	strb	r2, [r3, #0]
      break;
 80066a2:	e043      	b.n	800672c <ism330dhcx_fifo_sensor_tag_get+0x14c>

    case ISM330DHCX_XL_NC_T_1_TAG:
      *val = ISM330DHCX_XL_NC_T_1_TAG;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	2207      	movs	r2, #7
 80066a8:	701a      	strb	r2, [r3, #0]
      break;
 80066aa:	e03f      	b.n	800672c <ism330dhcx_fifo_sensor_tag_get+0x14c>

    case ISM330DHCX_XL_2XC_TAG:
      *val = ISM330DHCX_XL_2XC_TAG;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2208      	movs	r2, #8
 80066b0:	701a      	strb	r2, [r3, #0]
      break;
 80066b2:	e03b      	b.n	800672c <ism330dhcx_fifo_sensor_tag_get+0x14c>

    case ISM330DHCX_XL_3XC_TAG:
      *val = ISM330DHCX_XL_3XC_TAG;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2209      	movs	r2, #9
 80066b8:	701a      	strb	r2, [r3, #0]
      break;
 80066ba:	e037      	b.n	800672c <ism330dhcx_fifo_sensor_tag_get+0x14c>

    case ISM330DHCX_GYRO_NC_T_2_TAG:
      *val = ISM330DHCX_GYRO_NC_T_2_TAG;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	220a      	movs	r2, #10
 80066c0:	701a      	strb	r2, [r3, #0]
      break;
 80066c2:	e033      	b.n	800672c <ism330dhcx_fifo_sensor_tag_get+0x14c>

    case ISM330DHCX_GYRO_NC_T_1_TAG:
      *val = ISM330DHCX_GYRO_NC_T_1_TAG;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	220b      	movs	r2, #11
 80066c8:	701a      	strb	r2, [r3, #0]
      break;
 80066ca:	e02f      	b.n	800672c <ism330dhcx_fifo_sensor_tag_get+0x14c>

    case ISM330DHCX_GYRO_2XC_TAG:
      *val = ISM330DHCX_GYRO_2XC_TAG;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	220c      	movs	r2, #12
 80066d0:	701a      	strb	r2, [r3, #0]
      break;
 80066d2:	e02b      	b.n	800672c <ism330dhcx_fifo_sensor_tag_get+0x14c>

    case ISM330DHCX_GYRO_3XC_TAG:
      *val = ISM330DHCX_GYRO_3XC_TAG;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	220d      	movs	r2, #13
 80066d8:	701a      	strb	r2, [r3, #0]
      break;
 80066da:	e027      	b.n	800672c <ism330dhcx_fifo_sensor_tag_get+0x14c>

    case ISM330DHCX_SENSORHUB_SLAVE0_TAG:
      *val = ISM330DHCX_SENSORHUB_SLAVE0_TAG;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	220e      	movs	r2, #14
 80066e0:	701a      	strb	r2, [r3, #0]
      break;
 80066e2:	e023      	b.n	800672c <ism330dhcx_fifo_sensor_tag_get+0x14c>

    case ISM330DHCX_SENSORHUB_SLAVE1_TAG:
      *val = ISM330DHCX_SENSORHUB_SLAVE1_TAG;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	220f      	movs	r2, #15
 80066e8:	701a      	strb	r2, [r3, #0]
      break;
 80066ea:	e01f      	b.n	800672c <ism330dhcx_fifo_sensor_tag_get+0x14c>

    case ISM330DHCX_SENSORHUB_SLAVE2_TAG:
      *val = ISM330DHCX_SENSORHUB_SLAVE2_TAG;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	2210      	movs	r2, #16
 80066f0:	701a      	strb	r2, [r3, #0]
      break;
 80066f2:	e01b      	b.n	800672c <ism330dhcx_fifo_sensor_tag_get+0x14c>

    case ISM330DHCX_SENSORHUB_SLAVE3_TAG:
      *val = ISM330DHCX_SENSORHUB_SLAVE3_TAG;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	2211      	movs	r2, #17
 80066f8:	701a      	strb	r2, [r3, #0]
      break;
 80066fa:	e017      	b.n	800672c <ism330dhcx_fifo_sensor_tag_get+0x14c>

    case ISM330DHCX_STEP_CPUNTER_TAG:
      *val = ISM330DHCX_STEP_CPUNTER_TAG;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	2212      	movs	r2, #18
 8006700:	701a      	strb	r2, [r3, #0]
      break;
 8006702:	e013      	b.n	800672c <ism330dhcx_fifo_sensor_tag_get+0x14c>

    case ISM330DHCX_GAME_ROTATION_TAG:
      *val = ISM330DHCX_GAME_ROTATION_TAG;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2213      	movs	r2, #19
 8006708:	701a      	strb	r2, [r3, #0]
      break;
 800670a:	e00f      	b.n	800672c <ism330dhcx_fifo_sensor_tag_get+0x14c>

    case ISM330DHCX_GEOMAG_ROTATION_TAG:
      *val = ISM330DHCX_GEOMAG_ROTATION_TAG;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	2214      	movs	r2, #20
 8006710:	701a      	strb	r2, [r3, #0]
      break;
 8006712:	e00b      	b.n	800672c <ism330dhcx_fifo_sensor_tag_get+0x14c>

    case ISM330DHCX_ROTATION_TAG:
      *val = ISM330DHCX_ROTATION_TAG;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	2215      	movs	r2, #21
 8006718:	701a      	strb	r2, [r3, #0]
      break;
 800671a:	e007      	b.n	800672c <ism330dhcx_fifo_sensor_tag_get+0x14c>

    case ISM330DHCX_SENSORHUB_NACK_TAG:
      *val = ISM330DHCX_SENSORHUB_NACK_TAG;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2219      	movs	r2, #25
 8006720:	701a      	strb	r2, [r3, #0]
      break;
 8006722:	e003      	b.n	800672c <ism330dhcx_fifo_sensor_tag_get+0x14c>

    default:
      *val = ISM330DHCX_SENSORHUB_NACK_TAG;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2219      	movs	r2, #25
 8006728:	701a      	strb	r2, [r3, #0]
      break;
 800672a:	bf00      	nop
  }

  return ret;
 800672c:	68fb      	ldr	r3, [r7, #12]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop

08006738 <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8006742:	2102      	movs	r1, #2
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7ff fdfe 	bl	8006346 <ism330dhcx_mem_bank_set>
 800674a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d106      	bne.n	8006760 <ism330dhcx_fsm_enable_get+0x28>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 8006752:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 8006754:	2301      	movs	r3, #1
 8006756:	2146      	movs	r1, #70	; 0x46
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7ff fbdf 	bl	8005f1c <ism330dhcx_read_reg>
 800675e:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d107      	bne.n	8006776 <ism330dhcx_fsm_enable_get+0x3e>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 800676a:	2301      	movs	r3, #1
 800676c:	2147      	movs	r1, #71	; 0x47
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7ff fbd4 	bl	8005f1c <ism330dhcx_read_reg>
 8006774:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d104      	bne.n	8006786 <ism330dhcx_fsm_enable_get+0x4e>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800677c:	2100      	movs	r1, #0
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7ff fde1 	bl	8006346 <ism330dhcx_mem_bank_set>
 8006784:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006786:	68fb      	ldr	r3, [r7, #12]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800679a:	2102      	movs	r1, #2
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f7ff fdd2 	bl	8006346 <ism330dhcx_mem_bank_set>
 80067a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d107      	bne.n	80067ba <ism330dhcx_fsm_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 80067aa:	f107 0208 	add.w	r2, r7, #8
 80067ae:	2301      	movs	r3, #1
 80067b0:	215f      	movs	r1, #95	; 0x5f
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7ff fbb2 	bl	8005f1c <ism330dhcx_read_reg>
 80067b8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d104      	bne.n	80067ca <ism330dhcx_fsm_data_rate_get+0x3a>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80067c0:	2100      	movs	r1, #0
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7ff fdbf 	bl	8006346 <ism330dhcx_mem_bank_set>
 80067c8:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 80067ca:	7a3b      	ldrb	r3, [r7, #8]
 80067cc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	d81a      	bhi.n	800680c <ism330dhcx_fsm_data_rate_get+0x7c>
 80067d6:	a201      	add	r2, pc, #4	; (adr r2, 80067dc <ism330dhcx_fsm_data_rate_get+0x4c>)
 80067d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067dc:	080067ed 	.word	0x080067ed
 80067e0:	080067f5 	.word	0x080067f5
 80067e4:	080067fd 	.word	0x080067fd
 80067e8:	08006805 	.word	0x08006805
  {
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2200      	movs	r2, #0
 80067f0:	701a      	strb	r2, [r3, #0]
      break;
 80067f2:	e00f      	b.n	8006814 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	2201      	movs	r2, #1
 80067f8:	701a      	strb	r2, [r3, #0]
      break;
 80067fa:	e00b      	b.n	8006814 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	2202      	movs	r2, #2
 8006800:	701a      	strb	r2, [r3, #0]
      break;
 8006802:	e007      	b.n	8006814 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2203      	movs	r2, #3
 8006808:	701a      	strb	r2, [r3, #0]
      break;
 800680a:	e003      	b.n	8006814 <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2200      	movs	r2, #0
 8006810:	701a      	strb	r2, [r3, #0]
      break;
 8006812:	bf00      	nop
  }

  return ret;
 8006814:	68fb      	ldr	r3, [r7, #12]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop

08006820 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800682a:	2102      	movs	r1, #2
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7ff fd8a 	bl	8006346 <ism330dhcx_mem_bank_set>
 8006832:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d107      	bne.n	800684a <ism330dhcx_mlc_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 800683a:	f107 0208 	add.w	r2, r7, #8
 800683e:	2301      	movs	r3, #1
 8006840:	2105      	movs	r1, #5
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7ff fb6a 	bl	8005f1c <ism330dhcx_read_reg>
 8006848:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10b      	bne.n	8006868 <ism330dhcx_mlc_get+0x48>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8006850:	2100      	movs	r1, #0
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7ff fd77 	bl	8006346 <ism330dhcx_mem_bank_set>
 8006858:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 800685a:	7a3b      	ldrb	r3, [r7, #8]
 800685c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006860:	b2db      	uxtb	r3, r3
 8006862:	461a      	mov	r2, r3
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8006868:	68fb      	ldr	r3, [r7, #12]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
	...

08006874 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800687e:	2102      	movs	r1, #2
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7ff fd60 	bl	8006346 <ism330dhcx_mem_bank_set>
 8006886:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d107      	bne.n	800689e <ism330dhcx_mlc_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 800688e:	f107 0208 	add.w	r2, r7, #8
 8006892:	2301      	movs	r3, #1
 8006894:	2160      	movs	r1, #96	; 0x60
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7ff fb40 	bl	8005f1c <ism330dhcx_read_reg>
 800689c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d12a      	bne.n	80068fa <ism330dhcx_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 80068a4:	7a3b      	ldrb	r3, [r7, #8]
 80068a6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	d81b      	bhi.n	80068e8 <ism330dhcx_mlc_data_rate_get+0x74>
 80068b0:	a201      	add	r2, pc, #4	; (adr r2, 80068b8 <ism330dhcx_mlc_data_rate_get+0x44>)
 80068b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b6:	bf00      	nop
 80068b8:	080068c9 	.word	0x080068c9
 80068bc:	080068d1 	.word	0x080068d1
 80068c0:	080068d9 	.word	0x080068d9
 80068c4:	080068e1 	.word	0x080068e1
    {
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2200      	movs	r2, #0
 80068cc:	701a      	strb	r2, [r3, #0]
        break;
 80068ce:	e00f      	b.n	80068f0 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	2201      	movs	r2, #1
 80068d4:	701a      	strb	r2, [r3, #0]
        break;
 80068d6:	e00b      	b.n	80068f0 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	2202      	movs	r2, #2
 80068dc:	701a      	strb	r2, [r3, #0]
        break;
 80068de:	e007      	b.n	80068f0 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	2203      	movs	r2, #3
 80068e4:	701a      	strb	r2, [r3, #0]
        break;
 80068e6:	e003      	b.n	80068f0 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	2200      	movs	r2, #0
 80068ec:	701a      	strb	r2, [r3, #0]
        break;
 80068ee:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80068f0:	2100      	movs	r1, #0
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7ff fd27 	bl	8006346 <ism330dhcx_mem_bank_set>
 80068f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80068fa:	68fb      	ldr	r3, [r7, #12]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <funchad53.constprop.0>:
 8006904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006908:	ed2d 8b06 	vpush	{d8-d10}
 800690c:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006bbc <funchad53.constprop.0+0x2b8>
 8006910:	4fa4      	ldr	r7, [pc, #656]	; (8006ba4 <funchad53.constprop.0+0x2a0>)
 8006912:	eddf 9aa5 	vldr	s19, [pc, #660]	; 8006ba8 <funchad53.constprop.0+0x2a4>
 8006916:	b089      	sub	sp, #36	; 0x24
 8006918:	4603      	mov	r3, r0
 800691a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800691e:	2100      	movs	r1, #0
 8006920:	fa5f f58b 	uxtb.w	r5, fp
 8006924:	48a1      	ldr	r0, [pc, #644]	; (8006bac <funchad53.constprop.0+0x2a8>)
 8006926:	9305      	str	r3, [sp, #20]
 8006928:	9503      	str	r5, [sp, #12]
 800692a:	f002 fc49 	bl	80091c0 <memset>
 800692e:	49a0      	ldr	r1, [pc, #640]	; (8006bb0 <funchad53.constprop.0+0x2ac>)
 8006930:	4ba0      	ldr	r3, [pc, #640]	; (8006bb4 <funchad53.constprop.0+0x2b0>)
 8006932:	4aa1      	ldr	r2, [pc, #644]	; (8006bb8 <funchad53.constprop.0+0x2b4>)
 8006934:	880c      	ldrh	r4, [r1, #0]
 8006936:	eb05 2185 	add.w	r1, r5, r5, lsl #10
 800693a:	ea02 1241 	and.w	r2, r2, r1, lsl #5
 800693e:	ea03 0341 	and.w	r3, r3, r1, lsl #1
 8006942:	4313      	orrs	r3, r2
 8006944:	eb03 2203 	add.w	r2, r3, r3, lsl #8
 8006948:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800694c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006950:	9304      	str	r3, [sp, #16]
 8006952:	2300      	movs	r3, #0
 8006954:	9301      	str	r3, [sp, #4]
 8006956:	2c00      	cmp	r4, #0
 8006958:	f000 83c0 	beq.w	80070dc <funchad53.constprop.0+0x7d8>
 800695c:	4b94      	ldr	r3, [pc, #592]	; (8006bb0 <funchad53.constprop.0+0x2ac>)
 800695e:	9801      	ldr	r0, [sp, #4]
 8006960:	889b      	ldrh	r3, [r3, #4]
 8006962:	4a90      	ldr	r2, [pc, #576]	; (8006ba4 <funchad53.constprop.0+0x2a0>)
 8006964:	9e05      	ldr	r6, [sp, #20]
 8006966:	4995      	ldr	r1, [pc, #596]	; (8006bbc <funchad53.constprop.0+0x2b8>)
 8006968:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800696c:	f104 38ff 	add.w	r8, r4, #4294967295
 8006970:	4403      	add	r3, r0
 8006972:	fa1f f588 	uxth.w	r5, r8
 8006976:	1d10      	adds	r0, r2, #4
 8006978:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800697c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8006980:	f853 5b0c 	ldr.w	r5, [r3], #12
 8006984:	f842 5b04 	str.w	r5, [r2], #4
 8006988:	4290      	cmp	r0, r2
 800698a:	ece1 9a01 	vstmia	r1!, {s19}
 800698e:	d1f7      	bne.n	8006980 <funchad53.constprop.0+0x7c>
 8006990:	4620      	mov	r0, r4
 8006992:	f7f9 fddf 	bl	8000554 <__aeabi_i2d>
 8006996:	ee07 4a90 	vmov	s15, r4
 800699a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800699e:	0866      	lsrs	r6, r4, #1
 80069a0:	9b03      	ldr	r3, [sp, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 8398 	beq.w	80070d8 <funchad53.constprop.0+0x7d4>
 80069a8:	2500      	movs	r5, #0
 80069aa:	1e5a      	subs	r2, r3, #1
 80069ac:	4013      	ands	r3, r2
 80069ae:	46ae      	mov	lr, r5
 80069b0:	f105 0501 	add.w	r5, r5, #1
 80069b4:	d1f9      	bne.n	80069aa <funchad53.constprop.0+0xa6>
 80069b6:	9a04      	ldr	r2, [sp, #16]
 80069b8:	2a00      	cmp	r2, #0
 80069ba:	f000 83a7 	beq.w	800710c <funchad53.constprop.0+0x808>
 80069be:	f102 3cff 	add.w	ip, r2, #4294967295
 80069c2:	ea12 020c 	ands.w	r2, r2, ip
 80069c6:	461d      	mov	r5, r3
 80069c8:	f103 0301 	add.w	r3, r3, #1
 80069cc:	d1f7      	bne.n	80069be <funchad53.constprop.0+0xba>
 80069ce:	eba5 050e 	sub.w	r5, r5, lr
 80069d2:	fab5 f585 	clz	r5, r5
 80069d6:	096d      	lsrs	r5, r5, #5
 80069d8:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80069dc:	eba3 0305 	sub.w	r3, r3, r5
 80069e0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80069e4:	eba3 0305 	sub.w	r3, r3, r5
 80069e8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80069ec:	442b      	add	r3, r5
 80069ee:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 80069f2:	442b      	add	r3, r5
 80069f4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80069f8:	eba3 0305 	sub.w	r3, r3, r5
 80069fc:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8006a00:	ea6f 0303 	mvn.w	r3, r3
 8006a04:	ba1b      	rev	r3, r3
 8006a06:	891b      	ldrh	r3, [r3, #8]
 8006a08:	f8db 2000 	ldr.w	r2, [fp]
 8006a0c:	edd7 7a00 	vldr	s15, [r7]
 8006a10:	111d      	asrs	r5, r3, #4
 8006a12:	ebc5 7c85 	rsb	ip, r5, r5, lsl #30
 8006a16:	f003 030f 	and.w	r3, r3, #15
 8006a1a:	ebc5 0c8c 	rsb	ip, r5, ip, lsl #2
 8006a1e:	fb05 c505 	mla	r5, r5, r5, ip
 8006a22:	ebc3 7c83 	rsb	ip, r3, r3, lsl #30
 8006a26:	ebc3 0c8c 	rsb	ip, r3, ip, lsl #2
 8006a2a:	fb03 c303 	mla	r3, r3, r3, ip
 8006a2e:	442b      	add	r3, r5
 8006a30:	3b32      	subs	r3, #50	; 0x32
 8006a32:	4413      	add	r3, r2
 8006a34:	2c01      	cmp	r4, #1
 8006a36:	f8cb 3000 	str.w	r3, [fp]
 8006a3a:	f240 8349 	bls.w	80070d0 <funchad53.constprop.0+0x7cc>
 8006a3e:	4b60      	ldr	r3, [pc, #384]	; (8006bc0 <funchad53.constprop.0+0x2bc>)
 8006a40:	eb07 0284 	add.w	r2, r7, r4, lsl #2
 8006a44:	ecb3 7a01 	vldmia	r3!, {s14}
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a4e:	d1f9      	bne.n	8006a44 <funchad53.constprop.0+0x140>
 8006a50:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006a54:	4a53      	ldr	r2, [pc, #332]	; (8006ba4 <funchad53.constprop.0+0x2a0>)
 8006a56:	2300      	movs	r3, #0
 8006a58:	3301      	adds	r3, #1
 8006a5a:	42a3      	cmp	r3, r4
 8006a5c:	edd2 7a00 	vldr	s15, [r2]
 8006a60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a64:	ece2 7a01 	vstmia	r2!, {s15}
 8006a68:	d3f6      	bcc.n	8006a58 <funchad53.constprop.0+0x154>
 8006a6a:	07e2      	lsls	r2, r4, #31
 8006a6c:	f100 831f 	bmi.w	80070ae <funchad53.constprop.0+0x7aa>
 8006a70:	2500      	movs	r5, #0
 8006a72:	3501      	adds	r5, #1
 8006a74:	b2ad      	uxth	r5, r5
 8006a76:	fa44 f305 	asr.w	r3, r4, r5
 8006a7a:	07db      	lsls	r3, r3, #31
 8006a7c:	d5f9      	bpl.n	8006a72 <funchad53.constprop.0+0x16e>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	2000      	movs	r0, #0
 8006a84:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006a88:	f7f9 fef8 	bl	800087c <__aeabi_ddiv>
 8006a8c:	f7fa f8c4 	bl	8000c18 <__aeabi_d2f>
 8006a90:	2c01      	cmp	r4, #1
 8006a92:	ee09 0a10 	vmov	s18, r0
 8006a96:	dd1f      	ble.n	8006ad8 <funchad53.constprop.0+0x1d4>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	42b3      	cmp	r3, r6
 8006a9e:	4632      	mov	r2, r6
 8006aa0:	d305      	bcc.n	8006aae <funchad53.constprop.0+0x1aa>
 8006aa2:	1a9b      	subs	r3, r3, r2
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	f3c2 024f 	ubfx	r2, r2, #1, #16
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d2f9      	bcs.n	8006aa2 <funchad53.constprop.0+0x19e>
 8006aae:	3101      	adds	r1, #1
 8006ab0:	b289      	uxth	r1, r1
 8006ab2:	4413      	add	r3, r2
 8006ab4:	4541      	cmp	r1, r8
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	da0e      	bge.n	8006ad8 <funchad53.constprop.0+0x1d4>
 8006aba:	428b      	cmp	r3, r1
 8006abc:	d9ee      	bls.n	8006a9c <funchad53.constprop.0+0x198>
 8006abe:	eb07 0281 	add.w	r2, r7, r1, lsl #2
 8006ac2:	eb07 0083 	add.w	r0, r7, r3, lsl #2
 8006ac6:	f8d2 c000 	ldr.w	ip, [r2]
 8006aca:	f8d0 e000 	ldr.w	lr, [r0]
 8006ace:	f8c2 e000 	str.w	lr, [r2]
 8006ad2:	f8c0 c000 	str.w	ip, [r0]
 8006ad6:	e7e1      	b.n	8006a9c <funchad53.constprop.0+0x198>
 8006ad8:	2d00      	cmp	r5, #0
 8006ada:	f000 8095 	beq.w	8006c08 <funchad53.constprop.0+0x304>
 8006ade:	9602      	str	r6, [sp, #8]
 8006ae0:	eef0 8a69 	vmov.f32	s17, s19
 8006ae4:	f04f 0900 	mov.w	r9, #0
 8006ae8:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
 8006aec:	f04f 0801 	mov.w	r8, #1
 8006af0:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8006af4:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8006af8:	462e      	mov	r6, r5
 8006afa:	4641      	mov	r1, r8
 8006afc:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8006b00:	fa1f f888 	uxth.w	r8, r8
 8006b04:	2900      	cmp	r1, #0
 8006b06:	d05d      	beq.n	8006bc4 <funchad53.constprop.0+0x2c0>
 8006b08:	2c00      	cmp	r4, #0
 8006b0a:	d05b      	beq.n	8006bc4 <funchad53.constprop.0+0x2c0>
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	42a1      	cmp	r1, r4
 8006b10:	468a      	mov	sl, r1
 8006b12:	4603      	mov	r3, r0
 8006b14:	bf28      	it	cs
 8006b16:	46a2      	movcs	sl, r4
 8006b18:	eef0 7a69 	vmov.f32	s15, s19
 8006b1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b20:	18ca      	adds	r2, r1, r3
 8006b22:	b292      	uxth	r2, r2
 8006b24:	eb07 0c82 	add.w	ip, r7, r2, lsl #2
 8006b28:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8006b2c:	eddc 5a00 	vldr	s11, [ip]
 8006b30:	ed92 5a00 	vldr	s10, [r2]
 8006b34:	ee65 6aa7 	vmul.f32	s13, s11, s15
 8006b38:	ee27 6ac5 	vnmul.f32	s12, s15, s10
 8006b3c:	eee5 6a07 	vfma.f32	s13, s10, s14
 8006b40:	eb07 0e83 	add.w	lr, r7, r3, lsl #2
 8006b44:	eb0b 0583 	add.w	r5, fp, r3, lsl #2
 8006b48:	eea5 6a87 	vfma.f32	s12, s11, s14
 8006b4c:	4443      	add	r3, r8
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	ed9e 5a00 	vldr	s10, [lr]
 8006b54:	edd5 5a00 	vldr	s11, [r5]
 8006b58:	ee35 5a46 	vsub.f32	s10, s10, s12
 8006b5c:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8006b60:	ed8c 5a00 	vstr	s10, [ip]
 8006b64:	edc2 5a00 	vstr	s11, [r2]
 8006b68:	ed9e 5a00 	vldr	s10, [lr]
 8006b6c:	edd5 5a00 	vldr	s11, [r5]
 8006b70:	ee35 6a06 	vadd.f32	s12, s10, s12
 8006b74:	ee75 6aa6 	vadd.f32	s13, s11, s13
 8006b78:	42a3      	cmp	r3, r4
 8006b7a:	ed8e 6a00 	vstr	s12, [lr]
 8006b7e:	edc5 6a00 	vstr	s13, [r5]
 8006b82:	d3cd      	bcc.n	8006b20 <funchad53.constprop.0+0x21c>
 8006b84:	3001      	adds	r0, #1
 8006b86:	ee67 6ae8 	vnmul.f32	s13, s15, s17
 8006b8a:	b283      	uxth	r3, r0
 8006b8c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8006b90:	4553      	cmp	r3, sl
 8006b92:	eee7 6a08 	vfma.f32	s13, s14, s16
 8006b96:	eee8 7a87 	vfma.f32	s15, s17, s14
 8006b9a:	d213      	bcs.n	8006bc4 <funchad53.constprop.0+0x2c0>
 8006b9c:	eeb0 7a66 	vmov.f32	s14, s13
 8006ba0:	e7be      	b.n	8006b20 <funchad53.constprop.0+0x21c>
 8006ba2:	bf00      	nop
 8006ba4:	200010f0 	.word	0x200010f0
 8006ba8:	00000000 	.word	0x00000000
 8006bac:	200018f0 	.word	0x200018f0
 8006bb0:	200001ec 	.word	0x200001ec
 8006bb4:	00022110 	.word	0x00022110
 8006bb8:	00088440 	.word	0x00088440
 8006bbc:	200014f0 	.word	0x200014f0
 8006bc0:	200010f4 	.word	0x200010f4
 8006bc4:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 8006bc8:	ee20 0a0a 	vmul.f32	s0, s0, s20
 8006bcc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bd4:	eef1 8ac0 	vsqrt.f32	s17, s0
 8006bd8:	f100 828f 	bmi.w	80070fa <funchad53.constprop.0+0x7f6>
 8006bdc:	ee38 0a2a 	vadd.f32	s0, s16, s21
 8006be0:	eef1 8a68 	vneg.f32	s17, s17
 8006be4:	ee20 0a0a 	vmul.f32	s0, s0, s20
 8006be8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006bf4:	f100 8284 	bmi.w	8007100 <funchad53.constprop.0+0x7fc>
 8006bf8:	f109 0901 	add.w	r9, r9, #1
 8006bfc:	fa1f f389 	uxth.w	r3, r9
 8006c00:	429e      	cmp	r6, r3
 8006c02:	f63f af7a 	bhi.w	8006afa <funchad53.constprop.0+0x1f6>
 8006c06:	9e02      	ldr	r6, [sp, #8]
 8006c08:	2c00      	cmp	r4, #0
 8006c0a:	f000 8246 	beq.w	800709a <funchad53.constprop.0+0x796>
 8006c0e:	4d99      	ldr	r5, [pc, #612]	; (8006e74 <funchad53.constprop.0+0x570>)
 8006c10:	4999      	ldr	r1, [pc, #612]	; (8006e78 <funchad53.constprop.0+0x574>)
 8006c12:	46ab      	mov	fp, r5
 8006c14:	462a      	mov	r2, r5
 8006c16:	2300      	movs	r3, #0
 8006c18:	ed91 7a00 	vldr	s14, [r1]
 8006c1c:	edd2 7a00 	vldr	s15, [r2]
 8006c20:	3301      	adds	r3, #1
 8006c22:	ee29 7a07 	vmul.f32	s14, s18, s14
 8006c26:	ee69 7a27 	vmul.f32	s15, s18, s15
 8006c2a:	b298      	uxth	r0, r3
 8006c2c:	4284      	cmp	r4, r0
 8006c2e:	eca1 7a01 	vstmia	r1!, {s14}
 8006c32:	ece2 7a01 	vstmia	r2!, {s15}
 8006c36:	d8ef      	bhi.n	8006c18 <funchad53.constprop.0+0x314>
 8006c38:	2e00      	cmp	r6, #0
 8006c3a:	d040      	beq.n	8006cbe <funchad53.constprop.0+0x3ba>
 8006c3c:	4a8f      	ldr	r2, [pc, #572]	; (8006e7c <funchad53.constprop.0+0x578>)
 8006c3e:	4b8d      	ldr	r3, [pc, #564]	; (8006e74 <funchad53.constprop.0+0x570>)
 8006c40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c44:	edd3 7a01 	vldr	s15, [r3, #4]
 8006c48:	ecb2 7a01 	vldmia	r2!, {s14}
 8006c4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006c50:	eee7 7a07 	vfma.f32	s15, s14, s14
 8006c54:	ece3 7a01 	vstmia	r3!, {s15}
 8006c58:	4598      	cmp	r8, r3
 8006c5a:	d1f3      	bne.n	8006c44 <funchad53.constprop.0+0x340>
 8006c5c:	ecb5 0a01 	vldmia	r5!, {s0}
 8006c60:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c68:	da0a      	bge.n	8006c80 <funchad53.constprop.0+0x37c>
 8006c6a:	45a8      	cmp	r8, r5
 8006c6c:	ed45 9a01 	vstr	s19, [r5, #-4]
 8006c70:	d012      	beq.n	8006c98 <funchad53.constprop.0+0x394>
 8006c72:	ecb5 0a01 	vldmia	r5!, {s0}
 8006c76:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c7e:	dbf4      	blt.n	8006c6a <funchad53.constprop.0+0x366>
 8006c80:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c88:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006c8c:	f100 823b 	bmi.w	8007106 <funchad53.constprop.0+0x802>
 8006c90:	45a8      	cmp	r8, r5
 8006c92:	ed05 8a01 	vstr	s16, [r5, #-4]
 8006c96:	d1ec      	bne.n	8006c72 <funchad53.constprop.0+0x36e>
 8006c98:	4b79      	ldr	r3, [pc, #484]	; (8006e80 <funchad53.constprop.0+0x57c>)
 8006c9a:	4a7a      	ldr	r2, [pc, #488]	; (8006e84 <funchad53.constprop.0+0x580>)
 8006c9c:	891b      	ldrh	r3, [r3, #8]
 8006c9e:	4975      	ldr	r1, [pc, #468]	; (8006e74 <funchad53.constprop.0+0x570>)
 8006ca0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	edd3 7a00 	vldr	s15, [r3]
 8006caa:	ecb1 7a01 	vldmia	r1!, {s14}
 8006cae:	3201      	adds	r2, #1
 8006cb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006cb4:	b290      	uxth	r0, r2
 8006cb6:	4286      	cmp	r6, r0
 8006cb8:	ece3 7a01 	vstmia	r3!, {s15}
 8006cbc:	d8f3      	bhi.n	8006ca6 <funchad53.constprop.0+0x3a2>
 8006cbe:	9b01      	ldr	r3, [sp, #4]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	9301      	str	r3, [sp, #4]
 8006cc6:	f47f ae46 	bne.w	8006956 <funchad53.constprop.0+0x52>
 8006cca:	4b6d      	ldr	r3, [pc, #436]	; (8006e80 <funchad53.constprop.0+0x57c>)
 8006ccc:	895b      	ldrh	r3, [r3, #10]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 820e 	beq.w	80070f0 <funchad53.constprop.0+0x7ec>
 8006cd4:	496b      	ldr	r1, [pc, #428]	; (8006e84 <funchad53.constprop.0+0x580>)
 8006cd6:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8006e88 <funchad53.constprop.0+0x584>
 8006cda:	2200      	movs	r2, #0
 8006cdc:	ecf1 7a01 	vldmia	r1!, {s15}
 8006ce0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ce8:	da07      	bge.n	8006cfa <funchad53.constprop.0+0x3f6>
 8006cea:	ee07 2a90 	vmov	s15, r2
 8006cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cf6:	ed41 7a01 	vstr	s15, [r1, #-4]
 8006cfa:	3201      	adds	r2, #1
 8006cfc:	b290      	uxth	r0, r2
 8006cfe:	4283      	cmp	r3, r0
 8006d00:	d8ec      	bhi.n	8006cdc <funchad53.constprop.0+0x3d8>
 8006d02:	ba1a      	rev	r2, r3
 8006d04:	2400      	movs	r4, #0
 8006d06:	1e59      	subs	r1, r3, #1
 8006d08:	400b      	ands	r3, r1
 8006d0a:	f104 0401 	add.w	r4, r4, #1
 8006d0e:	d1fa      	bne.n	8006d06 <funchad53.constprop.0+0x402>
 8006d10:	2a00      	cmp	r2, #0
 8006d12:	f000 81eb 	beq.w	80070ec <funchad53.constprop.0+0x7e8>
 8006d16:	2000      	movs	r0, #0
 8006d18:	1e53      	subs	r3, r2, #1
 8006d1a:	401a      	ands	r2, r3
 8006d1c:	f100 0001 	add.w	r0, r0, #1
 8006d20:	d1fa      	bne.n	8006d18 <funchad53.constprop.0+0x414>
 8006d22:	1b00      	subs	r0, r0, r4
 8006d24:	fab0 f080 	clz	r0, r0
 8006d28:	0940      	lsrs	r0, r0, #5
 8006d2a:	ea4f 1300 	mov.w	r3, r0, lsl #4
 8006d2e:	eba3 0300 	sub.w	r3, r3, r0
 8006d32:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8006d36:	eba3 0300 	sub.w	r3, r3, r0
 8006d3a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8006d3e:	4403      	add	r3, r0
 8006d40:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 8006d44:	4403      	add	r3, r0
 8006d46:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006d4a:	eba3 0300 	sub.w	r3, r3, r0
 8006d4e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8006d52:	ea6f 0303 	mvn.w	r3, r3
 8006d56:	ba1b      	rev	r3, r3
 8006d58:	89d9      	ldrh	r1, [r3, #14]
 8006d5a:	4a4c      	ldr	r2, [pc, #304]	; (8006e8c <funchad53.constprop.0+0x588>)
 8006d5c:	4b4c      	ldr	r3, [pc, #304]	; (8006e90 <funchad53.constprop.0+0x58c>)
 8006d5e:	4d48      	ldr	r5, [pc, #288]	; (8006e80 <funchad53.constprop.0+0x57c>)
 8006d60:	eb01 2481 	add.w	r4, r1, r1, lsl #10
 8006d64:	ea03 1344 	and.w	r3, r3, r4, lsl #5
 8006d68:	ea02 0244 	and.w	r2, r2, r4, lsl #1
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	f8d5 000a 	ldr.w	r0, [r5, #10]
 8006d72:	eb02 2302 	add.w	r3, r2, r2, lsl #8
 8006d76:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 8006d7a:	eba1 4313 	sub.w	r3, r1, r3, lsr #16
 8006d7e:	2900      	cmp	r1, #0
 8006d80:	bf14      	ite	ne
 8006d82:	4601      	movne	r1, r0
 8006d84:	1c41      	addeq	r1, r0, #1
 8006d86:	fa51 f383 	uxtab	r3, r1, r3
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	2a12      	cmp	r2, #18
 8006d8e:	f8c5 300a 	str.w	r3, [r5, #10]
 8006d92:	f240 8083 	bls.w	8006e9c <funchad53.constprop.0+0x598>
 8006d96:	ee07 2a90 	vmov	s15, r2
 8006d9a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8006e84 <funchad53.constprop.0+0x580>
 8006d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da2:	edd8 aa00 	vldr	s21, [r8]
 8006da6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006daa:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8006dae:	4213      	tst	r3, r2
 8006db0:	ee87 aa87 	vdiv.f32	s20, s15, s14
 8006db4:	b299      	uxth	r1, r3
 8006db6:	eeb0 8a6a 	vmov.f32	s16, s21
 8006dba:	d00f      	beq.n	8006ddc <funchad53.constprop.0+0x4d8>
 8006dbc:	f108 0204 	add.w	r2, r8, #4
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	ecf2 7a01 	vldmia	r2!, {s15}
 8006dc6:	eeb4 8a67 	vcmp.f32	s16, s15
 8006dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dce:	f103 0301 	add.w	r3, r3, #1
 8006dd2:	bfc8      	it	gt
 8006dd4:	eeb0 8a67 	vmovgt.f32	s16, s15
 8006dd8:	4299      	cmp	r1, r3
 8006dda:	d8f2      	bhi.n	8006dc2 <funchad53.constprop.0+0x4be>
 8006ddc:	4d2d      	ldr	r5, [pc, #180]	; (8006e94 <funchad53.constprop.0+0x590>)
 8006dde:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8006e98 <funchad53.constprop.0+0x594>
 8006de2:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8006de6:	ee38 9a49 	vsub.f32	s18, s16, s18
 8006dea:	462f      	mov	r7, r5
 8006dec:	2601      	movs	r6, #1
 8006dee:	2400      	movs	r4, #0
 8006df0:	eefe 9a00 	vmov.f32	s19, #224	; 0xbf000000 -0.5
 8006df4:	ee07 6a10 	vmov	s14, r6
 8006df8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006dfc:	eef0 8a69 	vmov.f32	s17, s19
 8006e00:	eee7 8a0a 	vfma.f32	s17, s14, s20
 8006e04:	eca7 9a01 	vstmia	r7!, {s18}
 8006e08:	eef4 8ae7 	vcmpe.f32	s17, s15
 8006e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e10:	eeb0 0a49 	vmov.f32	s0, s18
 8006e14:	db12      	blt.n	8006e3c <funchad53.constprop.0+0x538>
 8006e16:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8006e1a:	3401      	adds	r4, #1
 8006e1c:	edd3 0a00 	vldr	s1, [r3]
 8006e20:	b2a4      	uxth	r4, r4
 8006e22:	f006 fea3 	bl	800db6c <fmaxf>
 8006e26:	ee07 4a90 	vmov	s15, r4
 8006e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8006e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e36:	daee      	bge.n	8006e16 <funchad53.constprop.0+0x512>
 8006e38:	ed07 0a01 	vstr	s0, [r7, #-4]
 8006e3c:	ed95 7a00 	vldr	s14, [r5]
 8006e40:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8006e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e48:	bf44      	itt	mi
 8006e4a:	edc5 aa00 	vstrmi	s21, [r5]
 8006e4e:	ed17 0a01 	vldrmi	s0, [r7, #-4]
 8006e52:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8006e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e5a:	d506      	bpl.n	8006e6a <funchad53.constprop.0+0x566>
 8006e5c:	b2b3      	uxth	r3, r6
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d005      	beq.n	8006e6e <funchad53.constprop.0+0x56a>
 8006e62:	f857 3c08 	ldr.w	r3, [r7, #-8]
 8006e66:	f847 3c04 	str.w	r3, [r7, #-4]
 8006e6a:	2e12      	cmp	r6, #18
 8006e6c:	d022      	beq.n	8006eb4 <funchad53.constprop.0+0x5b0>
 8006e6e:	3601      	adds	r6, #1
 8006e70:	e7c0      	b.n	8006df4 <funchad53.constprop.0+0x4f0>
 8006e72:	bf00      	nop
 8006e74:	200014f0 	.word	0x200014f0
 8006e78:	200010f0 	.word	0x200010f0
 8006e7c:	200010f4 	.word	0x200010f4
 8006e80:	200001ec 	.word	0x200001ec
 8006e84:	200018f0 	.word	0x200018f0
 8006e88:	3b03126f 	.word	0x3b03126f
 8006e8c:	00022110 	.word	0x00022110
 8006e90:	00088440 	.word	0x00088440
 8006e94:	200010a8 	.word	0x200010a8
 8006e98:	00000000 	.word	0x00000000
 8006e9c:	2a00      	cmp	r2, #0
 8006e9e:	f000 812a 	beq.w	80070f6 <funchad53.constprop.0+0x7f2>
 8006ea2:	3a01      	subs	r2, #1
 8006ea4:	b292      	uxth	r2, r2
 8006ea6:	489a      	ldr	r0, [pc, #616]	; (8007110 <funchad53.constprop.0+0x80c>)
 8006ea8:	499a      	ldr	r1, [pc, #616]	; (8007114 <funchad53.constprop.0+0x810>)
 8006eaa:	3201      	adds	r2, #1
 8006eac:	0092      	lsls	r2, r2, #2
 8006eae:	4605      	mov	r5, r0
 8006eb0:	f002 f978 	bl	80091a4 <memcpy>
 8006eb4:	462a      	mov	r2, r5
 8006eb6:	f04f 0300 	mov.w	r3, #0
 8006eba:	2a00      	cmp	r2, #0
 8006ebc:	d007      	beq.n	8006ece <funchad53.constprop.0+0x5ca>
 8006ebe:	f1a2 0101 	sub.w	r1, r2, #1
 8006ec2:	ea02 0201 	and.w	r2, r2, r1
 8006ec6:	f103 0301 	add.w	r3, r3, #1
 8006eca:	2a00      	cmp	r2, #0
 8006ecc:	d1f7      	bne.n	8006ebe <funchad53.constprop.0+0x5ba>
 8006ece:	2b20      	cmp	r3, #32
 8006ed0:	bfcc      	ite	gt
 8006ed2:	2300      	movgt	r3, #0
 8006ed4:	2301      	movle	r3, #1
 8006ed6:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 8006eda:	441a      	add	r2, r3
 8006edc:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006ee0:	eba2 0203 	sub.w	r2, r2, r3
 8006ee4:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8006ee8:	441a      	add	r2, r3
 8006eea:	ea4f 22c2 	mov.w	r2, r2, lsl #11
 8006eee:	441a      	add	r2, r3
 8006ef0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006ef4:	eba2 0203 	sub.w	r2, r2, r3
 8006ef8:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8006efc:	ea6f 0202 	mvn.w	r2, r2
 8006f00:	ba12      	rev	r2, r2
 8006f02:	edd5 6a00 	vldr	s13, [r5]
 8006f06:	ed95 8a01 	vldr	s16, [r5, #4]
 8006f0a:	edd5 5a02 	vldr	s11, [r5, #8]
 8006f0e:	ed95 6a03 	vldr	s12, [r5, #12]
 8006f12:	ed95 0a04 	vldr	s0, [r5, #16]
 8006f16:	edd5 0a05 	vldr	s1, [r5, #20]
 8006f1a:	ed95 7a06 	vldr	s14, [r5, #24]
 8006f1e:	ed95 1a07 	vldr	s2, [r5, #28]
 8006f22:	edd5 1a08 	vldr	s3, [r5, #32]
 8006f26:	ed95 2a09 	vldr	s4, [r5, #36]	; 0x24
 8006f2a:	edd5 2a0a 	vldr	s5, [r5, #40]	; 0x28
 8006f2e:	ed95 3a0b 	vldr	s6, [r5, #44]	; 0x2c
 8006f32:	edd5 7a0c 	vldr	s15, [r5, #48]	; 0x30
 8006f36:	edd5 3a0d 	vldr	s7, [r5, #52]	; 0x34
 8006f3a:	ed95 4a0e 	vldr	s8, [r5, #56]	; 0x38
 8006f3e:	edd5 4a0f 	vldr	s9, [r5, #60]	; 0x3c
 8006f42:	ed95 5a10 	vldr	s10, [r5, #64]	; 0x40
 8006f46:	ee76 6a88 	vadd.f32	s13, s13, s16
 8006f4a:	2312      	movs	r3, #18
 8006f4c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8006f50:	edd5 5a11 	vldr	s11, [r5, #68]	; 0x44
 8006f54:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006f58:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006f5c:	eeb3 6a02 	vmov.f32	s12, #50	; 0x41900000  18.0
 8006f60:	ee76 6a80 	vadd.f32	s13, s13, s0
 8006f64:	ee76 6aa0 	vadd.f32	s13, s13, s1
 8006f68:	ee36 7a87 	vadd.f32	s14, s13, s14
 8006f6c:	ee37 7a01 	vadd.f32	s14, s14, s2
 8006f70:	ee37 7a21 	vadd.f32	s14, s14, s3
 8006f74:	ee37 7a02 	vadd.f32	s14, s14, s4
 8006f78:	ee37 7a22 	vadd.f32	s14, s14, s5
 8006f7c:	ee37 7a03 	vadd.f32	s14, s14, s6
 8006f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f84:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8006f88:	ee77 7a84 	vadd.f32	s15, s15, s8
 8006f8c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8006f90:	ee77 7a85 	vadd.f32	s15, s15, s10
 8006f94:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006f98:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8006f9c:	ba1a      	rev	r2, r3
 8006f9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8006fa2:	f1a2 0201 	sub.w	r2, r2, #1
 8006fa6:	eba3 0202 	sub.w	r2, r3, r2
 8006faa:	b2d2      	uxtb	r2, r2
 8006fac:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8006fbc:	eba3 0302 	sub.w	r3, r3, r2
 8006fc0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8006fc4:	4413      	add	r3, r2
 8006fc6:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 8006fca:	4413      	add	r3, r2
 8006fcc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006fd0:	eba3 0302 	sub.w	r3, r3, r2
 8006fd4:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8006fd8:	ea6f 0303 	mvn.w	r3, r3
 8006fdc:	ba1b      	rev	r3, r3
 8006fde:	8b5a      	ldrh	r2, [r3, #26]
 8006fe0:	f8dd 101e 	ldr.w	r1, [sp, #30]
 8006fe4:	1113      	asrs	r3, r2, #4
 8006fe6:	f002 020f 	and.w	r2, r2, #15
 8006fea:	eba3 1403 	sub.w	r4, r3, r3, lsl #4
 8006fee:	eba2 1002 	sub.w	r0, r2, r2, lsl #4
 8006ff2:	fb03 4303 	mla	r3, r3, r3, r4
 8006ff6:	fb02 0202 	mla	r2, r2, r2, r0
 8006ffa:	441a      	add	r2, r3
 8006ffc:	3264      	adds	r2, #100	; 0x64
 8006ffe:	440a      	add	r2, r1
 8007000:	b292      	uxth	r2, r2
 8007002:	b152      	cbz	r2, 800701a <funchad53.constprop.0+0x716>
 8007004:	4b42      	ldr	r3, [pc, #264]	; (8007110 <funchad53.constprop.0+0x80c>)
 8007006:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800700a:	edd3 7a00 	vldr	s15, [r3]
 800700e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007012:	ece3 7a01 	vstmia	r3!, {s15}
 8007016:	4293      	cmp	r3, r2
 8007018:	d1f7      	bne.n	800700a <funchad53.constprop.0+0x706>
 800701a:	4b3d      	ldr	r3, [pc, #244]	; (8007110 <funchad53.constprop.0+0x80c>)
 800701c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8007020:	ecf3 7a01 	vldmia	r3!, {s15}
 8007024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800702c:	bf48      	it	mi
 800702e:	eef1 7a67 	vnegmi.f32	s15, s15
 8007032:	429a      	cmp	r2, r3
 8007034:	ed43 7a01 	vstr	s15, [r3, #-4]
 8007038:	d1f2      	bne.n	8007020 <funchad53.constprop.0+0x71c>
 800703a:	462a      	mov	r2, r5
 800703c:	f04f 0300 	mov.w	r3, #0
 8007040:	2a00      	cmp	r2, #0
 8007042:	d007      	beq.n	8007054 <funchad53.constprop.0+0x750>
 8007044:	f1a2 0101 	sub.w	r1, r2, #1
 8007048:	ea02 0201 	and.w	r2, r2, r1
 800704c:	f103 0301 	add.w	r3, r3, #1
 8007050:	2a00      	cmp	r2, #0
 8007052:	d1f7      	bne.n	8007044 <funchad53.constprop.0+0x740>
 8007054:	2b20      	cmp	r3, #32
 8007056:	bfcc      	ite	gt
 8007058:	2300      	movgt	r3, #0
 800705a:	2301      	movle	r3, #1
 800705c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8007060:	441a      	add	r2, r3
 8007062:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8007066:	eba2 0203 	sub.w	r2, r2, r3
 800706a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800706e:	eba2 0203 	sub.w	r2, r2, r3
 8007072:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8007076:	441a      	add	r2, r3
 8007078:	ea4f 22c2 	mov.w	r2, r2, lsl #11
 800707c:	441a      	add	r2, r3
 800707e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8007082:	eba2 0203 	sub.w	r2, r2, r3
 8007086:	ea4f 1242 	mov.w	r2, r2, lsl #5
 800708a:	ea6f 0202 	mvn.w	r2, r2
 800708e:	ba12      	rev	r2, r2
 8007090:	b009      	add	sp, #36	; 0x24
 8007092:	ecbd 8b06 	vpop	{d8-d10}
 8007096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800709a:	2e00      	cmp	r6, #0
 800709c:	f47f adfc 	bne.w	8006c98 <funchad53.constprop.0+0x394>
 80070a0:	9b01      	ldr	r3, [sp, #4]
 80070a2:	3301      	adds	r3, #1
 80070a4:	2b03      	cmp	r3, #3
 80070a6:	9301      	str	r3, [sp, #4]
 80070a8:	f47f ac55 	bne.w	8006956 <funchad53.constprop.0+0x52>
 80070ac:	e60d      	b.n	8006cca <funchad53.constprop.0+0x3c6>
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	2000      	movs	r0, #0
 80070b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80070b8:	f7f9 fbe0 	bl	800087c <__aeabi_ddiv>
 80070bc:	f7f9 fdac 	bl	8000c18 <__aeabi_d2f>
 80070c0:	2c01      	cmp	r4, #1
 80070c2:	ee09 0a10 	vmov	s18, r0
 80070c6:	bf18      	it	ne
 80070c8:	2500      	movne	r5, #0
 80070ca:	f47f ace5 	bne.w	8006a98 <funchad53.constprop.0+0x194>
 80070ce:	e59e      	b.n	8006c0e <funchad53.constprop.0+0x30a>
 80070d0:	2c00      	cmp	r4, #0
 80070d2:	f43f accd 	beq.w	8006a70 <funchad53.constprop.0+0x16c>
 80070d6:	e4bb      	b.n	8006a50 <funchad53.constprop.0+0x14c>
 80070d8:	2501      	movs	r5, #1
 80070da:	e47d      	b.n	80069d8 <funchad53.constprop.0+0xd4>
 80070dc:	4626      	mov	r6, r4
 80070de:	2000      	movs	r0, #0
 80070e0:	2100      	movs	r1, #0
 80070e2:	f04f 38ff 	mov.w	r8, #4294967295
 80070e6:	eef0 6a69 	vmov.f32	s13, s19
 80070ea:	e459      	b.n	80069a0 <funchad53.constprop.0+0x9c>
 80070ec:	4610      	mov	r0, r2
 80070ee:	e618      	b.n	8006d22 <funchad53.constprop.0+0x41e>
 80070f0:	ba1a      	rev	r2, r3
 80070f2:	461c      	mov	r4, r3
 80070f4:	e60c      	b.n	8006d10 <funchad53.constprop.0+0x40c>
 80070f6:	4d06      	ldr	r5, [pc, #24]	; (8007110 <funchad53.constprop.0+0x80c>)
 80070f8:	e6dc      	b.n	8006eb4 <funchad53.constprop.0+0x5b0>
 80070fa:	f006 fd89 	bl	800dc10 <sqrtf>
 80070fe:	e56d      	b.n	8006bdc <funchad53.constprop.0+0x2d8>
 8007100:	f006 fd86 	bl	800dc10 <sqrtf>
 8007104:	e578      	b.n	8006bf8 <funchad53.constprop.0+0x2f4>
 8007106:	f006 fd83 	bl	800dc10 <sqrtf>
 800710a:	e5c1      	b.n	8006c90 <funchad53.constprop.0+0x38c>
 800710c:	9d04      	ldr	r5, [sp, #16]
 800710e:	e463      	b.n	80069d8 <funchad53.constprop.0+0xd4>
 8007110:	200010a8 	.word	0x200010a8
 8007114:	200018f0 	.word	0x200018f0

08007118 <neai_anomalydetection_init>:
 8007118:	4b2d      	ldr	r3, [pc, #180]	; (80071d0 <neai_anomalydetection_init+0xb8>)
 800711a:	b4f0      	push	{r4, r5, r6, r7}
 800711c:	2200      	movs	r2, #0
 800711e:	f44f 7480 	mov.w	r4, #256	; 0x100
 8007122:	2180      	movs	r1, #128	; 0x80
 8007124:	801c      	strh	r4, [r3, #0]
 8007126:	8159      	strh	r1, [r3, #10]
 8007128:	2000      	movs	r0, #0
 800712a:	809a      	strh	r2, [r3, #4]
 800712c:	811a      	strh	r2, [r3, #8]
 800712e:	731a      	strb	r2, [r3, #12]
 8007130:	735a      	strb	r2, [r3, #13]
 8007132:	739a      	strb	r2, [r3, #14]
 8007134:	f103 0410 	add.w	r4, r3, #16
 8007138:	f103 011c 	add.w	r1, r3, #28
 800713c:	f103 0515 	add.w	r5, r3, #21
 8007140:	f804 2b01 	strb.w	r2, [r4], #1
 8007144:	42ac      	cmp	r4, r5
 8007146:	f841 2c04 	str.w	r2, [r1, #-4]
 800714a:	6148      	str	r0, [r1, #20]
 800714c:	6188      	str	r0, [r1, #24]
 800714e:	6308      	str	r0, [r1, #48]	; 0x30
 8007150:	600a      	str	r2, [r1, #0]
 8007152:	604a      	str	r2, [r1, #4]
 8007154:	608a      	str	r2, [r1, #8]
 8007156:	60ca      	str	r2, [r1, #12]
 8007158:	820a      	strh	r2, [r1, #16]
 800715a:	61ca      	str	r2, [r1, #28]
 800715c:	620a      	str	r2, [r1, #32]
 800715e:	624a      	str	r2, [r1, #36]	; 0x24
 8007160:	628a      	str	r2, [r1, #40]	; 0x28
 8007162:	858a      	strh	r2, [r1, #44]	; 0x2c
 8007164:	f101 0138 	add.w	r1, r1, #56	; 0x38
 8007168:	d1ea      	bne.n	8007140 <neai_anomalydetection_init+0x28>
 800716a:	491a      	ldr	r1, [pc, #104]	; (80071d4 <neai_anomalydetection_init+0xbc>)
 800716c:	4c1a      	ldr	r4, [pc, #104]	; (80071d8 <neai_anomalydetection_init+0xc0>)
 800716e:	8809      	ldrh	r1, [r1, #0]
 8007170:	4d1a      	ldr	r5, [pc, #104]	; (80071dc <neai_anomalydetection_init+0xc4>)
 8007172:	f8c3 0130 	str.w	r0, [r3, #304]	; 0x130
 8007176:	f04f 577d 	mov.w	r7, #1061158912	; 0x3f400000
 800717a:	6027      	str	r7, [r4, #0]
 800717c:	f8c3 0134 	str.w	r0, [r3, #308]	; 0x134
 8007180:	4c17      	ldr	r4, [pc, #92]	; (80071e0 <neai_anomalydetection_init+0xc8>)
 8007182:	f8c3 0138 	str.w	r0, [r3, #312]	; 0x138
 8007186:	4817      	ldr	r0, [pc, #92]	; (80071e4 <neai_anomalydetection_init+0xcc>)
 8007188:	4e17      	ldr	r6, [pc, #92]	; (80071e8 <neai_anomalydetection_init+0xd0>)
 800718a:	f8c3 5144 	str.w	r5, [r3, #324]	; 0x144
 800718e:	f8c3 414c 	str.w	r4, [r3, #332]	; 0x14c
 8007192:	4d16      	ldr	r5, [pc, #88]	; (80071ec <neai_anomalydetection_init+0xd4>)
 8007194:	f8c3 0150 	str.w	r0, [r3, #336]	; 0x150
 8007198:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 800719c:	2001      	movs	r0, #1
 800719e:	29a5      	cmp	r1, #165	; 0xa5
 80071a0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 80071a4:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
 80071a8:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
 80071ac:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 80071b0:	f883 0158 	strb.w	r0, [r3, #344]	; 0x158
 80071b4:	d106      	bne.n	80071c4 <neai_anomalydetection_init+0xac>
 80071b6:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 80071ba:	2000      	movs	r0, #0
 80071bc:	bcf0      	pop	{r4, r5, r6, r7}
 80071be:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
 80071c2:	4770      	bx	lr
 80071c4:	207c      	movs	r0, #124	; 0x7c
 80071c6:	f883 0159 	strb.w	r0, [r3, #345]	; 0x159
 80071ca:	bcf0      	pop	{r4, r5, r6, r7}
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	200001ec 	.word	0x200001ec
 80071d4:	1fff77f0 	.word	0x1fff77f0
 80071d8:	20000010 	.word	0x20000010
 80071dc:	3d4ccccd 	.word	0x3d4ccccd
 80071e0:	3e947ae1 	.word	0x3e947ae1
 80071e4:	3e23d70a 	.word	0x3e23d70a
 80071e8:	3ff851ec 	.word	0x3ff851ec
 80071ec:	3e6147ae 	.word	0x3e6147ae

080071f0 <neai_anomalydetection_learn>:
 80071f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f4:	f8df b188 	ldr.w	fp, [pc, #392]	; 8007380 <neai_anomalydetection_learn+0x190>
 80071f8:	ed2d 8b10 	vpush	{d8-d15}
 80071fc:	f89b 4158 	ldrb.w	r4, [fp, #344]	; 0x158
 8007200:	2c01      	cmp	r4, #1
 8007202:	b08f      	sub	sp, #60	; 0x3c
 8007204:	f040 8465 	bne.w	8007ad2 <neai_anomalydetection_learn+0x8e2>
 8007208:	f89b 3159 	ldrb.w	r3, [fp, #345]	; 0x159
 800720c:	2b7c      	cmp	r3, #124	; 0x7c
 800720e:	f000 8463 	beq.w	8007ad8 <neai_anomalydetection_learn+0x8e8>
 8007212:	f7ff fb77 	bl	8006904 <funchad53.constprop.0>
 8007216:	f8bb 315a 	ldrh.w	r3, [fp, #346]	; 0x15a
 800721a:	f89b 200c 	ldrb.w	r2, [fp, #12]
 800721e:	9203      	str	r2, [sp, #12]
 8007220:	3301      	adds	r3, #1
 8007222:	b29b      	uxth	r3, r3
 8007224:	9308      	str	r3, [sp, #32]
 8007226:	f8ab 315a 	strh.w	r3, [fp, #346]	; 0x15a
 800722a:	2a00      	cmp	r2, #0
 800722c:	f001 83aa 	beq.w	8008984 <neai_anomalydetection_learn+0x1794>
 8007230:	eddb 7a55 	vldr	s15, [fp, #340]	; 0x154
 8007234:	4b4d      	ldr	r3, [pc, #308]	; (800736c <neai_anomalydetection_learn+0x17c>)
 8007236:	4c4e      	ldr	r4, [pc, #312]	; (8007370 <neai_anomalydetection_learn+0x180>)
 8007238:	9301      	str	r3, [sp, #4]
 800723a:	1e57      	subs	r7, r2, #1
 800723c:	f10b 030e 	add.w	r3, fp, #14
 8007240:	b2f9      	uxtb	r1, r7
 8007242:	4413      	add	r3, r2
 8007244:	edcd 7a00 	vstr	s15, [sp]
 8007248:	eddb 7a54 	vldr	s15, [fp, #336]	; 0x150
 800724c:	edd4 1a00 	vldr	s3, [r4]
 8007250:	edcd 7a02 	vstr	s15, [sp, #8]
 8007254:	4610      	mov	r0, r2
 8007256:	1a5b      	subs	r3, r3, r1
 8007258:	f10b 0210 	add.w	r2, fp, #16
 800725c:	9306      	str	r3, [sp, #24]
 800725e:	4417      	add	r7, r2
 8007260:	9007      	str	r0, [sp, #28]
 8007262:	f10b 0a18 	add.w	sl, fp, #24
 8007266:	f817 3901 	ldrb.w	r3, [r7], #-1
 800726a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800726e:	4619      	mov	r1, r3
 8007270:	f04f 0200 	mov.w	r2, #0
 8007274:	2900      	cmp	r1, #0
 8007276:	d007      	beq.n	8007288 <neai_anomalydetection_learn+0x98>
 8007278:	f1a1 0001 	sub.w	r0, r1, #1
 800727c:	ea01 0100 	and.w	r1, r1, r0
 8007280:	f102 0201 	add.w	r2, r2, #1
 8007284:	2900      	cmp	r1, #0
 8007286:	d1f7      	bne.n	8007278 <neai_anomalydetection_learn+0x88>
 8007288:	2a20      	cmp	r2, #32
 800728a:	bfcc      	ite	gt
 800728c:	2300      	movgt	r3, #0
 800728e:	2301      	movle	r3, #1
 8007290:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 8007294:	eba2 0203 	sub.w	r2, r2, r3
 8007298:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800729c:	eba2 0203 	sub.w	r2, r2, r3
 80072a0:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80072a4:	441a      	add	r2, r3
 80072a6:	ea4f 22c2 	mov.w	r2, r2, lsl #11
 80072aa:	441a      	add	r2, r3
 80072ac:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80072b0:	eba2 0203 	sub.w	r2, r2, r3
 80072b4:	ea4f 1242 	mov.w	r2, r2, lsl #5
 80072b8:	ea6f 0202 	mvn.w	r2, r2
 80072bc:	ba12      	rev	r2, r2
 80072be:	8992      	ldrh	r2, [r2, #12]
 80072c0:	f8dd 1035 	ldr.w	r1, [sp, #53]	; 0x35
 80072c4:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8007374 <neai_anomalydetection_learn+0x184>
 80072c8:	482b      	ldr	r0, [pc, #172]	; (8007378 <neai_anomalydetection_learn+0x188>)
 80072ca:	1113      	asrs	r3, r2, #4
 80072cc:	f002 020f 	and.w	r2, r2, #15
 80072d0:	ebc3 7683 	rsb	r6, r3, r3, lsl #30
 80072d4:	ebc2 7582 	rsb	r5, r2, r2, lsl #30
 80072d8:	ebc2 0585 	rsb	r5, r2, r5, lsl #2
 80072dc:	ebc3 0686 	rsb	r6, r3, r6, lsl #2
 80072e0:	fb02 5202 	mla	r2, r2, r2, r5
 80072e4:	fb03 6303 	mla	r3, r3, r3, r6
 80072e8:	4413      	add	r3, r2
 80072ea:	3b32      	subs	r3, #50	; 0x32
 80072ec:	440b      	add	r3, r1
 80072ee:	b2dd      	uxtb	r5, r3
 80072f0:	ebc5 09c5 	rsb	r9, r5, r5, lsl #3
 80072f4:	eb0b 02c9 	add.w	r2, fp, r9, lsl #3
 80072f8:	ed92 8a0d 	vldr	s16, [r2, #52]	; 0x34
 80072fc:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8007300:	f8cd 3035 	str.w	r3, [sp, #53]	; 0x35
 8007304:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8007308:	eb0a 03c9 	add.w	r3, sl, r9, lsl #3
 800730c:	eec7 8a87 	vdiv.f32	s17, s15, s14
 8007310:	1cd9      	adds	r1, r3, #3
 8007312:	9104      	str	r1, [sp, #16]
 8007314:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8007318:	9505      	str	r5, [sp, #20]
 800731a:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 800731e:	4603      	mov	r3, r0
 8007320:	4602      	mov	r2, r0
 8007322:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 8007326:	ee07 6a90 	vmov	s15, r6
 800732a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800732e:	eeb0 7a48 	vmov.f32	s14, s16
 8007332:	eea8 7aa7 	vfma.f32	s14, s17, s15
 8007336:	9e01      	ldr	r6, [sp, #4]
 8007338:	eca2 7a01 	vstmia	r2!, {s14}
 800733c:	4296      	cmp	r6, r2
 800733e:	d1f0      	bne.n	8007322 <neai_anomalydetection_learn+0x132>
 8007340:	ed9d 7a00 	vldr	s14, [sp]
 8007344:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800737c <neai_anomalydetection_learn+0x18c>
 8007348:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800734c:	2212      	movs	r2, #18
 800734e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007352:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8007356:	d815      	bhi.n	8007384 <neai_anomalydetection_learn+0x194>
 8007358:	ed9d 7a02 	vldr	s14, [sp, #8]
 800735c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007364:	f240 83e9 	bls.w	8007b3a <neai_anomalydetection_learn+0x94a>
 8007368:	e00c      	b.n	8007384 <neai_anomalydetection_learn+0x194>
 800736a:	bf00      	nop
 800736c:	20001b38 	.word	0x20001b38
 8007370:	200010a8 	.word	0x200010a8
 8007374:	437f0000 	.word	0x437f0000
 8007378:	20001af0 	.word	0x20001af0
 800737c:	bf7d70a4 	.word	0xbf7d70a4
 8007380:	200001ec 	.word	0x200001ec
 8007384:	ed94 7a01 	vldr	s14, [r4, #4]
 8007388:	ed94 fa02 	vldr	s30, [r4, #8]
 800738c:	ed94 ea03 	vldr	s28, [r4, #12]
 8007390:	ed94 da04 	vldr	s26, [r4, #16]
 8007394:	ed94 ca05 	vldr	s24, [r4, #20]
 8007398:	ed94 ba06 	vldr	s22, [r4, #24]
 800739c:	ed94 aa07 	vldr	s20, [r4, #28]
 80073a0:	edd4 0a08 	vldr	s1, [r4, #32]
 80073a4:	ed94 2a09 	vldr	s4, [r4, #36]	; 0x24
 80073a8:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 80073ac:	edd3 7a00 	vldr	s15, [r3]
 80073b0:	edd3 fa01 	vldr	s31, [r3, #4]
 80073b4:	edd3 ea02 	vldr	s29, [r3, #8]
 80073b8:	edd3 da03 	vldr	s27, [r3, #12]
 80073bc:	edd3 ca04 	vldr	s25, [r3, #16]
 80073c0:	edd3 ba05 	vldr	s23, [r3, #20]
 80073c4:	edd3 aa06 	vldr	s21, [r3, #24]
 80073c8:	eef4 1ac7 	vcmpe.f32	s3, s14
 80073cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d0:	bf54      	ite	pl
 80073d2:	eeb0 8a61 	vmovpl.f32	s16, s3
 80073d6:	eeb0 8a47 	vmovmi.f32	s16, s14
 80073da:	eeb4 8a4f 	vcmp.f32	s16, s30
 80073de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e2:	bf48      	it	mi
 80073e4:	eeb0 8a4f 	vmovmi.f32	s16, s30
 80073e8:	eeb4 8a4e 	vcmp.f32	s16, s28
 80073ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f0:	bf48      	it	mi
 80073f2:	eeb0 8a4e 	vmovmi.f32	s16, s28
 80073f6:	eeb4 8a4d 	vcmp.f32	s16, s26
 80073fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073fe:	bf48      	it	mi
 8007400:	eeb0 8a4d 	vmovmi.f32	s16, s26
 8007404:	eeb4 8a4c 	vcmp.f32	s16, s24
 8007408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800740c:	bf48      	it	mi
 800740e:	eeb0 8a4c 	vmovmi.f32	s16, s24
 8007412:	eeb4 8a4b 	vcmp.f32	s16, s22
 8007416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800741a:	bf48      	it	mi
 800741c:	eeb0 8a4b 	vmovmi.f32	s16, s22
 8007420:	eeb4 8a4a 	vcmp.f32	s16, s20
 8007424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007428:	bf48      	it	mi
 800742a:	eeb0 8a4a 	vmovmi.f32	s16, s20
 800742e:	eeb4 8a60 	vcmp.f32	s16, s1
 8007432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007436:	bf48      	it	mi
 8007438:	eeb0 8a60 	vmovmi.f32	s16, s1
 800743c:	eeb4 8a42 	vcmp.f32	s16, s4
 8007440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007444:	bf48      	it	mi
 8007446:	eeb0 8a42 	vmovmi.f32	s16, s4
 800744a:	eeb4 8a66 	vcmp.f32	s16, s13
 800744e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007452:	bf48      	it	mi
 8007454:	eeb0 8a66 	vmovmi.f32	s16, s13
 8007458:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 800745c:	eeb4 8a66 	vcmp.f32	s16, s13
 8007460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007464:	bf48      	it	mi
 8007466:	eeb0 8a66 	vmovmi.f32	s16, s13
 800746a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800746e:	eeb4 8a66 	vcmp.f32	s16, s13
 8007472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007476:	bf48      	it	mi
 8007478:	eeb0 8a66 	vmovmi.f32	s16, s13
 800747c:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 8007480:	eeb4 8a66 	vcmp.f32	s16, s13
 8007484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007488:	bf48      	it	mi
 800748a:	eeb0 8a66 	vmovmi.f32	s16, s13
 800748e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8007492:	eeb4 8a66 	vcmp.f32	s16, s13
 8007496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800749a:	bf48      	it	mi
 800749c:	eeb0 8a66 	vmovmi.f32	s16, s13
 80074a0:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
 80074a4:	eeb4 8a66 	vcmp.f32	s16, s13
 80074a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ac:	bf48      	it	mi
 80074ae:	eeb0 8a66 	vmovmi.f32	s16, s13
 80074b2:	edd4 6a10 	vldr	s13, [r4, #64]	; 0x40
 80074b6:	eeb4 8a66 	vcmp.f32	s16, s13
 80074ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074be:	bf48      	it	mi
 80074c0:	eeb0 8a66 	vmovmi.f32	s16, s13
 80074c4:	edd4 6a11 	vldr	s13, [r4, #68]	; 0x44
 80074c8:	eef4 6a48 	vcmp.f32	s13, s16
 80074cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074d0:	eef4 1ac7 	vcmpe.f32	s3, s14
 80074d4:	bfc8      	it	gt
 80074d6:	eeb0 8a66 	vmovgt.f32	s16, s13
 80074da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074de:	bfd4      	ite	le
 80074e0:	eeb0 9a61 	vmovle.f32	s18, s3
 80074e4:	eeb0 9a47 	vmovgt.f32	s18, s14
 80074e8:	eeb4 9a4f 	vcmp.f32	s18, s30
 80074ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f0:	bfc8      	it	gt
 80074f2:	eeb0 9a4f 	vmovgt.f32	s18, s30
 80074f6:	eeb4 9a4e 	vcmp.f32	s18, s28
 80074fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074fe:	bfc8      	it	gt
 8007500:	eeb0 9a4e 	vmovgt.f32	s18, s28
 8007504:	eeb4 9a4d 	vcmp.f32	s18, s26
 8007508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800750c:	bfc8      	it	gt
 800750e:	eeb0 9a4d 	vmovgt.f32	s18, s26
 8007512:	eeb4 9a4c 	vcmp.f32	s18, s24
 8007516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800751a:	bfc8      	it	gt
 800751c:	eeb0 9a4c 	vmovgt.f32	s18, s24
 8007520:	eeb4 9a4b 	vcmp.f32	s18, s22
 8007524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007528:	bfc8      	it	gt
 800752a:	eeb0 9a4b 	vmovgt.f32	s18, s22
 800752e:	eeb4 9a4a 	vcmp.f32	s18, s20
 8007532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007536:	bfc8      	it	gt
 8007538:	eeb0 9a4a 	vmovgt.f32	s18, s20
 800753c:	eeb4 9a60 	vcmp.f32	s18, s1
 8007540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007544:	bfc8      	it	gt
 8007546:	eeb0 9a60 	vmovgt.f32	s18, s1
 800754a:	eeb4 9a42 	vcmp.f32	s18, s4
 800754e:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8007552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007556:	bfc8      	it	gt
 8007558:	eeb0 9a42 	vmovgt.f32	s18, s4
 800755c:	eeb4 9a66 	vcmp.f32	s18, s13
 8007560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007564:	bfc8      	it	gt
 8007566:	eeb0 9a66 	vmovgt.f32	s18, s13
 800756a:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 800756e:	eeb4 9a66 	vcmp.f32	s18, s13
 8007572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007576:	bfc8      	it	gt
 8007578:	eeb0 9a66 	vmovgt.f32	s18, s13
 800757c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8007580:	eeb4 9a66 	vcmp.f32	s18, s13
 8007584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007588:	bfc8      	it	gt
 800758a:	eeb0 9a66 	vmovgt.f32	s18, s13
 800758e:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 8007592:	eeb4 9a66 	vcmp.f32	s18, s13
 8007596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800759a:	bfc8      	it	gt
 800759c:	eeb0 9a66 	vmovgt.f32	s18, s13
 80075a0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80075a4:	eeb4 9a66 	vcmp.f32	s18, s13
 80075a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ac:	bfc8      	it	gt
 80075ae:	eeb0 9a66 	vmovgt.f32	s18, s13
 80075b2:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
 80075b6:	eeb4 9a66 	vcmp.f32	s18, s13
 80075ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075be:	bfc8      	it	gt
 80075c0:	eeb0 9a66 	vmovgt.f32	s18, s13
 80075c4:	edd4 6a10 	vldr	s13, [r4, #64]	; 0x40
 80075c8:	eeb4 9a66 	vcmp.f32	s18, s13
 80075cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d0:	bfc8      	it	gt
 80075d2:	eeb0 9a66 	vmovgt.f32	s18, s13
 80075d6:	edd4 6a11 	vldr	s13, [r4, #68]	; 0x44
 80075da:	ed93 0a07 	vldr	s0, [r3, #28]
 80075de:	ed93 1a08 	vldr	s2, [r3, #32]
 80075e2:	edd3 2a09 	vldr	s5, [r3, #36]	; 0x24
 80075e6:	ed93 3a0a 	vldr	s6, [r3, #40]	; 0x28
 80075ea:	edd3 3a0b 	vldr	s7, [r3, #44]	; 0x2c
 80075ee:	ed93 4a0c 	vldr	s8, [r3, #48]	; 0x30
 80075f2:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
 80075f6:	ed93 5a0e 	vldr	s10, [r3, #56]	; 0x38
 80075fa:	edd3 5a0f 	vldr	s11, [r3, #60]	; 0x3c
 80075fe:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 8007602:	eef4 6a49 	vcmp.f32	s13, s18
 8007606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800760a:	eef4 7aef 	vcmpe.f32	s15, s31
 800760e:	bf48      	it	mi
 8007610:	eeb0 9a66 	vmovmi.f32	s18, s13
 8007614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007618:	bf54      	ite	pl
 800761a:	eef0 8a67 	vmovpl.f32	s17, s15
 800761e:	eef0 8a6f 	vmovmi.f32	s17, s31
 8007622:	eef4 8a6e 	vcmp.f32	s17, s29
 8007626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800762a:	bf48      	it	mi
 800762c:	eef0 8a6e 	vmovmi.f32	s17, s29
 8007630:	eef4 8a6d 	vcmp.f32	s17, s27
 8007634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007638:	bf48      	it	mi
 800763a:	eef0 8a6d 	vmovmi.f32	s17, s27
 800763e:	eef4 8a6c 	vcmp.f32	s17, s25
 8007642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007646:	bf48      	it	mi
 8007648:	eef0 8a6c 	vmovmi.f32	s17, s25
 800764c:	eef4 8a6b 	vcmp.f32	s17, s23
 8007650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007654:	bf48      	it	mi
 8007656:	eef0 8a6b 	vmovmi.f32	s17, s23
 800765a:	eef4 8a6a 	vcmp.f32	s17, s21
 800765e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007662:	bf48      	it	mi
 8007664:	eef0 8a6a 	vmovmi.f32	s17, s21
 8007668:	eef4 8a40 	vcmp.f32	s17, s0
 800766c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007670:	bf48      	it	mi
 8007672:	eef0 8a40 	vmovmi.f32	s17, s0
 8007676:	eef4 8a41 	vcmp.f32	s17, s2
 800767a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800767e:	bf48      	it	mi
 8007680:	eef0 8a41 	vmovmi.f32	s17, s2
 8007684:	eef4 8a62 	vcmp.f32	s17, s5
 8007688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800768c:	bf48      	it	mi
 800768e:	eef0 8a62 	vmovmi.f32	s17, s5
 8007692:	eef4 8a43 	vcmp.f32	s17, s6
 8007696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800769a:	bf48      	it	mi
 800769c:	eef0 8a43 	vmovmi.f32	s17, s6
 80076a0:	eef4 8a63 	vcmp.f32	s17, s7
 80076a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076a8:	bf48      	it	mi
 80076aa:	eef0 8a63 	vmovmi.f32	s17, s7
 80076ae:	eef4 8a44 	vcmp.f32	s17, s8
 80076b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076b6:	bf48      	it	mi
 80076b8:	eef0 8a44 	vmovmi.f32	s17, s8
 80076bc:	eef4 8a64 	vcmp.f32	s17, s9
 80076c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c4:	bf48      	it	mi
 80076c6:	eef0 8a64 	vmovmi.f32	s17, s9
 80076ca:	eef4 8a45 	vcmp.f32	s17, s10
 80076ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076d2:	bf48      	it	mi
 80076d4:	eef0 8a45 	vmovmi.f32	s17, s10
 80076d8:	eef4 8a65 	vcmp.f32	s17, s11
 80076dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e0:	bf48      	it	mi
 80076e2:	eef0 8a65 	vmovmi.f32	s17, s11
 80076e6:	eef4 8a46 	vcmp.f32	s17, s12
 80076ea:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 80076ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f2:	bf48      	it	mi
 80076f4:	eef0 8a46 	vmovmi.f32	s17, s12
 80076f8:	eef4 6a68 	vcmp.f32	s13, s17
 80076fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007700:	eef4 7aef 	vcmpe.f32	s15, s31
 8007704:	bfc8      	it	gt
 8007706:	eef0 8a66 	vmovgt.f32	s17, s13
 800770a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800770e:	bfd4      	ite	le
 8007710:	eef0 9a67 	vmovle.f32	s19, s15
 8007714:	eef0 9a6f 	vmovgt.f32	s19, s31
 8007718:	eef4 9a6e 	vcmp.f32	s19, s29
 800771c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007720:	bfc8      	it	gt
 8007722:	eef0 9a6e 	vmovgt.f32	s19, s29
 8007726:	eef4 9a6d 	vcmp.f32	s19, s27
 800772a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800772e:	bfc8      	it	gt
 8007730:	eef0 9a6d 	vmovgt.f32	s19, s27
 8007734:	eef4 9a6c 	vcmp.f32	s19, s25
 8007738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800773c:	bfc8      	it	gt
 800773e:	eef0 9a6c 	vmovgt.f32	s19, s25
 8007742:	eef4 9a6b 	vcmp.f32	s19, s23
 8007746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800774a:	bfc8      	it	gt
 800774c:	eef0 9a6b 	vmovgt.f32	s19, s23
 8007750:	eef4 9a6a 	vcmp.f32	s19, s21
 8007754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007758:	bfc8      	it	gt
 800775a:	eef0 9a6a 	vmovgt.f32	s19, s21
 800775e:	eef4 9a40 	vcmp.f32	s19, s0
 8007762:	ee31 7a87 	vadd.f32	s14, s3, s14
 8007766:	ee77 7aaf 	vadd.f32	s15, s15, s31
 800776a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800776e:	bfc8      	it	gt
 8007770:	eef0 9a40 	vmovgt.f32	s19, s0
 8007774:	ee37 7a0f 	vadd.f32	s14, s14, s30
 8007778:	ee77 7aae 	vadd.f32	s15, s15, s29
 800777c:	eef4 9a41 	vcmp.f32	s19, s2
 8007780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007784:	ee37 7a0e 	vadd.f32	s14, s14, s28
 8007788:	ee77 7aad 	vadd.f32	s15, s15, s27
 800778c:	bfc8      	it	gt
 800778e:	eef0 9a41 	vmovgt.f32	s19, s2
 8007792:	eef4 9a62 	vcmp.f32	s19, s5
 8007796:	ee37 7a0d 	vadd.f32	s14, s14, s26
 800779a:	ee77 7aac 	vadd.f32	s15, s15, s25
 800779e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a2:	bfc8      	it	gt
 80077a4:	eef0 9a62 	vmovgt.f32	s19, s5
 80077a8:	ee37 7a0c 	vadd.f32	s14, s14, s24
 80077ac:	ee77 7aab 	vadd.f32	s15, s15, s23
 80077b0:	eef4 9a43 	vcmp.f32	s19, s6
 80077b4:	ee77 7aaa 	vadd.f32	s15, s15, s21
 80077b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077bc:	ee37 7a0b 	vadd.f32	s14, s14, s22
 80077c0:	bfc8      	it	gt
 80077c2:	eef0 9a43 	vmovgt.f32	s19, s6
 80077c6:	eef4 9a63 	vcmp.f32	s19, s7
 80077ca:	ee37 7a0a 	vadd.f32	s14, s14, s20
 80077ce:	ee37 0a80 	vadd.f32	s0, s15, s0
 80077d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d6:	bfc8      	it	gt
 80077d8:	eef0 9a63 	vmovgt.f32	s19, s7
 80077dc:	ee77 7a20 	vadd.f32	s15, s14, s1
 80077e0:	ee30 1a01 	vadd.f32	s2, s0, s2
 80077e4:	eef4 9a44 	vcmp.f32	s19, s8
 80077e8:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80077ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077f0:	ee77 7a82 	vadd.f32	s15, s15, s4
 80077f4:	ee71 2a22 	vadd.f32	s5, s2, s5
 80077f8:	bfc8      	it	gt
 80077fa:	eef0 9a44 	vmovgt.f32	s19, s8
 80077fe:	eef4 9a64 	vcmp.f32	s19, s9
 8007802:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007806:	ee32 3a83 	vadd.f32	s6, s5, s6
 800780a:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 800780e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007812:	bfc8      	it	gt
 8007814:	eef0 9a64 	vmovgt.f32	s19, s9
 8007818:	ee77 7a87 	vadd.f32	s15, s15, s14
 800781c:	ee73 3a23 	vadd.f32	s7, s6, s7
 8007820:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8007824:	eef4 9a45 	vcmp.f32	s19, s10
 8007828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800782c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007830:	ee33 4a84 	vadd.f32	s8, s7, s8
 8007834:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
 8007838:	bfc8      	it	gt
 800783a:	eef0 9a45 	vmovgt.f32	s19, s10
 800783e:	eef4 9a65 	vcmp.f32	s19, s11
 8007842:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007846:	ee74 4a24 	vadd.f32	s9, s8, s9
 800784a:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 800784e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007852:	bfc8      	it	gt
 8007854:	eef0 9a65 	vmovgt.f32	s19, s11
 8007858:	ee77 7a87 	vadd.f32	s15, s15, s14
 800785c:	ee34 5a85 	vadd.f32	s10, s9, s10
 8007860:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8007864:	eef4 9a46 	vcmp.f32	s19, s12
 8007868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800786c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007870:	ee75 5a25 	vadd.f32	s11, s10, s11
 8007874:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 8007878:	bfc8      	it	gt
 800787a:	eef0 9a46 	vmovgt.f32	s19, s12
 800787e:	eef4 6a69 	vcmp.f32	s13, s19
 8007882:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007886:	ee35 6a86 	vadd.f32	s12, s11, s12
 800788a:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
 800788e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007892:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007896:	ee36 6a26 	vadd.f32	s12, s12, s13
 800789a:	bf48      	it	mi
 800789c:	eef0 9a66 	vmovmi.f32	s19, s13
 80078a0:	2212      	movs	r2, #18
 80078a2:	4611      	mov	r1, r2
 80078a4:	f04f 0300 	mov.w	r3, #0
 80078a8:	2900      	cmp	r1, #0
 80078aa:	d007      	beq.n	80078bc <neai_anomalydetection_learn+0x6cc>
 80078ac:	f1a1 0601 	sub.w	r6, r1, #1
 80078b0:	ea01 0106 	and.w	r1, r1, r6
 80078b4:	f103 0301 	add.w	r3, r3, #1
 80078b8:	2900      	cmp	r1, #0
 80078ba:	d1f7      	bne.n	80078ac <neai_anomalydetection_learn+0x6bc>
 80078bc:	2b20      	cmp	r3, #32
 80078be:	bfcc      	ite	gt
 80078c0:	2300      	movgt	r3, #0
 80078c2:	2301      	movle	r3, #1
 80078c4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80078c8:	eba2 0203 	sub.w	r2, r2, r3
 80078cc:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80078d0:	441a      	add	r2, r3
 80078d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80078d6:	eba2 0203 	sub.w	r2, r2, r3
 80078da:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80078de:	441a      	add	r2, r3
 80078e0:	ea4f 22c2 	mov.w	r2, r2, lsl #11
 80078e4:	441a      	add	r2, r3
 80078e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80078ea:	eba2 0203 	sub.w	r2, r2, r3
 80078ee:	ea4f 1242 	mov.w	r2, r2, lsl #5
 80078f2:	ea6f 0202 	mvn.w	r2, r2
 80078f6:	ba12      	rev	r2, r2
 80078f8:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 80078fa:	f003 0c0f 	and.w	ip, r3, #15
 80078fe:	111b      	asrs	r3, r3, #4
 8007900:	f001 8065 	beq.w	80089ce <neai_anomalydetection_learn+0x17de>
 8007904:	4619      	mov	r1, r3
 8007906:	2200      	movs	r2, #0
 8007908:	1e4e      	subs	r6, r1, #1
 800790a:	4031      	ands	r1, r6
 800790c:	f102 0201 	add.w	r2, r2, #1
 8007910:	d1fa      	bne.n	8007908 <neai_anomalydetection_learn+0x718>
 8007912:	f1bc 0f00 	cmp.w	ip, #0
 8007916:	d012      	beq.n	800793e <neai_anomalydetection_learn+0x74e>
 8007918:	4661      	mov	r1, ip
 800791a:	2600      	movs	r6, #0
 800791c:	f101 3eff 	add.w	lr, r1, #4294967295
 8007920:	ea11 010e 	ands.w	r1, r1, lr
 8007924:	f106 0601 	add.w	r6, r6, #1
 8007928:	d1f8      	bne.n	800791c <neai_anomalydetection_learn+0x72c>
 800792a:	fb0c f303 	mul.w	r3, ip, r3
 800792e:	4432      	add	r2, r6
 8007930:	b12b      	cbz	r3, 800793e <neai_anomalydetection_learn+0x74e>
 8007932:	1e5e      	subs	r6, r3, #1
 8007934:	4033      	ands	r3, r6
 8007936:	f101 0101 	add.w	r1, r1, #1
 800793a:	d1fa      	bne.n	8007932 <neai_anomalydetection_learn+0x742>
 800793c:	440a      	add	r2, r1
 800793e:	f8dd 3036 	ldr.w	r3, [sp, #54]	; 0x36
 8007942:	3a07      	subs	r2, #7
 8007944:	441a      	add	r2, r3
 8007946:	b293      	uxth	r3, r2
 8007948:	2b01      	cmp	r3, #1
 800794a:	f8cd 2036 	str.w	r2, [sp, #54]	; 0x36
 800794e:	f240 85f5 	bls.w	800853c <neai_anomalydetection_learn+0x134c>
 8007952:	49a5      	ldr	r1, [pc, #660]	; (8007be8 <neai_anomalydetection_learn+0x9f8>)
 8007954:	eddf 5aa5 	vldr	s11, [pc, #660]	; 8007bec <neai_anomalydetection_learn+0x9fc>
 8007958:	3b01      	subs	r3, #1
 800795a:	b29b      	uxth	r3, r3
 800795c:	1d0e      	adds	r6, r1, #4
 800795e:	eeb0 3a65 	vmov.f32	s6, s11
 8007962:	eeb0 4a65 	vmov.f32	s8, s11
 8007966:	eeb0 7a65 	vmov.f32	s14, s11
 800796a:	eef0 4a65 	vmov.f32	s9, s11
 800796e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007972:	ecb1 5a01 	vldmia	r1!, {s10}
 8007976:	ecf0 6a01 	vldmia	r0!, {s13}
 800797a:	4299      	cmp	r1, r3
 800797c:	eea5 3a05 	vfma.f32	s6, s10, s10
 8007980:	eea5 4a26 	vfma.f32	s8, s10, s13
 8007984:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8007988:	ee74 4a85 	vadd.f32	s9, s9, s10
 800798c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007990:	d1ef      	bne.n	8007972 <neai_anomalydetection_learn+0x782>
 8007992:	b292      	uxth	r2, r2
 8007994:	ee06 2a90 	vmov	s13, r2
 8007998:	ee24 0ae4 	vnmul.f32	s0, s9, s9
 800799c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80079a0:	ee67 3a47 	vnmul.f32	s7, s14, s14
 80079a4:	eeb0 5a40 	vmov.f32	s10, s0
 80079a8:	eea3 5a26 	vfma.f32	s10, s6, s13
 80079ac:	eee5 3aa6 	vfma.f32	s7, s11, s13
 80079b0:	ee27 7a64 	vnmul.f32	s14, s14, s9
 80079b4:	ee25 0a23 	vmul.f32	s0, s10, s7
 80079b8:	eea4 7a26 	vfma.f32	s14, s8, s13
 80079bc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80079c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079c4:	eeb1 aac0 	vsqrt.f32	s20, s0
 80079c8:	f101 803a 	bmi.w	8008a40 <neai_anomalydetection_learn+0x1850>
 80079cc:	eec7 6a0a 	vdiv.f32	s13, s14, s20
 80079d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079d4:	eef4 6ac7 	vcmpe.f32	s13, s14
 80079d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079dc:	f200 80aa 	bhi.w	8007b34 <neai_anomalydetection_learn+0x944>
 80079e0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80079e4:	eef4 6ac7 	vcmpe.f32	s13, s14
 80079e8:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8007bec <neai_anomalydetection_learn+0x9fc>
 80079ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079f0:	bfb8      	it	lt
 80079f2:	eef0 6a47 	vmovlt.f32	s13, s14
 80079f6:	ed9d 7a02 	vldr	s14, [sp, #8]
 80079fa:	eef4 6ac7 	vcmpe.f32	s13, s14
 80079fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a02:	db6f      	blt.n	8007ae4 <neai_anomalydetection_learn+0x8f4>
 8007a04:	ee78 8ae9 	vsub.f32	s17, s17, s19
 8007a08:	eddd 6a00 	vldr	s13, [sp]
 8007a0c:	ee38 8a49 	vsub.f32	s16, s16, s18
 8007a10:	ee28 7aa6 	vmul.f32	s14, s17, s13
 8007a14:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8007a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a1c:	db62      	blt.n	8007ae4 <neai_anomalydetection_learn+0x8f4>
 8007a1e:	ee28 7a26 	vmul.f32	s14, s16, s13
 8007a22:	eef4 8ac7 	vcmpe.f32	s17, s14
 8007a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a2a:	db5b      	blt.n	8007ae4 <neai_anomalydetection_learn+0x8f4>
 8007a2c:	eef3 6a02 	vmov.f32	s13, #50	; 0x41900000  18.0
 8007a30:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007a34:	eef3 5a02 	vmov.f32	s11, #50	; 0x41900000  18.0
 8007a38:	eec6 6a25 	vdiv.f32	s13, s12, s11
 8007a3c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8007a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a44:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8007a48:	bf4c      	ite	mi
 8007a4a:	eef1 7a47 	vnegmi.f32	s15, s14
 8007a4e:	eef0 7a47 	vmovpl.f32	s15, s14
 8007a52:	ed9d 5a00 	vldr	s10, [sp]
 8007a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a5a:	bf4c      	ite	mi
 8007a5c:	eeb1 6a66 	vnegmi.f32	s12, s13
 8007a60:	eeb0 6a66 	vmovpl.f32	s12, s13
 8007a64:	ee66 5a05 	vmul.f32	s11, s12, s10
 8007a68:	eef4 5ae7 	vcmpe.f32	s11, s15
 8007a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a70:	d838      	bhi.n	8007ae4 <neai_anomalydetection_learn+0x8f4>
 8007a72:	ee67 7a85 	vmul.f32	s15, s15, s10
 8007a76:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8007a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a7e:	db31      	blt.n	8007ae4 <neai_anomalydetection_learn+0x8f4>
 8007a80:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007a84:	ee38 8a28 	vadd.f32	s16, s16, s17
 8007a88:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8007a8c:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8007a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a94:	ee28 8a28 	vmul.f32	s16, s16, s17
 8007a98:	bf48      	it	mi
 8007a9a:	eeb1 7a47 	vnegmi.f32	s14, s14
 8007a9e:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8007aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa6:	db1d      	blt.n	8007ae4 <neai_anomalydetection_learn+0x8f4>
 8007aa8:	462b      	mov	r3, r5
 8007aaa:	eba8 0803 	sub.w	r8, r8, r3
 8007aae:	eb0b 08c8 	add.w	r8, fp, r8, lsl #3
 8007ab2:	ed98 8a0d 	vldr	s16, [r8, #52]	; 0x34
 8007ab6:	edd8 7a0c 	vldr	s15, [r8, #48]	; 0x30
 8007aba:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8007bf0 <neai_anomalydetection_learn+0xa00>
 8007abe:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8007ac2:	9506      	str	r5, [sp, #24]
 8007ac4:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8007ac8:	9d05      	ldr	r5, [sp, #20]
 8007aca:	9305      	str	r3, [sp, #20]
 8007acc:	eec7 8a87 	vdiv.f32	s17, s15, s14
 8007ad0:	e03d      	b.n	8007b4e <neai_anomalydetection_learn+0x95e>
 8007ad2:	237b      	movs	r3, #123	; 0x7b
 8007ad4:	f88b 3159 	strb.w	r3, [fp, #345]	; 0x159
 8007ad8:	4618      	mov	r0, r3
 8007ada:	b00f      	add	sp, #60	; 0x3c
 8007adc:	ecbd 8b10 	vpop	{d8-d15}
 8007ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae4:	9b06      	ldr	r3, [sp, #24]
 8007ae6:	429f      	cmp	r7, r3
 8007ae8:	f47f abbd 	bne.w	8007266 <neai_anomalydetection_learn+0x76>
 8007aec:	9d03      	ldr	r5, [sp, #12]
 8007aee:	2d05      	cmp	r5, #5
 8007af0:	f000 8770 	beq.w	80089d4 <neai_anomalydetection_learn+0x17e4>
 8007af4:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8007af8:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007afc:	ed93 8a0d 	vldr	s16, [r3, #52]	; 0x34
 8007b00:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8007bf0 <neai_anomalydetection_learn+0xa00>
 8007b0a:	9305      	str	r3, [sp, #20]
 8007b0c:	ebc5 09c5 	rsb	r9, r5, r5, lsl #3
 8007b10:	eb0a 01c9 	add.w	r1, sl, r9, lsl #3
 8007b14:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8007b18:	1c6b      	adds	r3, r5, #1
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	1cca      	adds	r2, r1, #3
 8007b1e:	eec7 8a87 	vdiv.f32	s17, s15, s14
 8007b22:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8007b26:	9307      	str	r3, [sp, #28]
 8007b28:	f88b 300c 	strb.w	r3, [fp, #12]
 8007b2c:	9506      	str	r5, [sp, #24]
 8007b2e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8007b32:	e00c      	b.n	8007b4e <neai_anomalydetection_learn+0x95e>
 8007b34:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8007bec <neai_anomalydetection_learn+0x9fc>
 8007b38:	e75d      	b.n	80079f6 <neai_anomalydetection_learn+0x806>
 8007b3a:	462b      	mov	r3, r5
 8007b3c:	eba8 0803 	sub.w	r8, r8, r3
 8007b40:	eb0b 08c8 	add.w	r8, fp, r8, lsl #3
 8007b44:	9506      	str	r5, [sp, #24]
 8007b46:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8007b4a:	9d05      	ldr	r5, [sp, #20]
 8007b4c:	9305      	str	r3, [sp, #20]
 8007b4e:	f109 0220 	add.w	r2, r9, #32
 8007b52:	9b05      	ldr	r3, [sp, #20]
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	f200 850a 	bhi.w	800856e <neai_anomalydetection_learn+0x137e>
 8007b5a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8007b5e:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007b62:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8007b66:	eddf 7a22 	vldr	s15, [pc, #136]	; 8007bf0 <neai_anomalydetection_learn+0xa00>
 8007b6a:	4b22      	ldr	r3, [pc, #136]	; (8007bf4 <neai_anomalydetection_learn+0xa04>)
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	ee87 9a27 	vdiv.f32	s18, s14, s15
 8007b72:	4492      	add	sl, r2
 8007b74:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007b78:	9309      	str	r3, [sp, #36]	; 0x24
 8007b7a:	00ec      	lsls	r4, r5, #3
 8007b7c:	9b04      	ldr	r3, [sp, #16]
 8007b7e:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8007bf8 <neai_anomalydetection_learn+0xa08>
 8007b82:	9302      	str	r3, [sp, #8]
 8007b84:	461a      	mov	r2, r3
 8007b86:	464f      	mov	r7, r9
 8007b88:	464b      	mov	r3, r9
 8007b8a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8007b8e:	ee07 1a90 	vmov	s15, r1
 8007b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b96:	eeb0 7a48 	vmov.f32	s14, s16
 8007b9a:	eea7 7aa8 	vfma.f32	s14, s15, s17
 8007b9e:	9901      	ldr	r1, [sp, #4]
 8007ba0:	eca3 7a01 	vstmia	r3!, {s14}
 8007ba4:	428b      	cmp	r3, r1
 8007ba6:	d1f0      	bne.n	8007b8a <neai_anomalydetection_learn+0x99a>
 8007ba8:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8007bfc <neai_anomalydetection_learn+0xa0c>
 8007bac:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8007bb0:	4646      	mov	r6, r8
 8007bb2:	4652      	mov	r2, sl
 8007bb4:	4643      	mov	r3, r8
 8007bb6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8007bba:	ee07 1a90 	vmov	s15, r1
 8007bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bc2:	9900      	ldr	r1, [sp, #0]
 8007bc4:	ee67 7a89 	vmul.f32	s15, s15, s18
 8007bc8:	ece3 7a01 	vstmia	r3!, {s15}
 8007bcc:	428b      	cmp	r3, r1
 8007bce:	d1f2      	bne.n	8007bb6 <neai_anomalydetection_learn+0x9c6>
 8007bd0:	9b05      	ldr	r3, [sp, #20]
 8007bd2:	4905      	ldr	r1, [pc, #20]	; (8007be8 <neai_anomalydetection_learn+0x9f8>)
 8007bd4:	4a08      	ldr	r2, [pc, #32]	; (8007bf8 <neai_anomalydetection_learn+0xa08>)
 8007bd6:	ed9f 9a05 	vldr	s18, [pc, #20]	; 8007bec <neai_anomalydetection_learn+0x9fc>
 8007bda:	3301      	adds	r3, #1
 8007bdc:	ee08 3a10 	vmov	s16, r3
 8007be0:	4b06      	ldr	r3, [pc, #24]	; (8007bfc <neai_anomalydetection_learn+0xa0c>)
 8007be2:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8007be6:	e010      	b.n	8007c0a <neai_anomalydetection_learn+0xa1a>
 8007be8:	200010a8 	.word	0x200010a8
 8007bec:	00000000 	.word	0x00000000
 8007bf0:	437f0000 	.word	0x437f0000
 8007bf4:	20001b80 	.word	0x20001b80
 8007bf8:	20001af0 	.word	0x20001af0
 8007bfc:	20001b38 	.word	0x20001b38
 8007c00:	9800      	ldr	r0, [sp, #0]
 8007c02:	ed03 9a01 	vstr	s18, [r3, #-4]
 8007c06:	4283      	cmp	r3, r0
 8007c08:	d02f      	beq.n	8007c6a <neai_anomalydetection_learn+0xa7a>
 8007c0a:	edd2 6a00 	vldr	s13, [r2]
 8007c0e:	ecf3 7a01 	vldmia	r3!, {s15}
 8007c12:	ecb1 6a01 	vldmia	r1!, {s12}
 8007c16:	ee26 0aa6 	vmul.f32	s0, s13, s13
 8007c1a:	ee76 5a66 	vsub.f32	s11, s12, s13
 8007c1e:	eeb0 7a40 	vmov.f32	s14, s0
 8007c22:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8007c26:	eec5 7a88 	vdiv.f32	s15, s11, s16
 8007c2a:	eef0 5a47 	vmov.f32	s11, s14
 8007c2e:	eed6 5a06 	vfnms.f32	s11, s12, s12
 8007c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c36:	ee85 0a88 	vdiv.f32	s0, s11, s16
 8007c3a:	ece2 7a01 	vstmia	r2!, {s15}
 8007c3e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8007c42:	eea7 0ae7 	vfms.f32	s0, s15, s15
 8007c46:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c4e:	dbd7      	blt.n	8007c00 <neai_anomalydetection_learn+0xa10>
 8007c50:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c58:	eef1 8ac0 	vsqrt.f32	s17, s0
 8007c5c:	f100 86e6 	bmi.w	8008a2c <neai_anomalydetection_learn+0x183c>
 8007c60:	9800      	ldr	r0, [sp, #0]
 8007c62:	4283      	cmp	r3, r0
 8007c64:	ed43 8a01 	vstr	s17, [r3, #-4]
 8007c68:	d1cf      	bne.n	8007c0a <neai_anomalydetection_learn+0xa1a>
 8007c6a:	edd7 7a00 	vldr	s15, [r7]
 8007c6e:	ed97 9a01 	vldr	s18, [r7, #4]
 8007c72:	edd7 8a02 	vldr	s17, [r7, #8]
 8007c76:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8007c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c7e:	bfcc      	ite	gt
 8007c80:	eeb0 7a49 	vmovgt.f32	s14, s18
 8007c84:	eeb0 7a67 	vmovle.f32	s14, s15
 8007c88:	eba4 0305 	sub.w	r3, r4, r5
 8007c8c:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007c90:	eef4 8ac7 	vcmpe.f32	s17, s14
 8007c94:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 8007c98:	bfc8      	it	gt
 8007c9a:	ed83 9a0c 	vstrgt	s18, [r3, #48]	; 0x30
 8007c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ca2:	dd06      	ble.n	8007cb2 <neai_anomalydetection_learn+0xac2>
 8007ca4:	1b63      	subs	r3, r4, r5
 8007ca6:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007caa:	eeb0 7a68 	vmov.f32	s14, s17
 8007cae:	edc3 8a0c 	vstr	s17, [r3, #48]	; 0x30
 8007cb2:	ed97 8a03 	vldr	s16, [r7, #12]
 8007cb6:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8007cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cbe:	dd06      	ble.n	8007cce <neai_anomalydetection_learn+0xade>
 8007cc0:	1b63      	subs	r3, r4, r5
 8007cc2:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007cc6:	eeb0 7a48 	vmov.f32	s14, s16
 8007cca:	ed83 8a0c 	vstr	s16, [r3, #48]	; 0x30
 8007cce:	ed97 0a04 	vldr	s0, [r7, #16]
 8007cd2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cda:	dd06      	ble.n	8007cea <neai_anomalydetection_learn+0xafa>
 8007cdc:	1b63      	subs	r3, r4, r5
 8007cde:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007ce2:	eeb0 7a40 	vmov.f32	s14, s0
 8007ce6:	ed83 0a0c 	vstr	s0, [r3, #48]	; 0x30
 8007cea:	edd7 0a05 	vldr	s1, [r7, #20]
 8007cee:	eef4 0ac7 	vcmpe.f32	s1, s14
 8007cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cf6:	dd06      	ble.n	8007d06 <neai_anomalydetection_learn+0xb16>
 8007cf8:	1b63      	subs	r3, r4, r5
 8007cfa:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007cfe:	eeb0 7a60 	vmov.f32	s14, s1
 8007d02:	edc3 0a0c 	vstr	s1, [r3, #48]	; 0x30
 8007d06:	ed97 1a06 	vldr	s2, [r7, #24]
 8007d0a:	eeb4 1ac7 	vcmpe.f32	s2, s14
 8007d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d12:	dd06      	ble.n	8007d22 <neai_anomalydetection_learn+0xb32>
 8007d14:	1b63      	subs	r3, r4, r5
 8007d16:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007d1a:	eeb0 7a41 	vmov.f32	s14, s2
 8007d1e:	ed83 1a0c 	vstr	s2, [r3, #48]	; 0x30
 8007d22:	edd7 1a07 	vldr	s3, [r7, #28]
 8007d26:	eef4 1ac7 	vcmpe.f32	s3, s14
 8007d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d2e:	dd06      	ble.n	8007d3e <neai_anomalydetection_learn+0xb4e>
 8007d30:	1b63      	subs	r3, r4, r5
 8007d32:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007d36:	eeb0 7a61 	vmov.f32	s14, s3
 8007d3a:	edc3 1a0c 	vstr	s3, [r3, #48]	; 0x30
 8007d3e:	ed97 2a08 	vldr	s4, [r7, #32]
 8007d42:	eeb4 2ac7 	vcmpe.f32	s4, s14
 8007d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d4a:	dd06      	ble.n	8007d5a <neai_anomalydetection_learn+0xb6a>
 8007d4c:	1b63      	subs	r3, r4, r5
 8007d4e:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007d52:	eeb0 7a42 	vmov.f32	s14, s4
 8007d56:	ed83 2a0c 	vstr	s4, [r3, #48]	; 0x30
 8007d5a:	edd7 2a09 	vldr	s5, [r7, #36]	; 0x24
 8007d5e:	eef4 2ac7 	vcmpe.f32	s5, s14
 8007d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d66:	dd06      	ble.n	8007d76 <neai_anomalydetection_learn+0xb86>
 8007d68:	1b63      	subs	r3, r4, r5
 8007d6a:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007d6e:	eeb0 7a62 	vmov.f32	s14, s5
 8007d72:	edc3 2a0c 	vstr	s5, [r3, #48]	; 0x30
 8007d76:	ed97 3a0a 	vldr	s6, [r7, #40]	; 0x28
 8007d7a:	eeb4 3ac7 	vcmpe.f32	s6, s14
 8007d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d82:	dd06      	ble.n	8007d92 <neai_anomalydetection_learn+0xba2>
 8007d84:	1b63      	subs	r3, r4, r5
 8007d86:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007d8a:	eeb0 7a43 	vmov.f32	s14, s6
 8007d8e:	ed83 3a0c 	vstr	s6, [r3, #48]	; 0x30
 8007d92:	edd7 3a0b 	vldr	s7, [r7, #44]	; 0x2c
 8007d96:	eef4 3ac7 	vcmpe.f32	s7, s14
 8007d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d9e:	dd06      	ble.n	8007dae <neai_anomalydetection_learn+0xbbe>
 8007da0:	1b63      	subs	r3, r4, r5
 8007da2:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007da6:	eeb0 7a63 	vmov.f32	s14, s7
 8007daa:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
 8007dae:	ed97 4a0c 	vldr	s8, [r7, #48]	; 0x30
 8007db2:	eeb4 4ac7 	vcmpe.f32	s8, s14
 8007db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dba:	dd06      	ble.n	8007dca <neai_anomalydetection_learn+0xbda>
 8007dbc:	1b63      	subs	r3, r4, r5
 8007dbe:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007dc2:	eeb0 7a44 	vmov.f32	s14, s8
 8007dc6:	ed83 4a0c 	vstr	s8, [r3, #48]	; 0x30
 8007dca:	edd7 4a0d 	vldr	s9, [r7, #52]	; 0x34
 8007dce:	eef4 4ac7 	vcmpe.f32	s9, s14
 8007dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dd6:	dd06      	ble.n	8007de6 <neai_anomalydetection_learn+0xbf6>
 8007dd8:	1b63      	subs	r3, r4, r5
 8007dda:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007dde:	eeb0 7a64 	vmov.f32	s14, s9
 8007de2:	edc3 4a0c 	vstr	s9, [r3, #48]	; 0x30
 8007de6:	ed97 5a0e 	vldr	s10, [r7, #56]	; 0x38
 8007dea:	eeb4 5ac7 	vcmpe.f32	s10, s14
 8007dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007df2:	dd06      	ble.n	8007e02 <neai_anomalydetection_learn+0xc12>
 8007df4:	1b63      	subs	r3, r4, r5
 8007df6:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007dfa:	eeb0 7a45 	vmov.f32	s14, s10
 8007dfe:	ed83 5a0c 	vstr	s10, [r3, #48]	; 0x30
 8007e02:	edd7 5a0f 	vldr	s11, [r7, #60]	; 0x3c
 8007e06:	eef4 5ac7 	vcmpe.f32	s11, s14
 8007e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e0e:	dd06      	ble.n	8007e1e <neai_anomalydetection_learn+0xc2e>
 8007e10:	1b63      	subs	r3, r4, r5
 8007e12:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007e16:	eeb0 7a65 	vmov.f32	s14, s11
 8007e1a:	edc3 5a0c 	vstr	s11, [r3, #48]	; 0x30
 8007e1e:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 8007e22:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8007e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e2a:	dd06      	ble.n	8007e3a <neai_anomalydetection_learn+0xc4a>
 8007e2c:	1b63      	subs	r3, r4, r5
 8007e2e:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007e32:	eeb0 7a46 	vmov.f32	s14, s12
 8007e36:	ed83 6a0c 	vstr	s12, [r3, #48]	; 0x30
 8007e3a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8007e3e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e46:	d506      	bpl.n	8007e56 <neai_anomalydetection_learn+0xc66>
 8007e48:	1b63      	subs	r3, r4, r5
 8007e4a:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007e4e:	eeb0 7a66 	vmov.f32	s14, s13
 8007e52:	edc3 6a0c 	vstr	s13, [r3, #48]	; 0x30
 8007e56:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8007e5a:	1b63      	subs	r3, r4, r5
 8007e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e60:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007e64:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8007e68:	bf48      	it	mi
 8007e6a:	eef0 7a49 	vmovmi.f32	s15, s18
 8007e6e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007e72:	bf48      	it	mi
 8007e74:	ed83 9a0d 	vstrmi	s18, [r3, #52]	; 0x34
 8007e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e7c:	d506      	bpl.n	8007e8c <neai_anomalydetection_learn+0xc9c>
 8007e7e:	1b63      	subs	r3, r4, r5
 8007e80:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007e84:	eef0 7a68 	vmov.f32	s15, s17
 8007e88:	edc3 8a0d 	vstr	s17, [r3, #52]	; 0x34
 8007e8c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e94:	d506      	bpl.n	8007ea4 <neai_anomalydetection_learn+0xcb4>
 8007e96:	1b63      	subs	r3, r4, r5
 8007e98:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007e9c:	eef0 7a48 	vmov.f32	s15, s16
 8007ea0:	ed83 8a0d 	vstr	s16, [r3, #52]	; 0x34
 8007ea4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eac:	d506      	bpl.n	8007ebc <neai_anomalydetection_learn+0xccc>
 8007eae:	1b63      	subs	r3, r4, r5
 8007eb0:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007eb4:	eef0 7a40 	vmov.f32	s15, s0
 8007eb8:	ed83 0a0d 	vstr	s0, [r3, #52]	; 0x34
 8007ebc:	eef4 0ae7 	vcmpe.f32	s1, s15
 8007ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ec4:	d506      	bpl.n	8007ed4 <neai_anomalydetection_learn+0xce4>
 8007ec6:	1b63      	subs	r3, r4, r5
 8007ec8:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007ecc:	eef0 7a60 	vmov.f32	s15, s1
 8007ed0:	edc3 0a0d 	vstr	s1, [r3, #52]	; 0x34
 8007ed4:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8007ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007edc:	d506      	bpl.n	8007eec <neai_anomalydetection_learn+0xcfc>
 8007ede:	1b63      	subs	r3, r4, r5
 8007ee0:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007ee4:	eef0 7a41 	vmov.f32	s15, s2
 8007ee8:	ed83 1a0d 	vstr	s2, [r3, #52]	; 0x34
 8007eec:	eef4 1ae7 	vcmpe.f32	s3, s15
 8007ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ef4:	d506      	bpl.n	8007f04 <neai_anomalydetection_learn+0xd14>
 8007ef6:	1b63      	subs	r3, r4, r5
 8007ef8:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007efc:	eef0 7a61 	vmov.f32	s15, s3
 8007f00:	edc3 1a0d 	vstr	s3, [r3, #52]	; 0x34
 8007f04:	eeb4 2ae7 	vcmpe.f32	s4, s15
 8007f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f0c:	d506      	bpl.n	8007f1c <neai_anomalydetection_learn+0xd2c>
 8007f0e:	1b63      	subs	r3, r4, r5
 8007f10:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007f14:	eef0 7a42 	vmov.f32	s15, s4
 8007f18:	ed83 2a0d 	vstr	s4, [r3, #52]	; 0x34
 8007f1c:	eef4 2ae7 	vcmpe.f32	s5, s15
 8007f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f24:	d506      	bpl.n	8007f34 <neai_anomalydetection_learn+0xd44>
 8007f26:	1b63      	subs	r3, r4, r5
 8007f28:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007f2c:	eef0 7a62 	vmov.f32	s15, s5
 8007f30:	edc3 2a0d 	vstr	s5, [r3, #52]	; 0x34
 8007f34:	eeb4 3ae7 	vcmpe.f32	s6, s15
 8007f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f3c:	d506      	bpl.n	8007f4c <neai_anomalydetection_learn+0xd5c>
 8007f3e:	1b63      	subs	r3, r4, r5
 8007f40:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007f44:	eef0 7a43 	vmov.f32	s15, s6
 8007f48:	ed83 3a0d 	vstr	s6, [r3, #52]	; 0x34
 8007f4c:	eef4 3ae7 	vcmpe.f32	s7, s15
 8007f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f54:	d506      	bpl.n	8007f64 <neai_anomalydetection_learn+0xd74>
 8007f56:	1b63      	subs	r3, r4, r5
 8007f58:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007f5c:	eef0 7a63 	vmov.f32	s15, s7
 8007f60:	edc3 3a0d 	vstr	s7, [r3, #52]	; 0x34
 8007f64:	eeb4 4ae7 	vcmpe.f32	s8, s15
 8007f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f6c:	d506      	bpl.n	8007f7c <neai_anomalydetection_learn+0xd8c>
 8007f6e:	1b63      	subs	r3, r4, r5
 8007f70:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007f74:	eef0 7a44 	vmov.f32	s15, s8
 8007f78:	ed83 4a0d 	vstr	s8, [r3, #52]	; 0x34
 8007f7c:	eef4 4ae7 	vcmpe.f32	s9, s15
 8007f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f84:	d506      	bpl.n	8007f94 <neai_anomalydetection_learn+0xda4>
 8007f86:	1b63      	subs	r3, r4, r5
 8007f88:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007f8c:	eef0 7a64 	vmov.f32	s15, s9
 8007f90:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
 8007f94:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8007f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f9c:	d506      	bpl.n	8007fac <neai_anomalydetection_learn+0xdbc>
 8007f9e:	1b63      	subs	r3, r4, r5
 8007fa0:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007fa4:	eef0 7a45 	vmov.f32	s15, s10
 8007fa8:	ed83 5a0d 	vstr	s10, [r3, #52]	; 0x34
 8007fac:	eef4 5ae7 	vcmpe.f32	s11, s15
 8007fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fb4:	d506      	bpl.n	8007fc4 <neai_anomalydetection_learn+0xdd4>
 8007fb6:	1b63      	subs	r3, r4, r5
 8007fb8:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007fbc:	eef0 7a65 	vmov.f32	s15, s11
 8007fc0:	edc3 5a0d 	vstr	s11, [r3, #52]	; 0x34
 8007fc4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8007fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fcc:	d506      	bpl.n	8007fdc <neai_anomalydetection_learn+0xdec>
 8007fce:	1b63      	subs	r3, r4, r5
 8007fd0:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007fd4:	eef0 7a46 	vmov.f32	s15, s12
 8007fd8:	ed83 6a0d 	vstr	s12, [r3, #52]	; 0x34
 8007fdc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fe4:	dd06      	ble.n	8007ff4 <neai_anomalydetection_learn+0xe04>
 8007fe6:	1b63      	subs	r3, r4, r5
 8007fe8:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8007fec:	eef0 7a66 	vmov.f32	s15, s13
 8007ff0:	edc3 6a0d 	vstr	s13, [r3, #52]	; 0x34
 8007ff4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007ff8:	1b67      	subs	r7, r4, r5
 8007ffa:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8007ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008002:	bf88      	it	hi
 8008004:	eddf 6a0e 	vldrhi	s13, [pc, #56]	; 8008040 <neai_anomalydetection_learn+0xe50>
 8008008:	9504      	str	r5, [sp, #16]
 800800a:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 800800e:	9d01      	ldr	r5, [sp, #4]
 8008010:	bf98      	it	ls
 8008012:	ed9f aa0c 	vldrls	s20, [pc, #48]	; 8008044 <neai_anomalydetection_learn+0xe54>
 8008016:	9401      	str	r4, [sp, #4]
 8008018:	bf88      	it	hi
 800801a:	ee86 aa87 	vdivhi.f32	s20, s13, s14
 800801e:	464c      	mov	r4, r9
 8008020:	46b9      	mov	r9, r7
 8008022:	9f02      	ldr	r7, [sp, #8]
 8008024:	ed9f 8b04 	vldr	d8, [pc, #16]	; 8008038 <neai_anomalydetection_learn+0xe48>
 8008028:	eddf 9a05 	vldr	s19, [pc, #20]	; 8008040 <neai_anomalydetection_learn+0xe50>
 800802c:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8008030:	e00c      	b.n	800804c <neai_anomalydetection_learn+0xe5c>
 8008032:	bf00      	nop
 8008034:	f3af 8000 	nop.w
	...
 8008040:	437f0000 	.word	0x437f0000
 8008044:	4d732fdc 	.word	0x4d732fdc
 8008048:	edd9 7a0d 	vldr	s15, [r9, #52]	; 0x34
 800804c:	ecb4 7a01 	vldmia	r4!, {s14}
 8008050:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008054:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8008058:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800805c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008060:	bfac      	ite	ge
 8008062:	ee77 7a89 	vaddge.f32	s15, s15, s18
 8008066:	ee77 7ac9 	vsublt.f32	s15, s15, s18
 800806a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800806e:	ee17 0a90 	vmov	r0, s15
 8008072:	f7f8 fa6f 	bl	8000554 <__aeabi_i2d>
 8008076:	eeb0 1a48 	vmov.f32	s2, s16
 800807a:	eef0 1a68 	vmov.f32	s3, s17
 800807e:	ec41 0b10 	vmov	d0, r0, r1
 8008082:	f005 fd21 	bl	800dac8 <fmax>
 8008086:	ec51 0b10 	vmov	r0, r1, d0
 800808a:	f7f8 fdc5 	bl	8000c18 <__aeabi_d2f>
 800808e:	eef0 0a69 	vmov.f32	s1, s19
 8008092:	ee00 0a10 	vmov	s0, r0
 8008096:	f005 fd84 	bl	800dba2 <fminf>
 800809a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800809e:	42ac      	cmp	r4, r5
 80080a0:	ee17 2a90 	vmov	r2, s15
 80080a4:	f807 2f01 	strb.w	r2, [r7, #1]!
 80080a8:	d1ce      	bne.n	8008048 <neai_anomalydetection_learn+0xe58>
 80080aa:	edd6 7a00 	vldr	s15, [r6]
 80080ae:	ed96 8a01 	vldr	s16, [r6, #4]
 80080b2:	ed96 0a02 	vldr	s0, [r6, #8]
 80080b6:	edd6 0a03 	vldr	s1, [r6, #12]
 80080ba:	ed96 1a04 	vldr	s2, [r6, #16]
 80080be:	edd6 1a05 	vldr	s3, [r6, #20]
 80080c2:	ed96 2a06 	vldr	s4, [r6, #24]
 80080c6:	edd6 2a07 	vldr	s5, [r6, #28]
 80080ca:	ed96 3a08 	vldr	s6, [r6, #32]
 80080ce:	edd6 3a09 	vldr	s7, [r6, #36]	; 0x24
 80080d2:	ed96 4a0a 	vldr	s8, [r6, #40]	; 0x28
 80080d6:	edd6 4a0b 	vldr	s9, [r6, #44]	; 0x2c
 80080da:	ed96 5a0c 	vldr	s10, [r6, #48]	; 0x30
 80080de:	edd6 5a0d 	vldr	s11, [r6, #52]	; 0x34
 80080e2:	ed96 6a0e 	vldr	s12, [r6, #56]	; 0x38
 80080e6:	ed96 7a0f 	vldr	s14, [r6, #60]	; 0x3c
 80080ea:	edd6 6a10 	vldr	s13, [r6, #64]	; 0x40
 80080ee:	9d04      	ldr	r5, [sp, #16]
 80080f0:	9c01      	ldr	r4, [sp, #4]
 80080f2:	eef4 7a48 	vcmp.f32	s15, s16
 80080f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080fa:	bf48      	it	mi
 80080fc:	eef0 7a48 	vmovmi.f32	s15, s16
 8008100:	eeb4 0a67 	vcmp.f32	s0, s15
 8008104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008108:	bfc8      	it	gt
 800810a:	eef0 7a40 	vmovgt.f32	s15, s0
 800810e:	eef4 0a67 	vcmp.f32	s1, s15
 8008112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008116:	bfc8      	it	gt
 8008118:	eef0 7a60 	vmovgt.f32	s15, s1
 800811c:	eeb4 1a67 	vcmp.f32	s2, s15
 8008120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008124:	bfc8      	it	gt
 8008126:	eef0 7a41 	vmovgt.f32	s15, s2
 800812a:	eef4 1a67 	vcmp.f32	s3, s15
 800812e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008132:	bfc8      	it	gt
 8008134:	eef0 7a61 	vmovgt.f32	s15, s3
 8008138:	eeb4 2a67 	vcmp.f32	s4, s15
 800813c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008140:	bfc8      	it	gt
 8008142:	eef0 7a42 	vmovgt.f32	s15, s4
 8008146:	eef4 2a67 	vcmp.f32	s5, s15
 800814a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800814e:	bfc8      	it	gt
 8008150:	eef0 7a62 	vmovgt.f32	s15, s5
 8008154:	eeb4 3a67 	vcmp.f32	s6, s15
 8008158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800815c:	bfc8      	it	gt
 800815e:	eef0 7a43 	vmovgt.f32	s15, s6
 8008162:	eef4 3a67 	vcmp.f32	s7, s15
 8008166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800816a:	bfc8      	it	gt
 800816c:	eef0 7a63 	vmovgt.f32	s15, s7
 8008170:	eeb4 4a67 	vcmp.f32	s8, s15
 8008174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008178:	bfc8      	it	gt
 800817a:	eef0 7a44 	vmovgt.f32	s15, s8
 800817e:	eef4 4a67 	vcmp.f32	s9, s15
 8008182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008186:	bfc8      	it	gt
 8008188:	eef0 7a64 	vmovgt.f32	s15, s9
 800818c:	eeb4 5a67 	vcmp.f32	s10, s15
 8008190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008194:	bfc8      	it	gt
 8008196:	eef0 7a45 	vmovgt.f32	s15, s10
 800819a:	eef4 5a67 	vcmp.f32	s11, s15
 800819e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081a2:	bfc8      	it	gt
 80081a4:	eef0 7a65 	vmovgt.f32	s15, s11
 80081a8:	eeb4 6a67 	vcmp.f32	s12, s15
 80081ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081b0:	bfc8      	it	gt
 80081b2:	eef0 7a46 	vmovgt.f32	s15, s12
 80081b6:	eeb4 7a67 	vcmp.f32	s14, s15
 80081ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081be:	bfc8      	it	gt
 80081c0:	eef0 7a47 	vmovgt.f32	s15, s14
 80081c4:	eef4 6a67 	vcmp.f32	s13, s15
 80081c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081cc:	ed96 7a11 	vldr	s14, [r6, #68]	; 0x44
 80081d0:	bfc8      	it	gt
 80081d2:	eef0 7a66 	vmovgt.f32	s15, s13
 80081d6:	eef4 7a47 	vcmp.f32	s15, s14
 80081da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081de:	bf48      	it	mi
 80081e0:	eef0 7a47 	vmovmi.f32	s15, s14
 80081e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80081e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ec:	f040 81aa 	bne.w	8008544 <neai_anomalydetection_learn+0x1354>
 80081f0:	2100      	movs	r1, #0
 80081f2:	ba0a      	rev	r2, r1
 80081f4:	4bcc      	ldr	r3, [pc, #816]	; (8008528 <neai_anomalydetection_learn+0x1338>)
 80081f6:	ed9f aacd 	vldr	s20, [pc, #820]	; 800852c <neai_anomalydetection_learn+0x133c>
 80081fa:	2a00      	cmp	r2, #0
 80081fc:	f000 840a 	beq.w	8008a14 <neai_anomalydetection_learn+0x1824>
 8008200:	2000      	movs	r0, #0
 8008202:	1e56      	subs	r6, r2, #1
 8008204:	4032      	ands	r2, r6
 8008206:	f100 0001 	add.w	r0, r0, #1
 800820a:	d1fa      	bne.n	8008202 <neai_anomalydetection_learn+0x1012>
 800820c:	1a09      	subs	r1, r1, r0
 800820e:	fab1 f181 	clz	r1, r1
 8008212:	0949      	lsrs	r1, r1, #5
 8008214:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8008218:	eba2 0201 	sub.w	r2, r2, r1
 800821c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008220:	eba2 0201 	sub.w	r2, r2, r1
 8008224:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8008228:	eba2 0201 	sub.w	r2, r2, r1
 800822c:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8008230:	440a      	add	r2, r1
 8008232:	ea4f 22c2 	mov.w	r2, r2, lsl #11
 8008236:	440a      	add	r2, r1
 8008238:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800823c:	eba2 0201 	sub.w	r2, r2, r1
 8008240:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8008244:	ea6f 0202 	mvn.w	r2, r2
 8008248:	ba12      	rev	r2, r2
 800824a:	8bd2      	ldrh	r2, [r2, #30]
 800824c:	eddf 8aba 	vldr	s17, [pc, #744]	; 8008538 <neai_anomalydetection_learn+0x1348>
 8008250:	1116      	asrs	r6, r2, #4
 8008252:	eba6 1106 	sub.w	r1, r6, r6, lsl #4
 8008256:	f002 020f 	and.w	r2, r2, #15
 800825a:	fb06 1606 	mla	r6, r6, r6, r1
 800825e:	eba2 1102 	sub.w	r1, r2, r2, lsl #4
 8008262:	fb02 1202 	mla	r2, r2, r2, r1
 8008266:	4416      	add	r6, r2
 8008268:	ed9f 9bad 	vldr	d9, [pc, #692]	; 8008520 <neai_anomalydetection_learn+0x1330>
 800826c:	3664      	adds	r6, #100	; 0x64
 800826e:	441e      	add	r6, r3
 8008270:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8008274:	ecf8 7a01 	vldmia	r8!, {s15}
 8008278:	ee6a 7a27 	vmul.f32	s15, s20, s15
 800827c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008284:	bfac      	ite	ge
 8008286:	ee77 7a88 	vaddge.f32	s15, s15, s16
 800828a:	ee77 7ac8 	vsublt.f32	s15, s15, s16
 800828e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008292:	ee17 0a90 	vmov	r0, s15
 8008296:	f7f8 f95d 	bl	8000554 <__aeabi_i2d>
 800829a:	eeb0 1a49 	vmov.f32	s2, s18
 800829e:	eef0 1a69 	vmov.f32	s3, s19
 80082a2:	ec41 0b10 	vmov	d0, r0, r1
 80082a6:	f005 fc0f 	bl	800dac8 <fmax>
 80082aa:	ec51 0b10 	vmov	r0, r1, d0
 80082ae:	f7f8 fcb3 	bl	8000c18 <__aeabi_d2f>
 80082b2:	eef0 0a68 	vmov.f32	s1, s17
 80082b6:	ee00 0a10 	vmov	s0, r0
 80082ba:	f005 fc72 	bl	800dba2 <fminf>
 80082be:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80082c2:	ee17 3a90 	vmov	r3, s15
 80082c6:	f80a 3f01 	strb.w	r3, [sl, #1]!
 80082ca:	9b00      	ldr	r3, [sp, #0]
 80082cc:	4598      	cmp	r8, r3
 80082ce:	d1d1      	bne.n	8008274 <neai_anomalydetection_learn+0x1084>
 80082d0:	1b64      	subs	r4, r4, r5
 80082d2:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 80082d6:	f89b 200d 	ldrb.w	r2, [fp, #13]
 80082da:	69a3      	ldr	r3, [r4, #24]
 80082dc:	f89b 000e 	ldrb.w	r0, [fp, #14]
 80082e0:	64e6      	str	r6, [r4, #76]	; 0x4c
 80082e2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80082e6:	3301      	adds	r3, #1
 80082e8:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 80082ec:	61a3      	str	r3, [r4, #24]
 80082ee:	6992      	ldr	r2, [r2, #24]
 80082f0:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
 80082f4:	4293      	cmp	r3, r2
 80082f6:	bf24      	itt	cs
 80082f8:	9b06      	ldrcs	r3, [sp, #24]
 80082fa:	f88b 300d 	strbcs.w	r3, [fp, #13]
 80082fe:	ba02      	rev	r2, r0
 8008300:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8008304:	f1a2 0201 	sub.w	r2, r2, #1
 8008308:	eba0 0202 	sub.w	r2, r0, r2
 800830c:	b2d2      	uxtb	r2, r2
 800830e:	ea4f 1302 	mov.w	r3, r2, lsl #4
 8008312:	4413      	add	r3, r2
 8008314:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008318:	eba3 0302 	sub.w	r3, r3, r2
 800831c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008320:	4413      	add	r3, r2
 8008322:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 8008326:	4413      	add	r3, r2
 8008328:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800832c:	eba3 0302 	sub.w	r3, r3, r2
 8008330:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8008334:	ea6f 0303 	mvn.w	r3, r3
 8008338:	ba1b      	rev	r3, r3
 800833a:	8a59      	ldrh	r1, [r3, #18]
 800833c:	4a7c      	ldr	r2, [pc, #496]	; (8008530 <neai_anomalydetection_learn+0x1340>)
 800833e:	4b7d      	ldr	r3, [pc, #500]	; (8008534 <neai_anomalydetection_learn+0x1344>)
 8008340:	f8dd 4035 	ldr.w	r4, [sp, #53]	; 0x35
 8008344:	9f07      	ldr	r7, [sp, #28]
 8008346:	eb01 2581 	add.w	r5, r1, r1, lsl #10
 800834a:	ea03 1345 	and.w	r3, r3, r5, lsl #5
 800834e:	ea02 0245 	and.w	r2, r2, r5, lsl #1
 8008352:	431a      	orrs	r2, r3
 8008354:	eb02 2302 	add.w	r3, r2, r2, lsl #8
 8008358:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 800835c:	eba1 4313 	sub.w	r3, r1, r3, lsr #16
 8008360:	2900      	cmp	r1, #0
 8008362:	bf14      	ite	ne
 8008364:	4621      	movne	r1, r4
 8008366:	1c61      	addeq	r1, r4, #1
 8008368:	fa51 f383 	uxtab	r3, r1, r3
 800836c:	b2d9      	uxtb	r1, r3
 800836e:	19cd      	adds	r5, r1, r7
 8008370:	42a9      	cmp	r1, r5
 8008372:	460b      	mov	r3, r1
 8008374:	da1a      	bge.n	80083ac <neai_anomalydetection_learn+0x11bc>
 8008376:	2600      	movs	r6, #0
 8008378:	fbb1 f2f7 	udiv	r2, r1, r7
 800837c:	fb07 1212 	mls	r2, r7, r2, r1
 8008380:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 8008384:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 8008388:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800838c:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 8008390:	69a4      	ldr	r4, [r4, #24]
 8008392:	6989      	ldr	r1, [r1, #24]
 8008394:	3301      	adds	r3, #1
 8008396:	428c      	cmp	r4, r1
 8008398:	b29b      	uxth	r3, r3
 800839a:	bf9c      	itt	ls
 800839c:	b2d0      	uxtbls	r0, r2
 800839e:	2601      	movls	r6, #1
 80083a0:	429d      	cmp	r5, r3
 80083a2:	4619      	mov	r1, r3
 80083a4:	dce8      	bgt.n	8008378 <neai_anomalydetection_learn+0x1188>
 80083a6:	b10e      	cbz	r6, 80083ac <neai_anomalydetection_learn+0x11bc>
 80083a8:	f88b 000e 	strb.w	r0, [fp, #14]
 80083ac:	9a03      	ldr	r2, [sp, #12]
 80083ae:	2300      	movs	r3, #0
 80083b0:	2a01      	cmp	r2, #1
 80083b2:	f88b 3010 	strb.w	r3, [fp, #16]
 80083b6:	f240 8095 	bls.w	80084e4 <neai_anomalydetection_learn+0x12f4>
 80083ba:	2301      	movs	r3, #1
 80083bc:	2a02      	cmp	r2, #2
 80083be:	f88b 3011 	strb.w	r3, [fp, #17]
 80083c2:	d00c      	beq.n	80083de <neai_anomalydetection_learn+0x11ee>
 80083c4:	2302      	movs	r3, #2
 80083c6:	2a03      	cmp	r2, #3
 80083c8:	f88b 3012 	strb.w	r3, [fp, #18]
 80083cc:	d007      	beq.n	80083de <neai_anomalydetection_learn+0x11ee>
 80083ce:	2303      	movs	r3, #3
 80083d0:	2a04      	cmp	r2, #4
 80083d2:	f88b 3013 	strb.w	r3, [fp, #19]
 80083d6:	d002      	beq.n	80083de <neai_anomalydetection_learn+0x11ee>
 80083d8:	2304      	movs	r3, #4
 80083da:	f88b 3014 	strb.w	r3, [fp, #20]
 80083de:	2400      	movs	r4, #0
 80083e0:	f89b 2011 	ldrb.w	r2, [fp, #17]
 80083e4:	f89b 1012 	ldrb.w	r1, [fp, #18]
 80083e8:	f89b 0014 	ldrb.w	r0, [fp, #20]
 80083ec:	f89b c013 	ldrb.w	ip, [fp, #19]
 80083f0:	f8dd e00c 	ldr.w	lr, [sp, #12]
 80083f4:	9401      	str	r4, [sp, #4]
 80083f6:	4626      	mov	r6, r4
 80083f8:	4625      	mov	r5, r4
 80083fa:	46a0      	mov	r8, r4
 80083fc:	4627      	mov	r7, r4
 80083fe:	46a2      	mov	sl, r4
 8008400:	e042      	b.n	8008488 <neai_anomalydetection_learn+0x1298>
 8008402:	f1be 0f02 	cmp.w	lr, #2
 8008406:	4613      	mov	r3, r2
 8008408:	d052      	beq.n	80084b0 <neai_anomalydetection_learn+0x12c0>
 800840a:	ebc3 09c3 	rsb	r9, r3, r3, lsl #3
 800840e:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8008412:	eb0b 09c9 	add.w	r9, fp, r9, lsl #3
 8008416:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 800841a:	f8d9 9018 	ldr.w	r9, [r9, #24]
 800841e:	6992      	ldr	r2, [r2, #24]
 8008420:	4591      	cmp	r9, r2
 8008422:	d36c      	bcc.n	80084fe <neai_anomalydetection_learn+0x130e>
 8008424:	f1be 0f03 	cmp.w	lr, #3
 8008428:	461a      	mov	r2, r3
 800842a:	460b      	mov	r3, r1
 800842c:	d06d      	beq.n	800850a <neai_anomalydetection_learn+0x131a>
 800842e:	ebc3 09c3 	rsb	r9, r3, r3, lsl #3
 8008432:	ebcc 01cc 	rsb	r1, ip, ip, lsl #3
 8008436:	eb0b 09c9 	add.w	r9, fp, r9, lsl #3
 800843a:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 800843e:	f8d9 9018 	ldr.w	r9, [r9, #24]
 8008442:	6989      	ldr	r1, [r1, #24]
 8008444:	4589      	cmp	r9, r1
 8008446:	d362      	bcc.n	800850e <neai_anomalydetection_learn+0x131e>
 8008448:	f1be 0f04 	cmp.w	lr, #4
 800844c:	4619      	mov	r1, r3
 800844e:	4663      	mov	r3, ip
 8008450:	d063      	beq.n	800851a <neai_anomalydetection_learn+0x132a>
 8008452:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8008456:	ebc3 09c3 	rsb	r9, r3, r3, lsl #3
 800845a:	eb0b 09c9 	add.w	r9, fp, r9, lsl #3
 800845e:	eb0b 0ccc 	add.w	ip, fp, ip, lsl #3
 8008462:	f8d9 9018 	ldr.w	r9, [r9, #24]
 8008466:	f8dc c018 	ldr.w	ip, [ip, #24]
 800846a:	9000      	str	r0, [sp, #0]
 800846c:	45e1      	cmp	r9, ip
 800846e:	bf26      	itte	cs
 8008470:	4618      	movcs	r0, r3
 8008472:	9b00      	ldrcs	r3, [sp, #0]
 8008474:	f04f 0a01 	movcc.w	sl, #1
 8008478:	4684      	mov	ip, r0
 800847a:	bf38      	it	cc
 800847c:	46d0      	movcc	r8, sl
 800847e:	4618      	mov	r0, r3
 8008480:	3701      	adds	r7, #1
 8008482:	b2fb      	uxtb	r3, r7
 8008484:	459e      	cmp	lr, r3
 8008486:	d918      	bls.n	80084ba <neai_anomalydetection_learn+0x12ca>
 8008488:	ebc2 09c2 	rsb	r9, r2, r2, lsl #3
 800848c:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8008490:	eb0b 09c9 	add.w	r9, fp, r9, lsl #3
 8008494:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8008498:	f8d9 9018 	ldr.w	r9, [r9, #24]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	4599      	cmp	r9, r3
 80084a0:	d9af      	bls.n	8008402 <neai_anomalydetection_learn+0x1212>
 80084a2:	2601      	movs	r6, #1
 80084a4:	f1be 0f02 	cmp.w	lr, #2
 80084a8:	462b      	mov	r3, r5
 80084aa:	9601      	str	r6, [sp, #4]
 80084ac:	4615      	mov	r5, r2
 80084ae:	d1ac      	bne.n	800840a <neai_anomalydetection_learn+0x121a>
 80084b0:	3701      	adds	r7, #1
 80084b2:	461a      	mov	r2, r3
 80084b4:	b2fb      	uxtb	r3, r7
 80084b6:	459e      	cmp	lr, r3
 80084b8:	d8e6      	bhi.n	8008488 <neai_anomalydetection_learn+0x1298>
 80084ba:	46d1      	mov	r9, sl
 80084bc:	f1b8 0f00 	cmp.w	r8, #0
 80084c0:	d001      	beq.n	80084c6 <neai_anomalydetection_learn+0x12d6>
 80084c2:	f88b c013 	strb.w	ip, [fp, #19]
 80084c6:	f1b9 0f00 	cmp.w	r9, #0
 80084ca:	d001      	beq.n	80084d0 <neai_anomalydetection_learn+0x12e0>
 80084cc:	f88b 0014 	strb.w	r0, [fp, #20]
 80084d0:	9b01      	ldr	r3, [sp, #4]
 80084d2:	b10b      	cbz	r3, 80084d8 <neai_anomalydetection_learn+0x12e8>
 80084d4:	f88b 5010 	strb.w	r5, [fp, #16]
 80084d8:	b10e      	cbz	r6, 80084de <neai_anomalydetection_learn+0x12ee>
 80084da:	f88b 2011 	strb.w	r2, [fp, #17]
 80084de:	b10c      	cbz	r4, 80084e4 <neai_anomalydetection_learn+0x12f4>
 80084e0:	f88b 1012 	strb.w	r1, [fp, #18]
 80084e4:	9b08      	ldr	r3, [sp, #32]
 80084e6:	2b0a      	cmp	r3, #10
 80084e8:	bf34      	ite	cc
 80084ea:	237e      	movcc	r3, #126	; 0x7e
 80084ec:	237f      	movcs	r3, #127	; 0x7f
 80084ee:	4618      	mov	r0, r3
 80084f0:	f88b 3159 	strb.w	r3, [fp, #345]	; 0x159
 80084f4:	b00f      	add	sp, #60	; 0x3c
 80084f6:	ecbd 8b10 	vpop	{d8-d15}
 80084fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fe:	2401      	movs	r4, #1
 8008500:	f1be 0f03 	cmp.w	lr, #3
 8008504:	460a      	mov	r2, r1
 8008506:	4626      	mov	r6, r4
 8008508:	d191      	bne.n	800842e <neai_anomalydetection_learn+0x123e>
 800850a:	4619      	mov	r1, r3
 800850c:	e7b8      	b.n	8008480 <neai_anomalydetection_learn+0x1290>
 800850e:	2401      	movs	r4, #1
 8008510:	f1be 0f04 	cmp.w	lr, #4
 8008514:	4661      	mov	r1, ip
 8008516:	46a0      	mov	r8, r4
 8008518:	d19b      	bne.n	8008452 <neai_anomalydetection_learn+0x1262>
 800851a:	469c      	mov	ip, r3
 800851c:	e7b0      	b.n	8008480 <neai_anomalydetection_learn+0x1290>
 800851e:	bf00      	nop
 8008520:	00000000 	.word	0x00000000
 8008524:	3ff00000 	.word	0x3ff00000
 8008528:	322bcc77 	.word	0x322bcc77
 800852c:	50bdfd64 	.word	0x50bdfd64
 8008530:	00022110 	.word	0x00022110
 8008534:	00088440 	.word	0x00088440
 8008538:	437f0000 	.word	0x437f0000
 800853c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008540:	f7ff ba59 	b.w	80079f6 <neai_anomalydetection_learn+0x806>
 8008544:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8008538 <neai_anomalydetection_learn+0x1348>
 8008548:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800854c:	ee87 aa27 	vdiv.f32	s20, s14, s15
 8008550:	ee16 0a90 	vmov	r0, s13
 8008554:	ee17 3a90 	vmov	r3, s15
 8008558:	ba02      	rev	r2, r0
 800855a:	2800      	cmp	r0, #0
 800855c:	f000 8262 	beq.w	8008a24 <neai_anomalydetection_learn+0x1834>
 8008560:	2100      	movs	r1, #0
 8008562:	1e46      	subs	r6, r0, #1
 8008564:	4030      	ands	r0, r6
 8008566:	f101 0101 	add.w	r1, r1, #1
 800856a:	d1fa      	bne.n	8008562 <neai_anomalydetection_learn+0x1372>
 800856c:	e645      	b.n	80081fa <neai_anomalydetection_learn+0x100a>
 800856e:	f8df 93e4 	ldr.w	r9, [pc, #996]	; 8008954 <neai_anomalydetection_learn+0x1764>
 8008572:	9904      	ldr	r1, [sp, #16]
 8008574:	9801      	ldr	r0, [sp, #4]
 8008576:	464b      	mov	r3, r9
 8008578:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800857c:	ee07 4a90 	vmov	s15, r4
 8008580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008584:	eeb0 7a48 	vmov.f32	s14, s16
 8008588:	eea7 7aa8 	vfma.f32	s14, s15, s17
 800858c:	eca3 7a01 	vstmia	r3!, {s14}
 8008590:	4283      	cmp	r3, r0
 8008592:	d1f1      	bne.n	8008578 <neai_anomalydetection_learn+0x1388>
 8008594:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8008598:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 800859c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80085a0:	eddf 7ae9 	vldr	s15, [pc, #932]	; 8008948 <neai_anomalydetection_learn+0x1758>
 80085a4:	4fe9      	ldr	r7, [pc, #932]	; (800894c <neai_anomalydetection_learn+0x175c>)
 80085a6:	ee87 9a27 	vdiv.f32	s18, s14, s15
 80085aa:	4492      	add	sl, r2
 80085ac:	f10a 33ff 	add.w	r3, sl, #4294967295
 80085b0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80085b4:	9309      	str	r3, [sp, #36]	; 0x24
 80085b6:	461a      	mov	r2, r3
 80085b8:	9100      	str	r1, [sp, #0]
 80085ba:	463b      	mov	r3, r7
 80085bc:	00ec      	lsls	r4, r5, #3
 80085be:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80085c2:	ee07 0a90 	vmov	s15, r0
 80085c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085ca:	ee67 7a89 	vmul.f32	s15, s15, s18
 80085ce:	ece3 7a01 	vstmia	r3!, {s15}
 80085d2:	428b      	cmp	r3, r1
 80085d4:	d1f3      	bne.n	80085be <neai_anomalydetection_learn+0x13ce>
 80085d6:	ed9f 6ade 	vldr	s12, [pc, #888]	; 8008950 <neai_anomalydetection_learn+0x1760>
 80085da:	f8df 8394 	ldr.w	r8, [pc, #916]	; 8008970 <neai_anomalydetection_learn+0x1780>
 80085de:	4add      	ldr	r2, [pc, #884]	; (8008954 <neai_anomalydetection_learn+0x1764>)
 80085e0:	eef0 4a46 	vmov.f32	s9, s12
 80085e4:	eeb0 5a46 	vmov.f32	s10, s12
 80085e8:	eef0 6a46 	vmov.f32	s13, s12
 80085ec:	eef0 5a46 	vmov.f32	s11, s12
 80085f0:	f108 0148 	add.w	r1, r8, #72	; 0x48
 80085f4:	4643      	mov	r3, r8
 80085f6:	ecb3 7a01 	vldmia	r3!, {s14}
 80085fa:	ecf2 7a01 	vldmia	r2!, {s15}
 80085fe:	428b      	cmp	r3, r1
 8008600:	eee7 4a07 	vfma.f32	s9, s14, s14
 8008604:	eea7 5a27 	vfma.f32	s10, s14, s15
 8008608:	eea7 6aa7 	vfma.f32	s12, s15, s15
 800860c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8008610:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008614:	d1ef      	bne.n	80085f6 <neai_anomalydetection_learn+0x1406>
 8008616:	ee25 0ae5 	vnmul.f32	s0, s11, s11
 800861a:	ee26 4ae6 	vnmul.f32	s8, s13, s13
 800861e:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8008622:	eef0 7a40 	vmov.f32	s15, s0
 8008626:	eee4 7a87 	vfma.f32	s15, s9, s14
 800862a:	eea6 4a07 	vfma.f32	s8, s12, s14
 800862e:	ee66 6ae5 	vnmul.f32	s13, s13, s11
 8008632:	ee27 0a84 	vmul.f32	s0, s15, s8
 8008636:	eee5 6a07 	vfma.f32	s13, s10, s14
 800863a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800863e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008642:	eef1 9ac0 	vsqrt.f32	s19, s0
 8008646:	f100 820d 	bmi.w	8008a64 <neai_anomalydetection_learn+0x1874>
 800864a:	eec6 4aa9 	vdiv.f32	s9, s13, s19
 800864e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008652:	eef4 4ae7 	vcmpe.f32	s9, s15
 8008656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800865a:	f200 81b0 	bhi.w	80089be <neai_anomalydetection_learn+0x17ce>
 800865e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8008662:	eef4 4ae7 	vcmpe.f32	s9, s15
 8008666:	eddf 7aba 	vldr	s15, [pc, #744]	; 8008950 <neai_anomalydetection_learn+0x1760>
 800866a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800866e:	bfb8      	it	lt
 8008670:	eef0 4a67 	vmovlt.f32	s9, s15
 8008674:	ed9f 6ab6 	vldr	s12, [pc, #728]	; 8008950 <neai_anomalydetection_learn+0x1760>
 8008678:	f8df e2f8 	ldr.w	lr, [pc, #760]	; 8008974 <neai_anomalydetection_learn+0x1784>
 800867c:	f8df c2f8 	ldr.w	ip, [pc, #760]	; 8008978 <neai_anomalydetection_learn+0x1788>
 8008680:	ed9f 4ab5 	vldr	s8, [pc, #724]	; 8008958 <neai_anomalydetection_learn+0x1768>
 8008684:	eef0 5a46 	vmov.f32	s11, s12
 8008688:	2001      	movs	r0, #1
 800868a:	ecf7 7a01 	vldmia	r7!, {s15}
 800868e:	ecb8 7a01 	vldmia	r8!, {s14}
 8008692:	ecf9 6a01 	vldmia	r9!, {s13}
 8008696:	eebc 5ae7 	vcvt.u32.f32	s10, s15
 800869a:	ed8d 5a02 	vstr	s10, [sp, #8]
 800869e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80086a2:	461a      	mov	r2, r3
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 8190 	beq.w	80089ca <neai_anomalydetection_learn+0x17da>
 80086aa:	2600      	movs	r6, #0
 80086ac:	f102 3aff 	add.w	sl, r2, #4294967295
 80086b0:	ea12 020a 	ands.w	r2, r2, sl
 80086b4:	4631      	mov	r1, r6
 80086b6:	f106 0601 	add.w	r6, r6, #1
 80086ba:	d1f7      	bne.n	80086ac <neai_anomalydetection_learn+0x14bc>
 80086bc:	eb03 2383 	add.w	r3, r3, r3, lsl #10
 80086c0:	ea0e 0643 	and.w	r6, lr, r3, lsl #1
 80086c4:	ea0c 1343 	and.w	r3, ip, r3, lsl #5
 80086c8:	4333      	orrs	r3, r6
 80086ca:	eb03 2603 	add.w	r6, r3, r3, lsl #8
 80086ce:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 80086d2:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 80086d6:	f3c3 4607 	ubfx	r6, r3, #16, #8
 80086da:	d00a      	beq.n	80086f2 <neai_anomalydetection_learn+0x1502>
 80086dc:	1e73      	subs	r3, r6, #1
 80086de:	401e      	ands	r6, r3
 80086e0:	4692      	mov	sl, r2
 80086e2:	f102 0201 	add.w	r2, r2, #1
 80086e6:	d1f9      	bne.n	80086dc <neai_anomalydetection_learn+0x14ec>
 80086e8:	eba1 060a 	sub.w	r6, r1, sl
 80086ec:	fab6 f686 	clz	r6, r6
 80086f0:	0976      	lsrs	r6, r6, #5
 80086f2:	ea4f 13c6 	mov.w	r3, r6, lsl #7
 80086f6:	eba3 0306 	sub.w	r3, r3, r6
 80086fa:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80086fe:	4433      	add	r3, r6
 8008700:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 8008704:	4433      	add	r3, r6
 8008706:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800870a:	eba3 0306 	sub.w	r3, r3, r6
 800870e:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8008712:	ea6f 0303 	mvn.w	r3, r3
 8008716:	ba1b      	rev	r3, r3
 8008718:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800871a:	eb03 2183 	add.w	r1, r3, r3, lsl #10
 800871e:	ea0e 0241 	and.w	r2, lr, r1, lsl #1
 8008722:	ea0c 1141 	and.w	r1, ip, r1, lsl #5
 8008726:	430a      	orrs	r2, r1
 8008728:	eb02 2102 	add.w	r1, r2, r2, lsl #8
 800872c:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8008730:	ee17 1a90 	vmov	r1, s15
 8008734:	2b00      	cmp	r3, #0
 8008736:	bf08      	it	eq
 8008738:	3101      	addeq	r1, #1
 800873a:	eba3 4312 	sub.w	r3, r3, r2, lsr #16
 800873e:	fa51 f383 	uxtab	r3, r1, r3
 8008742:	ee07 3a90 	vmov	s15, r3
 8008746:	eef5 7a40 	vcmp.f32	s15, #0.0
 800874a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800874e:	f000 8139 	beq.w	80089c4 <neai_anomalydetection_learn+0x17d4>
 8008752:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008756:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800875a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800875e:	bf48      	it	mi
 8008760:	eeb1 7a47 	vnegmi.f32	s14, s14
 8008764:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008768:	ee07 0a90 	vmov	s15, r0
 800876c:	ee36 5ae5 	vsub.f32	s10, s13, s11
 8008770:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008774:	eef4 6a46 	vcmp.f32	s13, s12
 8008778:	eec5 7a07 	vdiv.f32	s15, s10, s14
 800877c:	3001      	adds	r0, #1
 800877e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008782:	bfc8      	it	gt
 8008784:	eeb0 6a66 	vmovgt.f32	s12, s13
 8008788:	2813      	cmp	r0, #19
 800878a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800878e:	f47f af7c 	bne.w	800868a <neai_anomalydetection_learn+0x149a>
 8008792:	f8db 713c 	ldr.w	r7, [fp, #316]	; 0x13c
 8008796:	eddb 6a4d 	vldr	s13, [fp, #308]	; 0x134
 800879a:	ed9b 5a4c 	vldr	s10, [fp, #304]	; 0x130
 800879e:	3701      	adds	r7, #1
 80087a0:	ee07 7a90 	vmov	s15, r7
 80087a4:	ee75 5ae6 	vsub.f32	s11, s11, s13
 80087a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80087ac:	ee74 4ac5 	vsub.f32	s9, s9, s10
 80087b0:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80087b4:	eec4 9a87 	vdiv.f32	s19, s9, s14
 80087b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087bc:	ee79 9a85 	vadd.f32	s19, s19, s10
 80087c0:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80087c4:	edcb 9a4c 	vstr	s19, [fp, #304]	; 0x130
 80087c8:	ee16 3a90 	vmov	r3, s13
 80087cc:	ba1a      	rev	r2, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f000 8125 	beq.w	8008a1e <neai_anomalydetection_learn+0x182e>
 80087d4:	2100      	movs	r1, #0
 80087d6:	1e58      	subs	r0, r3, #1
 80087d8:	4003      	ands	r3, r0
 80087da:	f101 0101 	add.w	r1, r1, #1
 80087de:	d1fa      	bne.n	80087d6 <neai_anomalydetection_learn+0x15e6>
 80087e0:	2a00      	cmp	r2, #0
 80087e2:	f000 811a 	beq.w	8008a1a <neai_anomalydetection_learn+0x182a>
 80087e6:	2000      	movs	r0, #0
 80087e8:	1e53      	subs	r3, r2, #1
 80087ea:	401a      	ands	r2, r3
 80087ec:	f100 0001 	add.w	r0, r0, #1
 80087f0:	d1fa      	bne.n	80087e8 <neai_anomalydetection_learn+0x15f8>
 80087f2:	1a09      	subs	r1, r1, r0
 80087f4:	fab1 f181 	clz	r1, r1
 80087f8:	0949      	lsrs	r1, r1, #5
 80087fa:	ea4f 03c1 	mov.w	r3, r1, lsl #3
 80087fe:	440b      	add	r3, r1
 8008800:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008804:	eba3 0301 	sub.w	r3, r3, r1
 8008808:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800880c:	eba3 0301 	sub.w	r3, r3, r1
 8008810:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008814:	440b      	add	r3, r1
 8008816:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 800881a:	440b      	add	r3, r1
 800881c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008820:	eba3 0301 	sub.w	r3, r3, r1
 8008824:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8008828:	ea6f 0303 	mvn.w	r3, r3
 800882c:	ba1b      	rev	r3, r3
 800882e:	eddb 6a4e 	vldr	s13, [fp, #312]	; 0x138
 8008832:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008834:	4e49      	ldr	r6, [pc, #292]	; (800895c <neai_anomalydetection_learn+0x176c>)
 8008836:	494a      	ldr	r1, [pc, #296]	; (8008960 <neai_anomalydetection_learn+0x1770>)
 8008838:	f8cb 713c 	str.w	r7, [fp, #316]	; 0x13c
 800883c:	ee36 6a66 	vsub.f32	s12, s12, s13
 8008840:	fba6 2603 	umull	r2, r6, r6, r3
 8008844:	ee86 aa07 	vdiv.f32	s20, s12, s14
 8008848:	4a46      	ldr	r2, [pc, #280]	; (8008964 <neai_anomalydetection_learn+0x1774>)
 800884a:	08f6      	lsrs	r6, r6, #3
 800884c:	fba1 0103 	umull	r0, r1, r1, r3
 8008850:	fba2 c203 	umull	ip, r2, r2, r3
 8008854:	eb06 0086 	add.w	r0, r6, r6, lsl #2
 8008858:	0889      	lsrs	r1, r1, #2
 800885a:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 800885e:	0852      	lsrs	r2, r2, #1
 8008860:	ebc0 0043 	rsb	r0, r0, r3, lsl #1
 8008864:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008868:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800886c:	1a9a      	subs	r2, r3, r2
 800886e:	1a40      	subs	r0, r0, r1
 8008870:	ee17 3a90 	vmov	r3, s15
 8008874:	ee3a aa26 	vadd.f32	s20, s20, s13
 8008878:	4410      	add	r0, r2
 800887a:	4418      	add	r0, r3
 800887c:	ed8b aa4e 	vstr	s20, [fp, #312]	; 0x138
 8008880:	f8cb 0134 	str.w	r0, [fp, #308]	; 0x134
 8008884:	2f00      	cmp	r7, #0
 8008886:	f43f a979 	beq.w	8007b7c <neai_anomalydetection_learn+0x98c>
 800888a:	eddb aa50 	vldr	s21, [fp, #320]	; 0x140
 800888e:	ee07 0a90 	vmov	s15, r0
 8008892:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8008896:	ee17 0a90 	vmov	r0, s15
 800889a:	f7f7 fe6d 	bl	8000578 <__aeabi_f2d>
 800889e:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8008930 <neai_anomalydetection_learn+0x1740>
 80088a2:	ec41 0b10 	vmov	d0, r0, r1
 80088a6:	f005 f90f 	bl	800dac8 <fmax>
 80088aa:	ec51 0b10 	vmov	r0, r1, d0
 80088ae:	f7f8 f9b3 	bl	8000c18 <__aeabi_d2f>
 80088b2:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80088b6:	ee00 0a10 	vmov	s0, r0
 80088ba:	f005 f972 	bl	800dba2 <fminf>
 80088be:	ee6a 7a2a 	vmul.f32	s15, s20, s21
 80088c2:	ed8b 0a57 	vstr	s0, [fp, #348]	; 0x15c
 80088c6:	ee17 0a90 	vmov	r0, s15
 80088ca:	f7f7 fe55 	bl	8000578 <__aeabi_f2d>
 80088ce:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8008938 <neai_anomalydetection_learn+0x1748>
 80088d2:	ec41 0b10 	vmov	d0, r0, r1
 80088d6:	f005 f8f7 	bl	800dac8 <fmax>
 80088da:	ec51 0b10 	vmov	r0, r1, d0
 80088de:	f7f8 f99b 	bl	8000c18 <__aeabi_d2f>
 80088e2:	eddf 0a21 	vldr	s1, [pc, #132]	; 8008968 <neai_anomalydetection_learn+0x1778>
 80088e6:	ee00 0a10 	vmov	s0, r0
 80088ea:	f005 f95a 	bl	800dba2 <fminf>
 80088ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80088f2:	ee79 9ae7 	vsub.f32	s19, s19, s15
 80088f6:	ed8b 0a58 	vstr	s0, [fp, #352]	; 0x160
 80088fa:	eeea 7aa9 	vfma.f32	s15, s21, s19
 80088fe:	ee17 0a90 	vmov	r0, s15
 8008902:	f7f7 fe39 	bl	8000578 <__aeabi_f2d>
 8008906:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8008940 <neai_anomalydetection_learn+0x1750>
 800890a:	ec41 0b10 	vmov	d0, r0, r1
 800890e:	f005 f8db 	bl	800dac8 <fmax>
 8008912:	ec51 0b10 	vmov	r0, r1, d0
 8008916:	f7f8 f97f 	bl	8000c18 <__aeabi_d2f>
 800891a:	eddf 0a14 	vldr	s1, [pc, #80]	; 800896c <neai_anomalydetection_learn+0x177c>
 800891e:	ee00 0a10 	vmov	s0, r0
 8008922:	f005 f93e 	bl	800dba2 <fminf>
 8008926:	ed8b 0a59 	vstr	s0, [fp, #356]	; 0x164
 800892a:	e029      	b.n	8008980 <neai_anomalydetection_learn+0x1790>
 800892c:	f3af 8000 	nop.w
 8008930:	40000000 	.word	0x40000000
 8008934:	3ff33333 	.word	0x3ff33333
 8008938:	c0000000 	.word	0xc0000000
 800893c:	400ccccc 	.word	0x400ccccc
 8008940:	00000000 	.word	0x00000000
 8008944:	3fe00000 	.word	0x3fe00000
 8008948:	437f0000 	.word	0x437f0000
 800894c:	20001b38 	.word	0x20001b38
 8008950:	00000000 	.word	0x00000000
 8008954:	20001af0 	.word	0x20001af0
 8008958:	42c80000 	.word	0x42c80000
 800895c:	ba2e8ba3 	.word	0xba2e8ba3
 8008960:	cccccccd 	.word	0xcccccccd
 8008964:	aaaaaaab 	.word	0xaaaaaaab
 8008968:	42480000 	.word	0x42480000
 800896c:	3f7ae148 	.word	0x3f7ae148
 8008970:	200010a8 	.word	0x200010a8
 8008974:	00022110 	.word	0x00022110
 8008978:	00088440 	.word	0x00088440
 800897c:	437f0000 	.word	0x437f0000
 8008980:	f7ff b8fc 	b.w	8007b7c <neai_anomalydetection_learn+0x98c>
 8008984:	ed9b 8a0d 	vldr	s16, [fp, #52]	; 0x34
 8008988:	eddb 7a0c 	vldr	s15, [fp, #48]	; 0x30
 800898c:	f8db 3018 	ldr.w	r3, [fp, #24]
 8008990:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800897c <neai_anomalydetection_learn+0x178c>
 8008994:	9305      	str	r3, [sp, #20]
 8008996:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800899a:	4b3f      	ldr	r3, [pc, #252]	; (8008a98 <neai_anomalydetection_learn+0x18a8>)
 800899c:	9301      	str	r3, [sp, #4]
 800899e:	f10b 031b 	add.w	r3, fp, #27
 80089a2:	4615      	mov	r5, r2
 80089a4:	9206      	str	r2, [sp, #24]
 80089a6:	eec7 8a87 	vdiv.f32	s17, s15, s14
 80089aa:	f88b 400c 	strb.w	r4, [fp, #12]
 80089ae:	9403      	str	r4, [sp, #12]
 80089b0:	9407      	str	r4, [sp, #28]
 80089b2:	2220      	movs	r2, #32
 80089b4:	f10b 0a18 	add.w	sl, fp, #24
 80089b8:	9304      	str	r3, [sp, #16]
 80089ba:	f7ff b8ca 	b.w	8007b52 <neai_anomalydetection_learn+0x962>
 80089be:	eddf 4a37 	vldr	s9, [pc, #220]	; 8008a9c <neai_anomalydetection_learn+0x18ac>
 80089c2:	e657      	b.n	8008674 <neai_anomalydetection_learn+0x1484>
 80089c4:	eef0 6a44 	vmov.f32	s13, s8
 80089c8:	e6ce      	b.n	8008768 <neai_anomalydetection_learn+0x1578>
 80089ca:	2601      	movs	r6, #1
 80089cc:	e691      	b.n	80086f2 <neai_anomalydetection_learn+0x1502>
 80089ce:	461a      	mov	r2, r3
 80089d0:	f7fe bf9f 	b.w	8007912 <neai_anomalydetection_learn+0x722>
 80089d4:	f89b 500e 	ldrb.w	r5, [fp, #14]
 80089d8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8008aa0 <neai_anomalydetection_learn+0x18b0>
 80089dc:	9506      	str	r5, [sp, #24]
 80089de:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 80089e2:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80089e6:	ed93 8a0d 	vldr	s16, [r3, #52]	; 0x34
 80089ea:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80089ee:	ebc5 09c5 	rsb	r9, r5, r5, lsl #3
 80089f2:	2200      	movs	r2, #0
 80089f4:	eb0a 01c9 	add.w	r1, sl, r9, lsl #3
 80089f8:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80089fc:	619a      	str	r2, [r3, #24]
 80089fe:	1ccb      	adds	r3, r1, #3
 8008a00:	9304      	str	r3, [sp, #16]
 8008a02:	9b03      	ldr	r3, [sp, #12]
 8008a04:	9205      	str	r2, [sp, #20]
 8008a06:	eec7 8a87 	vdiv.f32	s17, s15, s14
 8008a0a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8008a0e:	9307      	str	r3, [sp, #28]
 8008a10:	f7ff b89d 	b.w	8007b4e <neai_anomalydetection_learn+0x95e>
 8008a14:	4610      	mov	r0, r2
 8008a16:	f7ff bbf9 	b.w	800820c <neai_anomalydetection_learn+0x101c>
 8008a1a:	4610      	mov	r0, r2
 8008a1c:	e6e9      	b.n	80087f2 <neai_anomalydetection_learn+0x1602>
 8008a1e:	ee16 1a90 	vmov	r1, s13
 8008a22:	e6dd      	b.n	80087e0 <neai_anomalydetection_learn+0x15f0>
 8008a24:	ee16 1a90 	vmov	r1, s13
 8008a28:	f7ff bbe7 	b.w	80081fa <neai_anomalydetection_learn+0x100a>
 8008a2c:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8008a30:	9109      	str	r1, [sp, #36]	; 0x24
 8008a32:	f005 f8ed 	bl	800dc10 <sqrtf>
 8008a36:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008a3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a3c:	f7ff b910 	b.w	8007c60 <neai_anomalydetection_learn+0xa70>
 8008a40:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 8008a44:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
 8008a48:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 8008a4c:	f005 f8e0 	bl	800dc10 <sqrtf>
 8008a50:	edd4 1a00 	vldr	s3, [r4]
 8008a54:	ed9d 7a0b 	vldr	s14, [sp, #44]	; 0x2c
 8008a58:	ed9d 6a0a 	vldr	s12, [sp, #40]	; 0x28
 8008a5c:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8008a60:	f7fe bfb4 	b.w	80079cc <neai_anomalydetection_learn+0x7dc>
 8008a64:	edcd 6a02 	vstr	s13, [sp, #8]
 8008a68:	f005 f8d2 	bl	800dc10 <sqrtf>
 8008a6c:	2338      	movs	r3, #56	; 0x38
 8008a6e:	fb03 b305 	mla	r3, r3, r5, fp
 8008a72:	ed93 8a0d 	vldr	s16, [r3, #52]	; 0x34
 8008a76:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008a7a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8008aa0 <neai_anomalydetection_learn+0x18b0>
 8008a7e:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	eddd 6a02 	vldr	s13, [sp, #8]
 8008a88:	9305      	str	r3, [sp, #20]
 8008a8a:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8008a8e:	ee86 9a07 	vdiv.f32	s18, s12, s14
 8008a92:	eec7 8a87 	vdiv.f32	s17, s15, s14
 8008a96:	e5d8      	b.n	800864a <neai_anomalydetection_learn+0x145a>
 8008a98:	20001b38 	.word	0x20001b38
 8008a9c:	00000000 	.word	0x00000000
 8008aa0:	437f0000 	.word	0x437f0000
 8008aa4:	00000000 	.word	0x00000000

08008aa8 <neai_anomalydetection_detect>:
 8008aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aac:	4c64      	ldr	r4, [pc, #400]	; (8008c40 <neai_anomalydetection_detect+0x198>)
 8008aae:	f894 3159 	ldrb.w	r3, [r4, #345]	; 0x159
 8008ab2:	ed2d 8b0a 	vpush	{d8-d12}
 8008ab6:	4688      	mov	r8, r1
 8008ab8:	f1a3 027c 	sub.w	r2, r3, #124	; 0x7c
 8008abc:	21ff      	movs	r1, #255	; 0xff
 8008abe:	2a02      	cmp	r2, #2
 8008ac0:	b085      	sub	sp, #20
 8008ac2:	f888 1000 	strb.w	r1, [r8]
 8008ac6:	d90c      	bls.n	8008ae2 <neai_anomalydetection_detect+0x3a>
 8008ac8:	2b80      	cmp	r3, #128	; 0x80
 8008aca:	d00a      	beq.n	8008ae2 <neai_anomalydetection_detect+0x3a>
 8008acc:	f8b4 315a 	ldrh.w	r3, [r4, #346]	; 0x15a
 8008ad0:	2b09      	cmp	r3, #9
 8008ad2:	d90c      	bls.n	8008aee <neai_anomalydetection_detect+0x46>
 8008ad4:	f7fd ff16 	bl	8006904 <funchad53.constprop.0>
 8008ad8:	7b25      	ldrb	r5, [r4, #12]
 8008ada:	b98d      	cbnz	r5, 8008b00 <neai_anomalydetection_detect+0x58>
 8008adc:	f888 5000 	strb.w	r5, [r8]
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	b005      	add	sp, #20
 8008ae6:	ecbd 8b0a 	vpop	{d8-d12}
 8008aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aee:	237e      	movs	r3, #126	; 0x7e
 8008af0:	4618      	mov	r0, r3
 8008af2:	f884 3159 	strb.w	r3, [r4, #345]	; 0x159
 8008af6:	b005      	add	sp, #20
 8008af8:	ecbd 8b0a 	vpop	{d8-d12}
 8008afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b00:	4b50      	ldr	r3, [pc, #320]	; (8008c44 <neai_anomalydetection_detect+0x19c>)
 8008b02:	edd3 7a00 	vldr	s15, [r3]
 8008b06:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8008b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b0e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8008b12:	ee17 3a10 	vmov	r3, s14
 8008b16:	ba1a      	rev	r2, r3
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f000 8303 	beq.w	8009124 <neai_anomalydetection_detect+0x67c>
 8008b1e:	2000      	movs	r0, #0
 8008b20:	1e59      	subs	r1, r3, #1
 8008b22:	400b      	ands	r3, r1
 8008b24:	f100 0001 	add.w	r0, r0, #1
 8008b28:	d1fa      	bne.n	8008b20 <neai_anomalydetection_detect+0x78>
 8008b2a:	2a00      	cmp	r2, #0
 8008b2c:	f000 82f8 	beq.w	8009120 <neai_anomalydetection_detect+0x678>
 8008b30:	2100      	movs	r1, #0
 8008b32:	1e53      	subs	r3, r2, #1
 8008b34:	401a      	ands	r2, r3
 8008b36:	f101 0101 	add.w	r1, r1, #1
 8008b3a:	d1fa      	bne.n	8008b32 <neai_anomalydetection_detect+0x8a>
 8008b3c:	1a40      	subs	r0, r0, r1
 8008b3e:	fab0 f080 	clz	r0, r0
 8008b42:	0940      	lsrs	r0, r0, #5
 8008b44:	ea4f 0380 	mov.w	r3, r0, lsl #2
 8008b48:	eba3 0300 	sub.w	r3, r3, r0
 8008b4c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008b50:	eba3 0300 	sub.w	r3, r3, r0
 8008b54:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008b58:	eba3 0300 	sub.w	r3, r3, r0
 8008b5c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008b60:	4403      	add	r3, r0
 8008b62:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 8008b66:	4403      	add	r3, r0
 8008b68:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008b6c:	eba3 0300 	sub.w	r3, r3, r0
 8008b70:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8008b74:	ea6f 0303 	mvn.w	r3, r3
 8008b78:	ba1b      	rev	r3, r3
 8008b7a:	88db      	ldrh	r3, [r3, #6]
 8008b7c:	111f      	asrs	r7, r3, #4
 8008b7e:	f003 020f 	and.w	r2, r3, #15
 8008b82:	f000 82cb 	beq.w	800911c <neai_anomalydetection_detect+0x674>
 8008b86:	463b      	mov	r3, r7
 8008b88:	2100      	movs	r1, #0
 8008b8a:	1e58      	subs	r0, r3, #1
 8008b8c:	4003      	ands	r3, r0
 8008b8e:	f101 0101 	add.w	r1, r1, #1
 8008b92:	d1fa      	bne.n	8008b8a <neai_anomalydetection_detect+0xe2>
 8008b94:	b182      	cbz	r2, 8008bb8 <neai_anomalydetection_detect+0x110>
 8008b96:	4613      	mov	r3, r2
 8008b98:	2600      	movs	r6, #0
 8008b9a:	1e58      	subs	r0, r3, #1
 8008b9c:	4003      	ands	r3, r0
 8008b9e:	f106 0601 	add.w	r6, r6, #1
 8008ba2:	d1fa      	bne.n	8008b9a <neai_anomalydetection_detect+0xf2>
 8008ba4:	fb02 f207 	mul.w	r2, r2, r7
 8008ba8:	4431      	add	r1, r6
 8008baa:	b12a      	cbz	r2, 8008bb8 <neai_anomalydetection_detect+0x110>
 8008bac:	1e50      	subs	r0, r2, #1
 8008bae:	4002      	ands	r2, r0
 8008bb0:	f103 0301 	add.w	r3, r3, #1
 8008bb4:	d1fa      	bne.n	8008bac <neai_anomalydetection_detect+0x104>
 8008bb6:	4419      	add	r1, r3
 8008bb8:	ee17 3a90 	vmov	r3, s15
 8008bbc:	3907      	subs	r1, #7
 8008bbe:	4419      	add	r1, r3
 8008bc0:	ee07 1a90 	vmov	s15, r1
 8008bc4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8008c48 <neai_anomalydetection_detect+0x1a0>
 8008bc8:	9103      	str	r1, [sp, #12]
 8008bca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bd2:	db07      	blt.n	8008be4 <neai_anomalydetection_detect+0x13c>
 8008bd4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008c4c <neai_anomalydetection_detect+0x1a4>
 8008bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008be0:	f240 8290 	bls.w	8009104 <neai_anomalydetection_detect+0x65c>
 8008be4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bec:	dd0a      	ble.n	8008c04 <neai_anomalydetection_detect+0x15c>
 8008bee:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8008c48 <neai_anomalydetection_detect+0x1a0>
 8008bf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bfa:	f140 8286 	bpl.w	800910a <neai_anomalydetection_detect+0x662>
 8008bfe:	4b14      	ldr	r3, [pc, #80]	; (8008c50 <neai_anomalydetection_detect+0x1a8>)
 8008c00:	ed83 7a00 	vstr	s14, [r3]
 8008c04:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8008c64 <neai_anomalydetection_detect+0x1bc>
 8008c08:	eddf aa12 	vldr	s21, [pc, #72]	; 8008c54 <neai_anomalydetection_detect+0x1ac>
 8008c0c:	ed9f ba12 	vldr	s22, [pc, #72]	; 8008c58 <neai_anomalydetection_detect+0x1b0>
 8008c10:	eddf ba0e 	vldr	s23, [pc, #56]	; 8008c4c <neai_anomalydetection_detect+0x1a4>
 8008c14:	eddf 9a11 	vldr	s19, [pc, #68]	; 8008c5c <neai_anomalydetection_detect+0x1b4>
 8008c18:	ed9f 9a11 	vldr	s18, [pc, #68]	; 8008c60 <neai_anomalydetection_detect+0x1b8>
 8008c1c:	f8cd 8004 	str.w	r8, [sp, #4]
 8008c20:	3d01      	subs	r5, #1
 8008c22:	f109 0301 	add.w	r3, r9, #1
 8008c26:	fa53 f385 	uxtab	r3, r3, r5
 8008c2a:	ed9f 8b03 	vldr	d8, [pc, #12]	; 8008c38 <neai_anomalydetection_detect+0x190>
 8008c2e:	461f      	mov	r7, r3
 8008c30:	e01d      	b.n	8008c6e <neai_anomalydetection_detect+0x1c6>
 8008c32:	bf00      	nop
 8008c34:	f3af 8000 	nop.w
	...
 8008c40:	200001ec 	.word	0x200001ec
 8008c44:	20000014 	.word	0x20000014
 8008c48:	3c23d70a 	.word	0x3c23d70a
 8008c4c:	42c80000 	.word	0x42c80000
 8008c50:	20000010 	.word	0x20000010
 8008c54:	00000000 	.word	0x00000000
 8008c58:	437f0000 	.word	0x437f0000
 8008c5c:	3dcccccd 	.word	0x3dcccccd
 8008c60:	3f666666 	.word	0x3f666666
 8008c64:	200001fc 	.word	0x200001fc
 8008c68:	454f      	cmp	r7, r9
 8008c6a:	f000 8234 	beq.w	80090d6 <neai_anomalydetection_detect+0x62e>
 8008c6e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008c72:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8008c76:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8008c7a:	00d8      	lsls	r0, r3, #3
 8008c7c:	6991      	ldr	r1, [r2, #24]
 8008c7e:	2901      	cmp	r1, #1
 8008c80:	d9f2      	bls.n	8008c68 <neai_anomalydetection_detect+0x1c0>
 8008c82:	ed92 7a0d 	vldr	s14, [r2, #52]	; 0x34
 8008c86:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8008c8a:	4ee6      	ldr	r6, [pc, #920]	; (8009024 <neai_anomalydetection_detect+0x57c>)
 8008c8c:	49e6      	ldr	r1, [pc, #920]	; (8009028 <neai_anomalydetection_detect+0x580>)
 8008c8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c92:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8008c96:	eec7 6a8b 	vdiv.f32	s13, s15, s22
 8008c9a:	00d2      	lsls	r2, r2, #3
 8008c9c:	f102 0c03 	add.w	ip, r2, #3
 8008ca0:	448c      	add	ip, r1
 8008ca2:	f106 0848 	add.w	r8, r6, #72	; 0x48
 8008ca6:	4635      	mov	r5, r6
 8008ca8:	46b6      	mov	lr, r6
 8008caa:	f81c af01 	ldrb.w	sl, [ip, #1]!
 8008cae:	ee07 aa90 	vmov	s15, sl
 8008cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008cb6:	eeb0 6a47 	vmov.f32	s12, s14
 8008cba:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8008cbe:	ecae 6a01 	vstmia	lr!, {s12}
 8008cc2:	45f0      	cmp	r8, lr
 8008cc4:	d1f1      	bne.n	8008caa <neai_anomalydetection_detect+0x202>
 8008cc6:	1ac3      	subs	r3, r0, r3
 8008cc8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8008ccc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008cd0:	f8df 836c 	ldr.w	r8, [pc, #876]	; 8009040 <neai_anomalydetection_detect+0x598>
 8008cd4:	ee87 7a8b 	vdiv.f32	s14, s15, s22
 8008cd8:	321f      	adds	r2, #31
 8008cda:	440a      	add	r2, r1
 8008cdc:	4643      	mov	r3, r8
 8008cde:	f108 0148 	add.w	r1, r8, #72	; 0x48
 8008ce2:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8008ce6:	ee07 0a90 	vmov	s15, r0
 8008cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008cee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008cf2:	ece3 7a01 	vstmia	r3!, {s15}
 8008cf6:	4299      	cmp	r1, r3
 8008cf8:	d1f3      	bne.n	8008ce2 <neai_anomalydetection_detect+0x23a>
 8008cfa:	ba2a      	rev	r2, r5
 8008cfc:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8008d00:	f1a2 0201 	sub.w	r2, r2, #1
 8008d04:	eba5 0202 	sub.w	r2, r5, r2
 8008d08:	b2d2      	uxtb	r2, r2
 8008d0a:	ea4f 03c2 	mov.w	r3, r2, lsl #3
 8008d0e:	eba3 0302 	sub.w	r3, r3, r2
 8008d12:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008d16:	4413      	add	r3, r2
 8008d18:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008d1c:	eba3 0302 	sub.w	r3, r3, r2
 8008d20:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008d24:	4413      	add	r3, r2
 8008d26:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 8008d2a:	4413      	add	r3, r2
 8008d2c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008d30:	eba3 0302 	sub.w	r3, r3, r2
 8008d34:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8008d38:	ea6f 0303 	mvn.w	r3, r3
 8008d3c:	ba1b      	rev	r3, r3
 8008d3e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008d40:	4dba      	ldr	r5, [pc, #744]	; (800902c <neai_anomalydetection_detect+0x584>)
 8008d42:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8009030 <neai_anomalydetection_detect+0x588>
 8008d46:	1113      	asrs	r3, r2, #4
 8008d48:	ebc3 7183 	rsb	r1, r3, r3, lsl #30
 8008d4c:	f002 020f 	and.w	r2, r2, #15
 8008d50:	ebc3 0181 	rsb	r1, r3, r1, lsl #2
 8008d54:	fb03 1303 	mla	r3, r3, r3, r1
 8008d58:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8008d5c:	ebc2 0181 	rsb	r1, r2, r1, lsl #2
 8008d60:	fb02 1202 	mla	r2, r2, r2, r1
 8008d64:	4413      	add	r3, r2
 8008d66:	3b32      	subs	r3, #50	; 0x32
 8008d68:	f06f 0203 	mvn.w	r2, #3
 8008d6c:	4433      	add	r3, r6
 8008d6e:	1b52      	subs	r2, r2, r5
 8008d70:	18d6      	adds	r6, r2, r3
 8008d72:	eef0 4a47 	vmov.f32	s9, s14
 8008d76:	eeb0 5a47 	vmov.f32	s10, s14
 8008d7a:	eef0 7a47 	vmov.f32	s15, s14
 8008d7e:	eef0 5a47 	vmov.f32	s11, s14
 8008d82:	f105 0148 	add.w	r1, r5, #72	; 0x48
 8008d86:	462b      	mov	r3, r5
 8008d88:	ecb3 6a01 	vldmia	r3!, {s12}
 8008d8c:	199a      	adds	r2, r3, r6
 8008d8e:	edd2 6a00 	vldr	s13, [r2]
 8008d92:	4299      	cmp	r1, r3
 8008d94:	eee6 4a06 	vfma.f32	s9, s12, s12
 8008d98:	eea6 5a26 	vfma.f32	s10, s12, s13
 8008d9c:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8008da0:	ee75 5a86 	vadd.f32	s11, s11, s12
 8008da4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008da8:	d1ee      	bne.n	8008d88 <neai_anomalydetection_detect+0x2e0>
 8008daa:	ee25 0ae5 	vnmul.f32	s0, s11, s11
 8008dae:	ee27 4ae7 	vnmul.f32	s8, s15, s15
 8008db2:	eeb3 6a02 	vmov.f32	s12, #50	; 0x41900000  18.0
 8008db6:	eef0 6a40 	vmov.f32	s13, s0
 8008dba:	eee4 6a86 	vfma.f32	s13, s9, s12
 8008dbe:	eea7 4a06 	vfma.f32	s8, s14, s12
 8008dc2:	ee67 7ae5 	vnmul.f32	s15, s15, s11
 8008dc6:	ee26 0a84 	vmul.f32	s0, s13, s8
 8008dca:	eee5 7a06 	vfma.f32	s15, s10, s12
 8008dce:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8008dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd6:	eeb1 aac0 	vsqrt.f32	s20, s0
 8008dda:	f100 81a6 	bmi.w	800912a <neai_anomalydetection_detect+0x682>
 8008dde:	ee87 5a8a 	vdiv.f32	s10, s15, s20
 8008de2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008de6:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8008dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dee:	f200 8184 	bhi.w	80090fa <neai_anomalydetection_detect+0x652>
 8008df2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8008df6:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8008dfa:	eddf 7a8d 	vldr	s15, [pc, #564]	; 8009030 <neai_anomalydetection_detect+0x588>
 8008dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e02:	bfb8      	it	lt
 8008e04:	eeb0 5a67 	vmovlt.f32	s10, s15
 8008e08:	eddf 6a89 	vldr	s13, [pc, #548]	; 8009030 <neai_anomalydetection_detect+0x588>
 8008e0c:	f8df a228 	ldr.w	sl, [pc, #552]	; 8009038 <neai_anomalydetection_detect+0x590>
 8008e10:	f8df e228 	ldr.w	lr, [pc, #552]	; 800903c <neai_anomalydetection_detect+0x594>
 8008e14:	eeb0 6a66 	vmov.f32	s12, s13
 8008e18:	2001      	movs	r0, #1
 8008e1a:	ecf8 7a01 	vldmia	r8!, {s15}
 8008e1e:	ecb5 7a01 	vldmia	r5!, {s14}
 8008e22:	eefc 5ae7 	vcvt.u32.f32	s11, s15
 8008e26:	19a9      	adds	r1, r5, r6
 8008e28:	edcd 5a00 	vstr	s11, [sp]
 8008e2c:	f89d 3000 	ldrb.w	r3, [sp]
 8008e30:	edd1 5a00 	vldr	s11, [r1]
 8008e34:	461a      	mov	r2, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f000 815c 	beq.w	80090f4 <neai_anomalydetection_detect+0x64c>
 8008e3c:	f04f 0c00 	mov.w	ip, #0
 8008e40:	f102 3bff 	add.w	fp, r2, #4294967295
 8008e44:	ea12 020b 	ands.w	r2, r2, fp
 8008e48:	4661      	mov	r1, ip
 8008e4a:	f10c 0c01 	add.w	ip, ip, #1
 8008e4e:	d1f7      	bne.n	8008e40 <neai_anomalydetection_detect+0x398>
 8008e50:	eb03 2383 	add.w	r3, r3, r3, lsl #10
 8008e54:	ea0a 0c43 	and.w	ip, sl, r3, lsl #1
 8008e58:	ea0e 1343 	and.w	r3, lr, r3, lsl #5
 8008e5c:	ea4c 0303 	orr.w	r3, ip, r3
 8008e60:	eb03 2c03 	add.w	ip, r3, r3, lsl #8
 8008e64:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8008e68:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 8008e6c:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8008e70:	d00d      	beq.n	8008e8e <neai_anomalydetection_detect+0x3e6>
 8008e72:	f10c 33ff 	add.w	r3, ip, #4294967295
 8008e76:	ea1c 0c03 	ands.w	ip, ip, r3
 8008e7a:	4693      	mov	fp, r2
 8008e7c:	f102 0201 	add.w	r2, r2, #1
 8008e80:	d1f7      	bne.n	8008e72 <neai_anomalydetection_detect+0x3ca>
 8008e82:	eba1 0c0b 	sub.w	ip, r1, fp
 8008e86:	fabc fc8c 	clz	ip, ip
 8008e8a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8008e8e:	4662      	mov	r2, ip
 8008e90:	ea4f 13c2 	mov.w	r3, r2, lsl #7
 8008e94:	eba3 0302 	sub.w	r3, r3, r2
 8008e98:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008e9c:	4413      	add	r3, r2
 8008e9e:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 8008ea2:	4413      	add	r3, r2
 8008ea4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008ea8:	eba3 0302 	sub.w	r3, r3, r2
 8008eac:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8008eb0:	ea6f 0303 	mvn.w	r3, r3
 8008eb4:	ba1b      	rev	r3, r3
 8008eb6:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 8008eb8:	eb01 2381 	add.w	r3, r1, r1, lsl #10
 8008ebc:	ea0a 0243 	and.w	r2, sl, r3, lsl #1
 8008ec0:	ea0e 1343 	and.w	r3, lr, r3, lsl #5
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	eb03 2203 	add.w	r2, r3, r3, lsl #8
 8008eca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008ece:	ee17 2a90 	vmov	r2, s15
 8008ed2:	eba1 4313 	sub.w	r3, r1, r3, lsr #16
 8008ed6:	2900      	cmp	r1, #0
 8008ed8:	bf08      	it	eq
 8008eda:	3201      	addeq	r2, #1
 8008edc:	fa52 f383 	uxtab	r3, r2, r3
 8008ee0:	ee07 3a90 	vmov	s15, r3
 8008ee4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eec:	f000 80ff 	beq.w	80090ee <neai_anomalydetection_detect+0x646>
 8008ef0:	ee37 7a65 	vsub.f32	s14, s14, s11
 8008ef4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008efc:	bf48      	it	mi
 8008efe:	eeb1 7a47 	vnegmi.f32	s14, s14
 8008f02:	eec7 5a27 	vdiv.f32	s11, s14, s15
 8008f06:	ee07 0a90 	vmov	s15, r0
 8008f0a:	ee75 4ac6 	vsub.f32	s9, s11, s12
 8008f0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f12:	eef4 6a65 	vcmp.f32	s13, s11
 8008f16:	eec4 7a87 	vdiv.f32	s15, s9, s14
 8008f1a:	3001      	adds	r0, #1
 8008f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f20:	bf48      	it	mi
 8008f22:	eef0 6a65 	vmovmi.f32	s13, s11
 8008f26:	2813      	cmp	r0, #19
 8008f28:	ee36 6a27 	vadd.f32	s12, s12, s15
 8008f2c:	f47f af75 	bne.w	8008e1a <neai_anomalydetection_detect+0x372>
 8008f30:	4b40      	ldr	r3, [pc, #256]	; (8009034 <neai_anomalydetection_detect+0x58c>)
 8008f32:	edd4 5a59 	vldr	s11, [r4, #356]	; 0x164
 8008f36:	ed93 ca00 	vldr	s24, [r3]
 8008f3a:	edd4 3a57 	vldr	s7, [r4, #348]	; 0x15c
 8008f3e:	ed94 4a58 	vldr	s8, [r4, #352]	; 0x160
 8008f42:	ed94 0a52 	vldr	s0, [r4, #328]	; 0x148
 8008f46:	edd4 4a51 	vldr	s9, [r4, #324]	; 0x144
 8008f4a:	edd4 0a53 	vldr	s1, [r4, #332]	; 0x14c
 8008f4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f52:	ee77 5a65 	vsub.f32	s11, s14, s11
 8008f56:	ee6c 6a26 	vmul.f32	s13, s24, s13
 8008f5a:	eec5 7a8c 	vdiv.f32	s15, s11, s24
 8008f5e:	ee2c 6a06 	vmul.f32	s12, s24, s12
 8008f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f66:	eec6 5a23 	vdiv.f32	s11, s12, s7
 8008f6a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8008f6e:	ee86 6a84 	vdiv.f32	s12, s13, s8
 8008f72:	ee87 aaa9 	vdiv.f32	s20, s15, s19
 8008f76:	ee75 7ac7 	vsub.f32	s15, s11, s14
 8008f7a:	ee2a aa00 	vmul.f32	s20, s20, s0
 8008f7e:	ee36 7a47 	vsub.f32	s14, s12, s14
 8008f82:	eea7 aaa4 	vfma.f32	s20, s15, s9
 8008f86:	ee67 0a20 	vmul.f32	s1, s14, s1
 8008f8a:	ee2c 0a09 	vmul.f32	s0, s24, s18
 8008f8e:	f004 fe08 	bl	800dba2 <fminf>
 8008f92:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8008f96:	ee3a 0a00 	vadd.f32	s0, s20, s0
 8008f9a:	ee2c ca27 	vmul.f32	s24, s24, s15
 8008f9e:	ee6c 7a00 	vmul.f32	s15, s24, s0
 8008fa2:	ee17 0a90 	vmov	r0, s15
 8008fa6:	f7f7 fae7 	bl	8000578 <__aeabi_f2d>
 8008faa:	eeb0 1a48 	vmov.f32	s2, s16
 8008fae:	eef0 1a68 	vmov.f32	s3, s17
 8008fb2:	ec41 0b10 	vmov	d0, r0, r1
 8008fb6:	f004 fd87 	bl	800dac8 <fmax>
 8008fba:	ec51 0b10 	vmov	r0, r1, d0
 8008fbe:	f7f7 fe2b 	bl	8000c18 <__aeabi_d2f>
 8008fc2:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8008fc6:	ee00 0a10 	vmov	s0, r0
 8008fca:	f004 fdea 	bl	800dba2 <fminf>
 8008fce:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8008fd2:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008fd6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008fda:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8008fde:	edcd 7a00 	vstr	s15, [sp]
 8008fe2:	f89d 1000 	ldrb.w	r1, [sp]
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	2900      	cmp	r1, #0
 8008fea:	f000 8089 	beq.w	8009100 <neai_anomalydetection_detect+0x658>
 8008fee:	2500      	movs	r5, #0
 8008ff0:	1e5a      	subs	r2, r3, #1
 8008ff2:	4013      	ands	r3, r2
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	f105 0501 	add.w	r5, r5, #1
 8008ffa:	d1f9      	bne.n	8008ff0 <neai_anomalydetection_detect+0x548>
 8008ffc:	4a0e      	ldr	r2, [pc, #56]	; (8009038 <neai_anomalydetection_detect+0x590>)
 8008ffe:	4d0f      	ldr	r5, [pc, #60]	; (800903c <neai_anomalydetection_detect+0x594>)
 8009000:	eb01 2181 	add.w	r1, r1, r1, lsl #10
 8009004:	ea02 0241 	and.w	r2, r2, r1, lsl #1
 8009008:	ea05 1141 	and.w	r1, r5, r1, lsl #5
 800900c:	430a      	orrs	r2, r1
 800900e:	eb02 2102 	add.w	r1, r2, r2, lsl #8
 8009012:	eb02 2101 	add.w	r1, r2, r1, lsl #8
 8009016:	f411 0f7f 	tst.w	r1, #16711680	; 0xff0000
 800901a:	f3c1 4207 	ubfx	r2, r1, #16, #8
 800901e:	d01b      	beq.n	8009058 <neai_anomalydetection_detect+0x5b0>
 8009020:	e010      	b.n	8009044 <neai_anomalydetection_detect+0x59c>
 8009022:	bf00      	nop
 8009024:	20001af0 	.word	0x20001af0
 8009028:	20000204 	.word	0x20000204
 800902c:	200010a8 	.word	0x200010a8
 8009030:	00000000 	.word	0x00000000
 8009034:	20000010 	.word	0x20000010
 8009038:	00022110 	.word	0x00022110
 800903c:	00088440 	.word	0x00088440
 8009040:	20001b38 	.word	0x20001b38
 8009044:	1e51      	subs	r1, r2, #1
 8009046:	400a      	ands	r2, r1
 8009048:	461d      	mov	r5, r3
 800904a:	f103 0301 	add.w	r3, r3, #1
 800904e:	d1f9      	bne.n	8009044 <neai_anomalydetection_detect+0x59c>
 8009050:	1b42      	subs	r2, r0, r5
 8009052:	fab2 f282 	clz	r2, r2
 8009056:	0952      	lsrs	r2, r2, #5
 8009058:	ea4f 0182 	mov.w	r1, r2, lsl #2
 800905c:	4411      	add	r1, r2
 800905e:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8009062:	eba1 0102 	sub.w	r1, r1, r2
 8009066:	ea4f 1101 	mov.w	r1, r1, lsl #4
 800906a:	4411      	add	r1, r2
 800906c:	ea4f 21c1 	mov.w	r1, r1, lsl #11
 8009070:	4411      	add	r1, r2
 8009072:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8009076:	eba1 0102 	sub.w	r1, r1, r2
 800907a:	ea4f 1141 	mov.w	r1, r1, lsl #5
 800907e:	ea6f 0101 	mvn.w	r1, r1
 8009082:	ba09      	rev	r1, r1
 8009084:	4b2c      	ldr	r3, [pc, #176]	; (8009138 <neai_anomalydetection_detect+0x690>)
 8009086:	8b0a      	ldrh	r2, [r1, #24]
 8009088:	482c      	ldr	r0, [pc, #176]	; (800913c <neai_anomalydetection_detect+0x694>)
 800908a:	492d      	ldr	r1, [pc, #180]	; (8009140 <neai_anomalydetection_detect+0x698>)
 800908c:	fba3 5302 	umull	r5, r3, r3, r2
 8009090:	08db      	lsrs	r3, r3, #3
 8009092:	fba0 5002 	umull	r5, r0, r0, r2
 8009096:	fba1 6102 	umull	r6, r1, r1, r2
 800909a:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 800909e:	0880      	lsrs	r0, r0, #2
 80090a0:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80090a4:	0849      	lsrs	r1, r1, #1
 80090a6:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80090aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80090ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80090b2:	1a52      	subs	r2, r2, r1
 80090b4:	1a1b      	subs	r3, r3, r0
 80090b6:	4413      	add	r3, r2
 80090b8:	ee10 2a10 	vmov	r2, s0
 80090bc:	441a      	add	r2, r3
 80090be:	ee00 2a10 	vmov	s0, r2
 80090c2:	eeb4 0a6a 	vcmp.f32	s0, s21
 80090c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ca:	bfc8      	it	gt
 80090cc:	eef0 aa40 	vmovgt.f32	s21, s0
 80090d0:	454f      	cmp	r7, r9
 80090d2:	f47f adcc 	bne.w	8008c6e <neai_anomalydetection_detect+0x1c6>
 80090d6:	eefc 7aea 	vcvt.u32.f32	s15, s21
 80090da:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80090de:	edcd 7a00 	vstr	s15, [sp]
 80090e2:	f89d 5000 	ldrb.w	r5, [sp]
 80090e6:	f888 5000 	strb.w	r5, [r8]
 80090ea:	2300      	movs	r3, #0
 80090ec:	e4f9      	b.n	8008ae2 <neai_anomalydetection_detect+0x3a>
 80090ee:	eef0 5a6b 	vmov.f32	s11, s23
 80090f2:	e708      	b.n	8008f06 <neai_anomalydetection_detect+0x45e>
 80090f4:	f04f 0c01 	mov.w	ip, #1
 80090f8:	e6c9      	b.n	8008e8e <neai_anomalydetection_detect+0x3e6>
 80090fa:	ed9f 5a12 	vldr	s10, [pc, #72]	; 8009144 <neai_anomalydetection_detect+0x69c>
 80090fe:	e683      	b.n	8008e08 <neai_anomalydetection_detect+0x360>
 8009100:	2201      	movs	r2, #1
 8009102:	e7a9      	b.n	8009058 <neai_anomalydetection_detect+0x5b0>
 8009104:	4b10      	ldr	r3, [pc, #64]	; (8009148 <neai_anomalydetection_detect+0x6a0>)
 8009106:	6019      	str	r1, [r3, #0]
 8009108:	e57c      	b.n	8008c04 <neai_anomalydetection_detect+0x15c>
 800910a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800914c <neai_anomalydetection_detect+0x6a4>
 800910e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009116:	f77f ad75 	ble.w	8008c04 <neai_anomalydetection_detect+0x15c>
 800911a:	e570      	b.n	8008bfe <neai_anomalydetection_detect+0x156>
 800911c:	4639      	mov	r1, r7
 800911e:	e539      	b.n	8008b94 <neai_anomalydetection_detect+0xec>
 8009120:	4611      	mov	r1, r2
 8009122:	e50b      	b.n	8008b3c <neai_anomalydetection_detect+0x94>
 8009124:	ee17 0a10 	vmov	r0, s14
 8009128:	e4ff      	b.n	8008b2a <neai_anomalydetection_detect+0x82>
 800912a:	edcd 7a00 	vstr	s15, [sp]
 800912e:	f004 fd6f 	bl	800dc10 <sqrtf>
 8009132:	eddd 7a00 	vldr	s15, [sp]
 8009136:	e652      	b.n	8008dde <neai_anomalydetection_detect+0x336>
 8009138:	ba2e8ba3 	.word	0xba2e8ba3
 800913c:	cccccccd 	.word	0xcccccccd
 8009140:	aaaaaaab 	.word	0xaaaaaaab
 8009144:	00000000 	.word	0x00000000
 8009148:	20000010 	.word	0x20000010
 800914c:	42c80000 	.word	0x42c80000

08009150 <__errno>:
 8009150:	4b01      	ldr	r3, [pc, #4]	; (8009158 <__errno+0x8>)
 8009152:	6818      	ldr	r0, [r3, #0]
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	20000018 	.word	0x20000018

0800915c <__libc_init_array>:
 800915c:	b570      	push	{r4, r5, r6, lr}
 800915e:	4d0d      	ldr	r5, [pc, #52]	; (8009194 <__libc_init_array+0x38>)
 8009160:	4c0d      	ldr	r4, [pc, #52]	; (8009198 <__libc_init_array+0x3c>)
 8009162:	1b64      	subs	r4, r4, r5
 8009164:	10a4      	asrs	r4, r4, #2
 8009166:	2600      	movs	r6, #0
 8009168:	42a6      	cmp	r6, r4
 800916a:	d109      	bne.n	8009180 <__libc_init_array+0x24>
 800916c:	4d0b      	ldr	r5, [pc, #44]	; (800919c <__libc_init_array+0x40>)
 800916e:	4c0c      	ldr	r4, [pc, #48]	; (80091a0 <__libc_init_array+0x44>)
 8009170:	f004 fd70 	bl	800dc54 <_init>
 8009174:	1b64      	subs	r4, r4, r5
 8009176:	10a4      	asrs	r4, r4, #2
 8009178:	2600      	movs	r6, #0
 800917a:	42a6      	cmp	r6, r4
 800917c:	d105      	bne.n	800918a <__libc_init_array+0x2e>
 800917e:	bd70      	pop	{r4, r5, r6, pc}
 8009180:	f855 3b04 	ldr.w	r3, [r5], #4
 8009184:	4798      	blx	r3
 8009186:	3601      	adds	r6, #1
 8009188:	e7ee      	b.n	8009168 <__libc_init_array+0xc>
 800918a:	f855 3b04 	ldr.w	r3, [r5], #4
 800918e:	4798      	blx	r3
 8009190:	3601      	adds	r6, #1
 8009192:	e7f2      	b.n	800917a <__libc_init_array+0x1e>
 8009194:	0800e294 	.word	0x0800e294
 8009198:	0800e294 	.word	0x0800e294
 800919c:	0800e294 	.word	0x0800e294
 80091a0:	0800e298 	.word	0x0800e298

080091a4 <memcpy>:
 80091a4:	440a      	add	r2, r1
 80091a6:	4291      	cmp	r1, r2
 80091a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80091ac:	d100      	bne.n	80091b0 <memcpy+0xc>
 80091ae:	4770      	bx	lr
 80091b0:	b510      	push	{r4, lr}
 80091b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091ba:	4291      	cmp	r1, r2
 80091bc:	d1f9      	bne.n	80091b2 <memcpy+0xe>
 80091be:	bd10      	pop	{r4, pc}

080091c0 <memset>:
 80091c0:	4402      	add	r2, r0
 80091c2:	4603      	mov	r3, r0
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d100      	bne.n	80091ca <memset+0xa>
 80091c8:	4770      	bx	lr
 80091ca:	f803 1b01 	strb.w	r1, [r3], #1
 80091ce:	e7f9      	b.n	80091c4 <memset+0x4>

080091d0 <__cvt>:
 80091d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091d4:	ec55 4b10 	vmov	r4, r5, d0
 80091d8:	2d00      	cmp	r5, #0
 80091da:	460e      	mov	r6, r1
 80091dc:	4619      	mov	r1, r3
 80091de:	462b      	mov	r3, r5
 80091e0:	bfbb      	ittet	lt
 80091e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80091e6:	461d      	movlt	r5, r3
 80091e8:	2300      	movge	r3, #0
 80091ea:	232d      	movlt	r3, #45	; 0x2d
 80091ec:	700b      	strb	r3, [r1, #0]
 80091ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80091f4:	4691      	mov	r9, r2
 80091f6:	f023 0820 	bic.w	r8, r3, #32
 80091fa:	bfbc      	itt	lt
 80091fc:	4622      	movlt	r2, r4
 80091fe:	4614      	movlt	r4, r2
 8009200:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009204:	d005      	beq.n	8009212 <__cvt+0x42>
 8009206:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800920a:	d100      	bne.n	800920e <__cvt+0x3e>
 800920c:	3601      	adds	r6, #1
 800920e:	2102      	movs	r1, #2
 8009210:	e000      	b.n	8009214 <__cvt+0x44>
 8009212:	2103      	movs	r1, #3
 8009214:	ab03      	add	r3, sp, #12
 8009216:	9301      	str	r3, [sp, #4]
 8009218:	ab02      	add	r3, sp, #8
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	ec45 4b10 	vmov	d0, r4, r5
 8009220:	4653      	mov	r3, sl
 8009222:	4632      	mov	r2, r6
 8009224:	f001 fdc4 	bl	800adb0 <_dtoa_r>
 8009228:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800922c:	4607      	mov	r7, r0
 800922e:	d102      	bne.n	8009236 <__cvt+0x66>
 8009230:	f019 0f01 	tst.w	r9, #1
 8009234:	d022      	beq.n	800927c <__cvt+0xac>
 8009236:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800923a:	eb07 0906 	add.w	r9, r7, r6
 800923e:	d110      	bne.n	8009262 <__cvt+0x92>
 8009240:	783b      	ldrb	r3, [r7, #0]
 8009242:	2b30      	cmp	r3, #48	; 0x30
 8009244:	d10a      	bne.n	800925c <__cvt+0x8c>
 8009246:	2200      	movs	r2, #0
 8009248:	2300      	movs	r3, #0
 800924a:	4620      	mov	r0, r4
 800924c:	4629      	mov	r1, r5
 800924e:	f7f7 fc53 	bl	8000af8 <__aeabi_dcmpeq>
 8009252:	b918      	cbnz	r0, 800925c <__cvt+0x8c>
 8009254:	f1c6 0601 	rsb	r6, r6, #1
 8009258:	f8ca 6000 	str.w	r6, [sl]
 800925c:	f8da 3000 	ldr.w	r3, [sl]
 8009260:	4499      	add	r9, r3
 8009262:	2200      	movs	r2, #0
 8009264:	2300      	movs	r3, #0
 8009266:	4620      	mov	r0, r4
 8009268:	4629      	mov	r1, r5
 800926a:	f7f7 fc45 	bl	8000af8 <__aeabi_dcmpeq>
 800926e:	b108      	cbz	r0, 8009274 <__cvt+0xa4>
 8009270:	f8cd 900c 	str.w	r9, [sp, #12]
 8009274:	2230      	movs	r2, #48	; 0x30
 8009276:	9b03      	ldr	r3, [sp, #12]
 8009278:	454b      	cmp	r3, r9
 800927a:	d307      	bcc.n	800928c <__cvt+0xbc>
 800927c:	9b03      	ldr	r3, [sp, #12]
 800927e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009280:	1bdb      	subs	r3, r3, r7
 8009282:	4638      	mov	r0, r7
 8009284:	6013      	str	r3, [r2, #0]
 8009286:	b004      	add	sp, #16
 8009288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800928c:	1c59      	adds	r1, r3, #1
 800928e:	9103      	str	r1, [sp, #12]
 8009290:	701a      	strb	r2, [r3, #0]
 8009292:	e7f0      	b.n	8009276 <__cvt+0xa6>

08009294 <__exponent>:
 8009294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009296:	4603      	mov	r3, r0
 8009298:	2900      	cmp	r1, #0
 800929a:	bfb8      	it	lt
 800929c:	4249      	neglt	r1, r1
 800929e:	f803 2b02 	strb.w	r2, [r3], #2
 80092a2:	bfb4      	ite	lt
 80092a4:	222d      	movlt	r2, #45	; 0x2d
 80092a6:	222b      	movge	r2, #43	; 0x2b
 80092a8:	2909      	cmp	r1, #9
 80092aa:	7042      	strb	r2, [r0, #1]
 80092ac:	dd2a      	ble.n	8009304 <__exponent+0x70>
 80092ae:	f10d 0407 	add.w	r4, sp, #7
 80092b2:	46a4      	mov	ip, r4
 80092b4:	270a      	movs	r7, #10
 80092b6:	46a6      	mov	lr, r4
 80092b8:	460a      	mov	r2, r1
 80092ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80092be:	fb07 1516 	mls	r5, r7, r6, r1
 80092c2:	3530      	adds	r5, #48	; 0x30
 80092c4:	2a63      	cmp	r2, #99	; 0x63
 80092c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80092ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80092ce:	4631      	mov	r1, r6
 80092d0:	dcf1      	bgt.n	80092b6 <__exponent+0x22>
 80092d2:	3130      	adds	r1, #48	; 0x30
 80092d4:	f1ae 0502 	sub.w	r5, lr, #2
 80092d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80092dc:	1c44      	adds	r4, r0, #1
 80092de:	4629      	mov	r1, r5
 80092e0:	4561      	cmp	r1, ip
 80092e2:	d30a      	bcc.n	80092fa <__exponent+0x66>
 80092e4:	f10d 0209 	add.w	r2, sp, #9
 80092e8:	eba2 020e 	sub.w	r2, r2, lr
 80092ec:	4565      	cmp	r5, ip
 80092ee:	bf88      	it	hi
 80092f0:	2200      	movhi	r2, #0
 80092f2:	4413      	add	r3, r2
 80092f4:	1a18      	subs	r0, r3, r0
 80092f6:	b003      	add	sp, #12
 80092f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009302:	e7ed      	b.n	80092e0 <__exponent+0x4c>
 8009304:	2330      	movs	r3, #48	; 0x30
 8009306:	3130      	adds	r1, #48	; 0x30
 8009308:	7083      	strb	r3, [r0, #2]
 800930a:	70c1      	strb	r1, [r0, #3]
 800930c:	1d03      	adds	r3, r0, #4
 800930e:	e7f1      	b.n	80092f4 <__exponent+0x60>

08009310 <_printf_float>:
 8009310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009314:	ed2d 8b02 	vpush	{d8}
 8009318:	b08d      	sub	sp, #52	; 0x34
 800931a:	460c      	mov	r4, r1
 800931c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009320:	4616      	mov	r6, r2
 8009322:	461f      	mov	r7, r3
 8009324:	4605      	mov	r5, r0
 8009326:	f002 ff95 	bl	800c254 <_localeconv_r>
 800932a:	f8d0 a000 	ldr.w	sl, [r0]
 800932e:	4650      	mov	r0, sl
 8009330:	f7f6 ff66 	bl	8000200 <strlen>
 8009334:	2300      	movs	r3, #0
 8009336:	930a      	str	r3, [sp, #40]	; 0x28
 8009338:	6823      	ldr	r3, [r4, #0]
 800933a:	9305      	str	r3, [sp, #20]
 800933c:	f8d8 3000 	ldr.w	r3, [r8]
 8009340:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009344:	3307      	adds	r3, #7
 8009346:	f023 0307 	bic.w	r3, r3, #7
 800934a:	f103 0208 	add.w	r2, r3, #8
 800934e:	f8c8 2000 	str.w	r2, [r8]
 8009352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009356:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800935a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800935e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009362:	9307      	str	r3, [sp, #28]
 8009364:	f8cd 8018 	str.w	r8, [sp, #24]
 8009368:	ee08 0a10 	vmov	s16, r0
 800936c:	4b9f      	ldr	r3, [pc, #636]	; (80095ec <_printf_float+0x2dc>)
 800936e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009372:	f04f 32ff 	mov.w	r2, #4294967295
 8009376:	f7f7 fbf1 	bl	8000b5c <__aeabi_dcmpun>
 800937a:	bb88      	cbnz	r0, 80093e0 <_printf_float+0xd0>
 800937c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009380:	4b9a      	ldr	r3, [pc, #616]	; (80095ec <_printf_float+0x2dc>)
 8009382:	f04f 32ff 	mov.w	r2, #4294967295
 8009386:	f7f7 fbcb 	bl	8000b20 <__aeabi_dcmple>
 800938a:	bb48      	cbnz	r0, 80093e0 <_printf_float+0xd0>
 800938c:	2200      	movs	r2, #0
 800938e:	2300      	movs	r3, #0
 8009390:	4640      	mov	r0, r8
 8009392:	4649      	mov	r1, r9
 8009394:	f7f7 fbba 	bl	8000b0c <__aeabi_dcmplt>
 8009398:	b110      	cbz	r0, 80093a0 <_printf_float+0x90>
 800939a:	232d      	movs	r3, #45	; 0x2d
 800939c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093a0:	4b93      	ldr	r3, [pc, #588]	; (80095f0 <_printf_float+0x2e0>)
 80093a2:	4894      	ldr	r0, [pc, #592]	; (80095f4 <_printf_float+0x2e4>)
 80093a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80093a8:	bf94      	ite	ls
 80093aa:	4698      	movls	r8, r3
 80093ac:	4680      	movhi	r8, r0
 80093ae:	2303      	movs	r3, #3
 80093b0:	6123      	str	r3, [r4, #16]
 80093b2:	9b05      	ldr	r3, [sp, #20]
 80093b4:	f023 0204 	bic.w	r2, r3, #4
 80093b8:	6022      	str	r2, [r4, #0]
 80093ba:	f04f 0900 	mov.w	r9, #0
 80093be:	9700      	str	r7, [sp, #0]
 80093c0:	4633      	mov	r3, r6
 80093c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80093c4:	4621      	mov	r1, r4
 80093c6:	4628      	mov	r0, r5
 80093c8:	f000 f9d8 	bl	800977c <_printf_common>
 80093cc:	3001      	adds	r0, #1
 80093ce:	f040 8090 	bne.w	80094f2 <_printf_float+0x1e2>
 80093d2:	f04f 30ff 	mov.w	r0, #4294967295
 80093d6:	b00d      	add	sp, #52	; 0x34
 80093d8:	ecbd 8b02 	vpop	{d8}
 80093dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e0:	4642      	mov	r2, r8
 80093e2:	464b      	mov	r3, r9
 80093e4:	4640      	mov	r0, r8
 80093e6:	4649      	mov	r1, r9
 80093e8:	f7f7 fbb8 	bl	8000b5c <__aeabi_dcmpun>
 80093ec:	b140      	cbz	r0, 8009400 <_printf_float+0xf0>
 80093ee:	464b      	mov	r3, r9
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	bfbc      	itt	lt
 80093f4:	232d      	movlt	r3, #45	; 0x2d
 80093f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80093fa:	487f      	ldr	r0, [pc, #508]	; (80095f8 <_printf_float+0x2e8>)
 80093fc:	4b7f      	ldr	r3, [pc, #508]	; (80095fc <_printf_float+0x2ec>)
 80093fe:	e7d1      	b.n	80093a4 <_printf_float+0x94>
 8009400:	6863      	ldr	r3, [r4, #4]
 8009402:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009406:	9206      	str	r2, [sp, #24]
 8009408:	1c5a      	adds	r2, r3, #1
 800940a:	d13f      	bne.n	800948c <_printf_float+0x17c>
 800940c:	2306      	movs	r3, #6
 800940e:	6063      	str	r3, [r4, #4]
 8009410:	9b05      	ldr	r3, [sp, #20]
 8009412:	6861      	ldr	r1, [r4, #4]
 8009414:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009418:	2300      	movs	r3, #0
 800941a:	9303      	str	r3, [sp, #12]
 800941c:	ab0a      	add	r3, sp, #40	; 0x28
 800941e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009422:	ab09      	add	r3, sp, #36	; 0x24
 8009424:	ec49 8b10 	vmov	d0, r8, r9
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	6022      	str	r2, [r4, #0]
 800942c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009430:	4628      	mov	r0, r5
 8009432:	f7ff fecd 	bl	80091d0 <__cvt>
 8009436:	9b06      	ldr	r3, [sp, #24]
 8009438:	9909      	ldr	r1, [sp, #36]	; 0x24
 800943a:	2b47      	cmp	r3, #71	; 0x47
 800943c:	4680      	mov	r8, r0
 800943e:	d108      	bne.n	8009452 <_printf_float+0x142>
 8009440:	1cc8      	adds	r0, r1, #3
 8009442:	db02      	blt.n	800944a <_printf_float+0x13a>
 8009444:	6863      	ldr	r3, [r4, #4]
 8009446:	4299      	cmp	r1, r3
 8009448:	dd41      	ble.n	80094ce <_printf_float+0x1be>
 800944a:	f1ab 0b02 	sub.w	fp, fp, #2
 800944e:	fa5f fb8b 	uxtb.w	fp, fp
 8009452:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009456:	d820      	bhi.n	800949a <_printf_float+0x18a>
 8009458:	3901      	subs	r1, #1
 800945a:	465a      	mov	r2, fp
 800945c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009460:	9109      	str	r1, [sp, #36]	; 0x24
 8009462:	f7ff ff17 	bl	8009294 <__exponent>
 8009466:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009468:	1813      	adds	r3, r2, r0
 800946a:	2a01      	cmp	r2, #1
 800946c:	4681      	mov	r9, r0
 800946e:	6123      	str	r3, [r4, #16]
 8009470:	dc02      	bgt.n	8009478 <_printf_float+0x168>
 8009472:	6822      	ldr	r2, [r4, #0]
 8009474:	07d2      	lsls	r2, r2, #31
 8009476:	d501      	bpl.n	800947c <_printf_float+0x16c>
 8009478:	3301      	adds	r3, #1
 800947a:	6123      	str	r3, [r4, #16]
 800947c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009480:	2b00      	cmp	r3, #0
 8009482:	d09c      	beq.n	80093be <_printf_float+0xae>
 8009484:	232d      	movs	r3, #45	; 0x2d
 8009486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800948a:	e798      	b.n	80093be <_printf_float+0xae>
 800948c:	9a06      	ldr	r2, [sp, #24]
 800948e:	2a47      	cmp	r2, #71	; 0x47
 8009490:	d1be      	bne.n	8009410 <_printf_float+0x100>
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1bc      	bne.n	8009410 <_printf_float+0x100>
 8009496:	2301      	movs	r3, #1
 8009498:	e7b9      	b.n	800940e <_printf_float+0xfe>
 800949a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800949e:	d118      	bne.n	80094d2 <_printf_float+0x1c2>
 80094a0:	2900      	cmp	r1, #0
 80094a2:	6863      	ldr	r3, [r4, #4]
 80094a4:	dd0b      	ble.n	80094be <_printf_float+0x1ae>
 80094a6:	6121      	str	r1, [r4, #16]
 80094a8:	b913      	cbnz	r3, 80094b0 <_printf_float+0x1a0>
 80094aa:	6822      	ldr	r2, [r4, #0]
 80094ac:	07d0      	lsls	r0, r2, #31
 80094ae:	d502      	bpl.n	80094b6 <_printf_float+0x1a6>
 80094b0:	3301      	adds	r3, #1
 80094b2:	440b      	add	r3, r1
 80094b4:	6123      	str	r3, [r4, #16]
 80094b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80094b8:	f04f 0900 	mov.w	r9, #0
 80094bc:	e7de      	b.n	800947c <_printf_float+0x16c>
 80094be:	b913      	cbnz	r3, 80094c6 <_printf_float+0x1b6>
 80094c0:	6822      	ldr	r2, [r4, #0]
 80094c2:	07d2      	lsls	r2, r2, #31
 80094c4:	d501      	bpl.n	80094ca <_printf_float+0x1ba>
 80094c6:	3302      	adds	r3, #2
 80094c8:	e7f4      	b.n	80094b4 <_printf_float+0x1a4>
 80094ca:	2301      	movs	r3, #1
 80094cc:	e7f2      	b.n	80094b4 <_printf_float+0x1a4>
 80094ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80094d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094d4:	4299      	cmp	r1, r3
 80094d6:	db05      	blt.n	80094e4 <_printf_float+0x1d4>
 80094d8:	6823      	ldr	r3, [r4, #0]
 80094da:	6121      	str	r1, [r4, #16]
 80094dc:	07d8      	lsls	r0, r3, #31
 80094de:	d5ea      	bpl.n	80094b6 <_printf_float+0x1a6>
 80094e0:	1c4b      	adds	r3, r1, #1
 80094e2:	e7e7      	b.n	80094b4 <_printf_float+0x1a4>
 80094e4:	2900      	cmp	r1, #0
 80094e6:	bfd4      	ite	le
 80094e8:	f1c1 0202 	rsble	r2, r1, #2
 80094ec:	2201      	movgt	r2, #1
 80094ee:	4413      	add	r3, r2
 80094f0:	e7e0      	b.n	80094b4 <_printf_float+0x1a4>
 80094f2:	6823      	ldr	r3, [r4, #0]
 80094f4:	055a      	lsls	r2, r3, #21
 80094f6:	d407      	bmi.n	8009508 <_printf_float+0x1f8>
 80094f8:	6923      	ldr	r3, [r4, #16]
 80094fa:	4642      	mov	r2, r8
 80094fc:	4631      	mov	r1, r6
 80094fe:	4628      	mov	r0, r5
 8009500:	47b8      	blx	r7
 8009502:	3001      	adds	r0, #1
 8009504:	d12c      	bne.n	8009560 <_printf_float+0x250>
 8009506:	e764      	b.n	80093d2 <_printf_float+0xc2>
 8009508:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800950c:	f240 80e0 	bls.w	80096d0 <_printf_float+0x3c0>
 8009510:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009514:	2200      	movs	r2, #0
 8009516:	2300      	movs	r3, #0
 8009518:	f7f7 faee 	bl	8000af8 <__aeabi_dcmpeq>
 800951c:	2800      	cmp	r0, #0
 800951e:	d034      	beq.n	800958a <_printf_float+0x27a>
 8009520:	4a37      	ldr	r2, [pc, #220]	; (8009600 <_printf_float+0x2f0>)
 8009522:	2301      	movs	r3, #1
 8009524:	4631      	mov	r1, r6
 8009526:	4628      	mov	r0, r5
 8009528:	47b8      	blx	r7
 800952a:	3001      	adds	r0, #1
 800952c:	f43f af51 	beq.w	80093d2 <_printf_float+0xc2>
 8009530:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009534:	429a      	cmp	r2, r3
 8009536:	db02      	blt.n	800953e <_printf_float+0x22e>
 8009538:	6823      	ldr	r3, [r4, #0]
 800953a:	07d8      	lsls	r0, r3, #31
 800953c:	d510      	bpl.n	8009560 <_printf_float+0x250>
 800953e:	ee18 3a10 	vmov	r3, s16
 8009542:	4652      	mov	r2, sl
 8009544:	4631      	mov	r1, r6
 8009546:	4628      	mov	r0, r5
 8009548:	47b8      	blx	r7
 800954a:	3001      	adds	r0, #1
 800954c:	f43f af41 	beq.w	80093d2 <_printf_float+0xc2>
 8009550:	f04f 0800 	mov.w	r8, #0
 8009554:	f104 091a 	add.w	r9, r4, #26
 8009558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800955a:	3b01      	subs	r3, #1
 800955c:	4543      	cmp	r3, r8
 800955e:	dc09      	bgt.n	8009574 <_printf_float+0x264>
 8009560:	6823      	ldr	r3, [r4, #0]
 8009562:	079b      	lsls	r3, r3, #30
 8009564:	f100 8105 	bmi.w	8009772 <_printf_float+0x462>
 8009568:	68e0      	ldr	r0, [r4, #12]
 800956a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800956c:	4298      	cmp	r0, r3
 800956e:	bfb8      	it	lt
 8009570:	4618      	movlt	r0, r3
 8009572:	e730      	b.n	80093d6 <_printf_float+0xc6>
 8009574:	2301      	movs	r3, #1
 8009576:	464a      	mov	r2, r9
 8009578:	4631      	mov	r1, r6
 800957a:	4628      	mov	r0, r5
 800957c:	47b8      	blx	r7
 800957e:	3001      	adds	r0, #1
 8009580:	f43f af27 	beq.w	80093d2 <_printf_float+0xc2>
 8009584:	f108 0801 	add.w	r8, r8, #1
 8009588:	e7e6      	b.n	8009558 <_printf_float+0x248>
 800958a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800958c:	2b00      	cmp	r3, #0
 800958e:	dc39      	bgt.n	8009604 <_printf_float+0x2f4>
 8009590:	4a1b      	ldr	r2, [pc, #108]	; (8009600 <_printf_float+0x2f0>)
 8009592:	2301      	movs	r3, #1
 8009594:	4631      	mov	r1, r6
 8009596:	4628      	mov	r0, r5
 8009598:	47b8      	blx	r7
 800959a:	3001      	adds	r0, #1
 800959c:	f43f af19 	beq.w	80093d2 <_printf_float+0xc2>
 80095a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095a4:	4313      	orrs	r3, r2
 80095a6:	d102      	bne.n	80095ae <_printf_float+0x29e>
 80095a8:	6823      	ldr	r3, [r4, #0]
 80095aa:	07d9      	lsls	r1, r3, #31
 80095ac:	d5d8      	bpl.n	8009560 <_printf_float+0x250>
 80095ae:	ee18 3a10 	vmov	r3, s16
 80095b2:	4652      	mov	r2, sl
 80095b4:	4631      	mov	r1, r6
 80095b6:	4628      	mov	r0, r5
 80095b8:	47b8      	blx	r7
 80095ba:	3001      	adds	r0, #1
 80095bc:	f43f af09 	beq.w	80093d2 <_printf_float+0xc2>
 80095c0:	f04f 0900 	mov.w	r9, #0
 80095c4:	f104 0a1a 	add.w	sl, r4, #26
 80095c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ca:	425b      	negs	r3, r3
 80095cc:	454b      	cmp	r3, r9
 80095ce:	dc01      	bgt.n	80095d4 <_printf_float+0x2c4>
 80095d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095d2:	e792      	b.n	80094fa <_printf_float+0x1ea>
 80095d4:	2301      	movs	r3, #1
 80095d6:	4652      	mov	r2, sl
 80095d8:	4631      	mov	r1, r6
 80095da:	4628      	mov	r0, r5
 80095dc:	47b8      	blx	r7
 80095de:	3001      	adds	r0, #1
 80095e0:	f43f aef7 	beq.w	80093d2 <_printf_float+0xc2>
 80095e4:	f109 0901 	add.w	r9, r9, #1
 80095e8:	e7ee      	b.n	80095c8 <_printf_float+0x2b8>
 80095ea:	bf00      	nop
 80095ec:	7fefffff 	.word	0x7fefffff
 80095f0:	0800dde0 	.word	0x0800dde0
 80095f4:	0800dde4 	.word	0x0800dde4
 80095f8:	0800ddec 	.word	0x0800ddec
 80095fc:	0800dde8 	.word	0x0800dde8
 8009600:	0800ddf0 	.word	0x0800ddf0
 8009604:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009606:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009608:	429a      	cmp	r2, r3
 800960a:	bfa8      	it	ge
 800960c:	461a      	movge	r2, r3
 800960e:	2a00      	cmp	r2, #0
 8009610:	4691      	mov	r9, r2
 8009612:	dc37      	bgt.n	8009684 <_printf_float+0x374>
 8009614:	f04f 0b00 	mov.w	fp, #0
 8009618:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800961c:	f104 021a 	add.w	r2, r4, #26
 8009620:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009622:	9305      	str	r3, [sp, #20]
 8009624:	eba3 0309 	sub.w	r3, r3, r9
 8009628:	455b      	cmp	r3, fp
 800962a:	dc33      	bgt.n	8009694 <_printf_float+0x384>
 800962c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009630:	429a      	cmp	r2, r3
 8009632:	db3b      	blt.n	80096ac <_printf_float+0x39c>
 8009634:	6823      	ldr	r3, [r4, #0]
 8009636:	07da      	lsls	r2, r3, #31
 8009638:	d438      	bmi.n	80096ac <_printf_float+0x39c>
 800963a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800963c:	9a05      	ldr	r2, [sp, #20]
 800963e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009640:	1a9a      	subs	r2, r3, r2
 8009642:	eba3 0901 	sub.w	r9, r3, r1
 8009646:	4591      	cmp	r9, r2
 8009648:	bfa8      	it	ge
 800964a:	4691      	movge	r9, r2
 800964c:	f1b9 0f00 	cmp.w	r9, #0
 8009650:	dc35      	bgt.n	80096be <_printf_float+0x3ae>
 8009652:	f04f 0800 	mov.w	r8, #0
 8009656:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800965a:	f104 0a1a 	add.w	sl, r4, #26
 800965e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009662:	1a9b      	subs	r3, r3, r2
 8009664:	eba3 0309 	sub.w	r3, r3, r9
 8009668:	4543      	cmp	r3, r8
 800966a:	f77f af79 	ble.w	8009560 <_printf_float+0x250>
 800966e:	2301      	movs	r3, #1
 8009670:	4652      	mov	r2, sl
 8009672:	4631      	mov	r1, r6
 8009674:	4628      	mov	r0, r5
 8009676:	47b8      	blx	r7
 8009678:	3001      	adds	r0, #1
 800967a:	f43f aeaa 	beq.w	80093d2 <_printf_float+0xc2>
 800967e:	f108 0801 	add.w	r8, r8, #1
 8009682:	e7ec      	b.n	800965e <_printf_float+0x34e>
 8009684:	4613      	mov	r3, r2
 8009686:	4631      	mov	r1, r6
 8009688:	4642      	mov	r2, r8
 800968a:	4628      	mov	r0, r5
 800968c:	47b8      	blx	r7
 800968e:	3001      	adds	r0, #1
 8009690:	d1c0      	bne.n	8009614 <_printf_float+0x304>
 8009692:	e69e      	b.n	80093d2 <_printf_float+0xc2>
 8009694:	2301      	movs	r3, #1
 8009696:	4631      	mov	r1, r6
 8009698:	4628      	mov	r0, r5
 800969a:	9205      	str	r2, [sp, #20]
 800969c:	47b8      	blx	r7
 800969e:	3001      	adds	r0, #1
 80096a0:	f43f ae97 	beq.w	80093d2 <_printf_float+0xc2>
 80096a4:	9a05      	ldr	r2, [sp, #20]
 80096a6:	f10b 0b01 	add.w	fp, fp, #1
 80096aa:	e7b9      	b.n	8009620 <_printf_float+0x310>
 80096ac:	ee18 3a10 	vmov	r3, s16
 80096b0:	4652      	mov	r2, sl
 80096b2:	4631      	mov	r1, r6
 80096b4:	4628      	mov	r0, r5
 80096b6:	47b8      	blx	r7
 80096b8:	3001      	adds	r0, #1
 80096ba:	d1be      	bne.n	800963a <_printf_float+0x32a>
 80096bc:	e689      	b.n	80093d2 <_printf_float+0xc2>
 80096be:	9a05      	ldr	r2, [sp, #20]
 80096c0:	464b      	mov	r3, r9
 80096c2:	4442      	add	r2, r8
 80096c4:	4631      	mov	r1, r6
 80096c6:	4628      	mov	r0, r5
 80096c8:	47b8      	blx	r7
 80096ca:	3001      	adds	r0, #1
 80096cc:	d1c1      	bne.n	8009652 <_printf_float+0x342>
 80096ce:	e680      	b.n	80093d2 <_printf_float+0xc2>
 80096d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096d2:	2a01      	cmp	r2, #1
 80096d4:	dc01      	bgt.n	80096da <_printf_float+0x3ca>
 80096d6:	07db      	lsls	r3, r3, #31
 80096d8:	d538      	bpl.n	800974c <_printf_float+0x43c>
 80096da:	2301      	movs	r3, #1
 80096dc:	4642      	mov	r2, r8
 80096de:	4631      	mov	r1, r6
 80096e0:	4628      	mov	r0, r5
 80096e2:	47b8      	blx	r7
 80096e4:	3001      	adds	r0, #1
 80096e6:	f43f ae74 	beq.w	80093d2 <_printf_float+0xc2>
 80096ea:	ee18 3a10 	vmov	r3, s16
 80096ee:	4652      	mov	r2, sl
 80096f0:	4631      	mov	r1, r6
 80096f2:	4628      	mov	r0, r5
 80096f4:	47b8      	blx	r7
 80096f6:	3001      	adds	r0, #1
 80096f8:	f43f ae6b 	beq.w	80093d2 <_printf_float+0xc2>
 80096fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009700:	2200      	movs	r2, #0
 8009702:	2300      	movs	r3, #0
 8009704:	f7f7 f9f8 	bl	8000af8 <__aeabi_dcmpeq>
 8009708:	b9d8      	cbnz	r0, 8009742 <_printf_float+0x432>
 800970a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800970c:	f108 0201 	add.w	r2, r8, #1
 8009710:	3b01      	subs	r3, #1
 8009712:	4631      	mov	r1, r6
 8009714:	4628      	mov	r0, r5
 8009716:	47b8      	blx	r7
 8009718:	3001      	adds	r0, #1
 800971a:	d10e      	bne.n	800973a <_printf_float+0x42a>
 800971c:	e659      	b.n	80093d2 <_printf_float+0xc2>
 800971e:	2301      	movs	r3, #1
 8009720:	4652      	mov	r2, sl
 8009722:	4631      	mov	r1, r6
 8009724:	4628      	mov	r0, r5
 8009726:	47b8      	blx	r7
 8009728:	3001      	adds	r0, #1
 800972a:	f43f ae52 	beq.w	80093d2 <_printf_float+0xc2>
 800972e:	f108 0801 	add.w	r8, r8, #1
 8009732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009734:	3b01      	subs	r3, #1
 8009736:	4543      	cmp	r3, r8
 8009738:	dcf1      	bgt.n	800971e <_printf_float+0x40e>
 800973a:	464b      	mov	r3, r9
 800973c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009740:	e6dc      	b.n	80094fc <_printf_float+0x1ec>
 8009742:	f04f 0800 	mov.w	r8, #0
 8009746:	f104 0a1a 	add.w	sl, r4, #26
 800974a:	e7f2      	b.n	8009732 <_printf_float+0x422>
 800974c:	2301      	movs	r3, #1
 800974e:	4642      	mov	r2, r8
 8009750:	e7df      	b.n	8009712 <_printf_float+0x402>
 8009752:	2301      	movs	r3, #1
 8009754:	464a      	mov	r2, r9
 8009756:	4631      	mov	r1, r6
 8009758:	4628      	mov	r0, r5
 800975a:	47b8      	blx	r7
 800975c:	3001      	adds	r0, #1
 800975e:	f43f ae38 	beq.w	80093d2 <_printf_float+0xc2>
 8009762:	f108 0801 	add.w	r8, r8, #1
 8009766:	68e3      	ldr	r3, [r4, #12]
 8009768:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800976a:	1a5b      	subs	r3, r3, r1
 800976c:	4543      	cmp	r3, r8
 800976e:	dcf0      	bgt.n	8009752 <_printf_float+0x442>
 8009770:	e6fa      	b.n	8009568 <_printf_float+0x258>
 8009772:	f04f 0800 	mov.w	r8, #0
 8009776:	f104 0919 	add.w	r9, r4, #25
 800977a:	e7f4      	b.n	8009766 <_printf_float+0x456>

0800977c <_printf_common>:
 800977c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009780:	4616      	mov	r6, r2
 8009782:	4699      	mov	r9, r3
 8009784:	688a      	ldr	r2, [r1, #8]
 8009786:	690b      	ldr	r3, [r1, #16]
 8009788:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800978c:	4293      	cmp	r3, r2
 800978e:	bfb8      	it	lt
 8009790:	4613      	movlt	r3, r2
 8009792:	6033      	str	r3, [r6, #0]
 8009794:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009798:	4607      	mov	r7, r0
 800979a:	460c      	mov	r4, r1
 800979c:	b10a      	cbz	r2, 80097a2 <_printf_common+0x26>
 800979e:	3301      	adds	r3, #1
 80097a0:	6033      	str	r3, [r6, #0]
 80097a2:	6823      	ldr	r3, [r4, #0]
 80097a4:	0699      	lsls	r1, r3, #26
 80097a6:	bf42      	ittt	mi
 80097a8:	6833      	ldrmi	r3, [r6, #0]
 80097aa:	3302      	addmi	r3, #2
 80097ac:	6033      	strmi	r3, [r6, #0]
 80097ae:	6825      	ldr	r5, [r4, #0]
 80097b0:	f015 0506 	ands.w	r5, r5, #6
 80097b4:	d106      	bne.n	80097c4 <_printf_common+0x48>
 80097b6:	f104 0a19 	add.w	sl, r4, #25
 80097ba:	68e3      	ldr	r3, [r4, #12]
 80097bc:	6832      	ldr	r2, [r6, #0]
 80097be:	1a9b      	subs	r3, r3, r2
 80097c0:	42ab      	cmp	r3, r5
 80097c2:	dc26      	bgt.n	8009812 <_printf_common+0x96>
 80097c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097c8:	1e13      	subs	r3, r2, #0
 80097ca:	6822      	ldr	r2, [r4, #0]
 80097cc:	bf18      	it	ne
 80097ce:	2301      	movne	r3, #1
 80097d0:	0692      	lsls	r2, r2, #26
 80097d2:	d42b      	bmi.n	800982c <_printf_common+0xb0>
 80097d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097d8:	4649      	mov	r1, r9
 80097da:	4638      	mov	r0, r7
 80097dc:	47c0      	blx	r8
 80097de:	3001      	adds	r0, #1
 80097e0:	d01e      	beq.n	8009820 <_printf_common+0xa4>
 80097e2:	6823      	ldr	r3, [r4, #0]
 80097e4:	68e5      	ldr	r5, [r4, #12]
 80097e6:	6832      	ldr	r2, [r6, #0]
 80097e8:	f003 0306 	and.w	r3, r3, #6
 80097ec:	2b04      	cmp	r3, #4
 80097ee:	bf08      	it	eq
 80097f0:	1aad      	subeq	r5, r5, r2
 80097f2:	68a3      	ldr	r3, [r4, #8]
 80097f4:	6922      	ldr	r2, [r4, #16]
 80097f6:	bf0c      	ite	eq
 80097f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097fc:	2500      	movne	r5, #0
 80097fe:	4293      	cmp	r3, r2
 8009800:	bfc4      	itt	gt
 8009802:	1a9b      	subgt	r3, r3, r2
 8009804:	18ed      	addgt	r5, r5, r3
 8009806:	2600      	movs	r6, #0
 8009808:	341a      	adds	r4, #26
 800980a:	42b5      	cmp	r5, r6
 800980c:	d11a      	bne.n	8009844 <_printf_common+0xc8>
 800980e:	2000      	movs	r0, #0
 8009810:	e008      	b.n	8009824 <_printf_common+0xa8>
 8009812:	2301      	movs	r3, #1
 8009814:	4652      	mov	r2, sl
 8009816:	4649      	mov	r1, r9
 8009818:	4638      	mov	r0, r7
 800981a:	47c0      	blx	r8
 800981c:	3001      	adds	r0, #1
 800981e:	d103      	bne.n	8009828 <_printf_common+0xac>
 8009820:	f04f 30ff 	mov.w	r0, #4294967295
 8009824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009828:	3501      	adds	r5, #1
 800982a:	e7c6      	b.n	80097ba <_printf_common+0x3e>
 800982c:	18e1      	adds	r1, r4, r3
 800982e:	1c5a      	adds	r2, r3, #1
 8009830:	2030      	movs	r0, #48	; 0x30
 8009832:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009836:	4422      	add	r2, r4
 8009838:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800983c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009840:	3302      	adds	r3, #2
 8009842:	e7c7      	b.n	80097d4 <_printf_common+0x58>
 8009844:	2301      	movs	r3, #1
 8009846:	4622      	mov	r2, r4
 8009848:	4649      	mov	r1, r9
 800984a:	4638      	mov	r0, r7
 800984c:	47c0      	blx	r8
 800984e:	3001      	adds	r0, #1
 8009850:	d0e6      	beq.n	8009820 <_printf_common+0xa4>
 8009852:	3601      	adds	r6, #1
 8009854:	e7d9      	b.n	800980a <_printf_common+0x8e>
	...

08009858 <_printf_i>:
 8009858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800985c:	7e0f      	ldrb	r7, [r1, #24]
 800985e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009860:	2f78      	cmp	r7, #120	; 0x78
 8009862:	4691      	mov	r9, r2
 8009864:	4680      	mov	r8, r0
 8009866:	460c      	mov	r4, r1
 8009868:	469a      	mov	sl, r3
 800986a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800986e:	d807      	bhi.n	8009880 <_printf_i+0x28>
 8009870:	2f62      	cmp	r7, #98	; 0x62
 8009872:	d80a      	bhi.n	800988a <_printf_i+0x32>
 8009874:	2f00      	cmp	r7, #0
 8009876:	f000 80d8 	beq.w	8009a2a <_printf_i+0x1d2>
 800987a:	2f58      	cmp	r7, #88	; 0x58
 800987c:	f000 80a3 	beq.w	80099c6 <_printf_i+0x16e>
 8009880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009884:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009888:	e03a      	b.n	8009900 <_printf_i+0xa8>
 800988a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800988e:	2b15      	cmp	r3, #21
 8009890:	d8f6      	bhi.n	8009880 <_printf_i+0x28>
 8009892:	a101      	add	r1, pc, #4	; (adr r1, 8009898 <_printf_i+0x40>)
 8009894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009898:	080098f1 	.word	0x080098f1
 800989c:	08009905 	.word	0x08009905
 80098a0:	08009881 	.word	0x08009881
 80098a4:	08009881 	.word	0x08009881
 80098a8:	08009881 	.word	0x08009881
 80098ac:	08009881 	.word	0x08009881
 80098b0:	08009905 	.word	0x08009905
 80098b4:	08009881 	.word	0x08009881
 80098b8:	08009881 	.word	0x08009881
 80098bc:	08009881 	.word	0x08009881
 80098c0:	08009881 	.word	0x08009881
 80098c4:	08009a11 	.word	0x08009a11
 80098c8:	08009935 	.word	0x08009935
 80098cc:	080099f3 	.word	0x080099f3
 80098d0:	08009881 	.word	0x08009881
 80098d4:	08009881 	.word	0x08009881
 80098d8:	08009a33 	.word	0x08009a33
 80098dc:	08009881 	.word	0x08009881
 80098e0:	08009935 	.word	0x08009935
 80098e4:	08009881 	.word	0x08009881
 80098e8:	08009881 	.word	0x08009881
 80098ec:	080099fb 	.word	0x080099fb
 80098f0:	682b      	ldr	r3, [r5, #0]
 80098f2:	1d1a      	adds	r2, r3, #4
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	602a      	str	r2, [r5, #0]
 80098f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009900:	2301      	movs	r3, #1
 8009902:	e0a3      	b.n	8009a4c <_printf_i+0x1f4>
 8009904:	6820      	ldr	r0, [r4, #0]
 8009906:	6829      	ldr	r1, [r5, #0]
 8009908:	0606      	lsls	r6, r0, #24
 800990a:	f101 0304 	add.w	r3, r1, #4
 800990e:	d50a      	bpl.n	8009926 <_printf_i+0xce>
 8009910:	680e      	ldr	r6, [r1, #0]
 8009912:	602b      	str	r3, [r5, #0]
 8009914:	2e00      	cmp	r6, #0
 8009916:	da03      	bge.n	8009920 <_printf_i+0xc8>
 8009918:	232d      	movs	r3, #45	; 0x2d
 800991a:	4276      	negs	r6, r6
 800991c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009920:	485e      	ldr	r0, [pc, #376]	; (8009a9c <_printf_i+0x244>)
 8009922:	230a      	movs	r3, #10
 8009924:	e019      	b.n	800995a <_printf_i+0x102>
 8009926:	680e      	ldr	r6, [r1, #0]
 8009928:	602b      	str	r3, [r5, #0]
 800992a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800992e:	bf18      	it	ne
 8009930:	b236      	sxthne	r6, r6
 8009932:	e7ef      	b.n	8009914 <_printf_i+0xbc>
 8009934:	682b      	ldr	r3, [r5, #0]
 8009936:	6820      	ldr	r0, [r4, #0]
 8009938:	1d19      	adds	r1, r3, #4
 800993a:	6029      	str	r1, [r5, #0]
 800993c:	0601      	lsls	r1, r0, #24
 800993e:	d501      	bpl.n	8009944 <_printf_i+0xec>
 8009940:	681e      	ldr	r6, [r3, #0]
 8009942:	e002      	b.n	800994a <_printf_i+0xf2>
 8009944:	0646      	lsls	r6, r0, #25
 8009946:	d5fb      	bpl.n	8009940 <_printf_i+0xe8>
 8009948:	881e      	ldrh	r6, [r3, #0]
 800994a:	4854      	ldr	r0, [pc, #336]	; (8009a9c <_printf_i+0x244>)
 800994c:	2f6f      	cmp	r7, #111	; 0x6f
 800994e:	bf0c      	ite	eq
 8009950:	2308      	moveq	r3, #8
 8009952:	230a      	movne	r3, #10
 8009954:	2100      	movs	r1, #0
 8009956:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800995a:	6865      	ldr	r5, [r4, #4]
 800995c:	60a5      	str	r5, [r4, #8]
 800995e:	2d00      	cmp	r5, #0
 8009960:	bfa2      	ittt	ge
 8009962:	6821      	ldrge	r1, [r4, #0]
 8009964:	f021 0104 	bicge.w	r1, r1, #4
 8009968:	6021      	strge	r1, [r4, #0]
 800996a:	b90e      	cbnz	r6, 8009970 <_printf_i+0x118>
 800996c:	2d00      	cmp	r5, #0
 800996e:	d04d      	beq.n	8009a0c <_printf_i+0x1b4>
 8009970:	4615      	mov	r5, r2
 8009972:	fbb6 f1f3 	udiv	r1, r6, r3
 8009976:	fb03 6711 	mls	r7, r3, r1, r6
 800997a:	5dc7      	ldrb	r7, [r0, r7]
 800997c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009980:	4637      	mov	r7, r6
 8009982:	42bb      	cmp	r3, r7
 8009984:	460e      	mov	r6, r1
 8009986:	d9f4      	bls.n	8009972 <_printf_i+0x11a>
 8009988:	2b08      	cmp	r3, #8
 800998a:	d10b      	bne.n	80099a4 <_printf_i+0x14c>
 800998c:	6823      	ldr	r3, [r4, #0]
 800998e:	07de      	lsls	r6, r3, #31
 8009990:	d508      	bpl.n	80099a4 <_printf_i+0x14c>
 8009992:	6923      	ldr	r3, [r4, #16]
 8009994:	6861      	ldr	r1, [r4, #4]
 8009996:	4299      	cmp	r1, r3
 8009998:	bfde      	ittt	le
 800999a:	2330      	movle	r3, #48	; 0x30
 800999c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80099a4:	1b52      	subs	r2, r2, r5
 80099a6:	6122      	str	r2, [r4, #16]
 80099a8:	f8cd a000 	str.w	sl, [sp]
 80099ac:	464b      	mov	r3, r9
 80099ae:	aa03      	add	r2, sp, #12
 80099b0:	4621      	mov	r1, r4
 80099b2:	4640      	mov	r0, r8
 80099b4:	f7ff fee2 	bl	800977c <_printf_common>
 80099b8:	3001      	adds	r0, #1
 80099ba:	d14c      	bne.n	8009a56 <_printf_i+0x1fe>
 80099bc:	f04f 30ff 	mov.w	r0, #4294967295
 80099c0:	b004      	add	sp, #16
 80099c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c6:	4835      	ldr	r0, [pc, #212]	; (8009a9c <_printf_i+0x244>)
 80099c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80099cc:	6829      	ldr	r1, [r5, #0]
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80099d4:	6029      	str	r1, [r5, #0]
 80099d6:	061d      	lsls	r5, r3, #24
 80099d8:	d514      	bpl.n	8009a04 <_printf_i+0x1ac>
 80099da:	07df      	lsls	r7, r3, #31
 80099dc:	bf44      	itt	mi
 80099de:	f043 0320 	orrmi.w	r3, r3, #32
 80099e2:	6023      	strmi	r3, [r4, #0]
 80099e4:	b91e      	cbnz	r6, 80099ee <_printf_i+0x196>
 80099e6:	6823      	ldr	r3, [r4, #0]
 80099e8:	f023 0320 	bic.w	r3, r3, #32
 80099ec:	6023      	str	r3, [r4, #0]
 80099ee:	2310      	movs	r3, #16
 80099f0:	e7b0      	b.n	8009954 <_printf_i+0xfc>
 80099f2:	6823      	ldr	r3, [r4, #0]
 80099f4:	f043 0320 	orr.w	r3, r3, #32
 80099f8:	6023      	str	r3, [r4, #0]
 80099fa:	2378      	movs	r3, #120	; 0x78
 80099fc:	4828      	ldr	r0, [pc, #160]	; (8009aa0 <_printf_i+0x248>)
 80099fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a02:	e7e3      	b.n	80099cc <_printf_i+0x174>
 8009a04:	0659      	lsls	r1, r3, #25
 8009a06:	bf48      	it	mi
 8009a08:	b2b6      	uxthmi	r6, r6
 8009a0a:	e7e6      	b.n	80099da <_printf_i+0x182>
 8009a0c:	4615      	mov	r5, r2
 8009a0e:	e7bb      	b.n	8009988 <_printf_i+0x130>
 8009a10:	682b      	ldr	r3, [r5, #0]
 8009a12:	6826      	ldr	r6, [r4, #0]
 8009a14:	6961      	ldr	r1, [r4, #20]
 8009a16:	1d18      	adds	r0, r3, #4
 8009a18:	6028      	str	r0, [r5, #0]
 8009a1a:	0635      	lsls	r5, r6, #24
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	d501      	bpl.n	8009a24 <_printf_i+0x1cc>
 8009a20:	6019      	str	r1, [r3, #0]
 8009a22:	e002      	b.n	8009a2a <_printf_i+0x1d2>
 8009a24:	0670      	lsls	r0, r6, #25
 8009a26:	d5fb      	bpl.n	8009a20 <_printf_i+0x1c8>
 8009a28:	8019      	strh	r1, [r3, #0]
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	6123      	str	r3, [r4, #16]
 8009a2e:	4615      	mov	r5, r2
 8009a30:	e7ba      	b.n	80099a8 <_printf_i+0x150>
 8009a32:	682b      	ldr	r3, [r5, #0]
 8009a34:	1d1a      	adds	r2, r3, #4
 8009a36:	602a      	str	r2, [r5, #0]
 8009a38:	681d      	ldr	r5, [r3, #0]
 8009a3a:	6862      	ldr	r2, [r4, #4]
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	4628      	mov	r0, r5
 8009a40:	f7f6 fbe6 	bl	8000210 <memchr>
 8009a44:	b108      	cbz	r0, 8009a4a <_printf_i+0x1f2>
 8009a46:	1b40      	subs	r0, r0, r5
 8009a48:	6060      	str	r0, [r4, #4]
 8009a4a:	6863      	ldr	r3, [r4, #4]
 8009a4c:	6123      	str	r3, [r4, #16]
 8009a4e:	2300      	movs	r3, #0
 8009a50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a54:	e7a8      	b.n	80099a8 <_printf_i+0x150>
 8009a56:	6923      	ldr	r3, [r4, #16]
 8009a58:	462a      	mov	r2, r5
 8009a5a:	4649      	mov	r1, r9
 8009a5c:	4640      	mov	r0, r8
 8009a5e:	47d0      	blx	sl
 8009a60:	3001      	adds	r0, #1
 8009a62:	d0ab      	beq.n	80099bc <_printf_i+0x164>
 8009a64:	6823      	ldr	r3, [r4, #0]
 8009a66:	079b      	lsls	r3, r3, #30
 8009a68:	d413      	bmi.n	8009a92 <_printf_i+0x23a>
 8009a6a:	68e0      	ldr	r0, [r4, #12]
 8009a6c:	9b03      	ldr	r3, [sp, #12]
 8009a6e:	4298      	cmp	r0, r3
 8009a70:	bfb8      	it	lt
 8009a72:	4618      	movlt	r0, r3
 8009a74:	e7a4      	b.n	80099c0 <_printf_i+0x168>
 8009a76:	2301      	movs	r3, #1
 8009a78:	4632      	mov	r2, r6
 8009a7a:	4649      	mov	r1, r9
 8009a7c:	4640      	mov	r0, r8
 8009a7e:	47d0      	blx	sl
 8009a80:	3001      	adds	r0, #1
 8009a82:	d09b      	beq.n	80099bc <_printf_i+0x164>
 8009a84:	3501      	adds	r5, #1
 8009a86:	68e3      	ldr	r3, [r4, #12]
 8009a88:	9903      	ldr	r1, [sp, #12]
 8009a8a:	1a5b      	subs	r3, r3, r1
 8009a8c:	42ab      	cmp	r3, r5
 8009a8e:	dcf2      	bgt.n	8009a76 <_printf_i+0x21e>
 8009a90:	e7eb      	b.n	8009a6a <_printf_i+0x212>
 8009a92:	2500      	movs	r5, #0
 8009a94:	f104 0619 	add.w	r6, r4, #25
 8009a98:	e7f5      	b.n	8009a86 <_printf_i+0x22e>
 8009a9a:	bf00      	nop
 8009a9c:	0800ddf2 	.word	0x0800ddf2
 8009aa0:	0800de03 	.word	0x0800de03

08009aa4 <_scanf_float>:
 8009aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa8:	b087      	sub	sp, #28
 8009aaa:	4617      	mov	r7, r2
 8009aac:	9303      	str	r3, [sp, #12]
 8009aae:	688b      	ldr	r3, [r1, #8]
 8009ab0:	1e5a      	subs	r2, r3, #1
 8009ab2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009ab6:	bf83      	ittte	hi
 8009ab8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009abc:	195b      	addhi	r3, r3, r5
 8009abe:	9302      	strhi	r3, [sp, #8]
 8009ac0:	2300      	movls	r3, #0
 8009ac2:	bf86      	itte	hi
 8009ac4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009ac8:	608b      	strhi	r3, [r1, #8]
 8009aca:	9302      	strls	r3, [sp, #8]
 8009acc:	680b      	ldr	r3, [r1, #0]
 8009ace:	468b      	mov	fp, r1
 8009ad0:	2500      	movs	r5, #0
 8009ad2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009ad6:	f84b 3b1c 	str.w	r3, [fp], #28
 8009ada:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009ade:	4680      	mov	r8, r0
 8009ae0:	460c      	mov	r4, r1
 8009ae2:	465e      	mov	r6, fp
 8009ae4:	46aa      	mov	sl, r5
 8009ae6:	46a9      	mov	r9, r5
 8009ae8:	9501      	str	r5, [sp, #4]
 8009aea:	68a2      	ldr	r2, [r4, #8]
 8009aec:	b152      	cbz	r2, 8009b04 <_scanf_float+0x60>
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	2b4e      	cmp	r3, #78	; 0x4e
 8009af4:	d864      	bhi.n	8009bc0 <_scanf_float+0x11c>
 8009af6:	2b40      	cmp	r3, #64	; 0x40
 8009af8:	d83c      	bhi.n	8009b74 <_scanf_float+0xd0>
 8009afa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009afe:	b2c8      	uxtb	r0, r1
 8009b00:	280e      	cmp	r0, #14
 8009b02:	d93a      	bls.n	8009b7a <_scanf_float+0xd6>
 8009b04:	f1b9 0f00 	cmp.w	r9, #0
 8009b08:	d003      	beq.n	8009b12 <_scanf_float+0x6e>
 8009b0a:	6823      	ldr	r3, [r4, #0]
 8009b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b10:	6023      	str	r3, [r4, #0]
 8009b12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b16:	f1ba 0f01 	cmp.w	sl, #1
 8009b1a:	f200 8113 	bhi.w	8009d44 <_scanf_float+0x2a0>
 8009b1e:	455e      	cmp	r6, fp
 8009b20:	f200 8105 	bhi.w	8009d2e <_scanf_float+0x28a>
 8009b24:	2501      	movs	r5, #1
 8009b26:	4628      	mov	r0, r5
 8009b28:	b007      	add	sp, #28
 8009b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b2e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009b32:	2a0d      	cmp	r2, #13
 8009b34:	d8e6      	bhi.n	8009b04 <_scanf_float+0x60>
 8009b36:	a101      	add	r1, pc, #4	; (adr r1, 8009b3c <_scanf_float+0x98>)
 8009b38:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009b3c:	08009c7b 	.word	0x08009c7b
 8009b40:	08009b05 	.word	0x08009b05
 8009b44:	08009b05 	.word	0x08009b05
 8009b48:	08009b05 	.word	0x08009b05
 8009b4c:	08009cdb 	.word	0x08009cdb
 8009b50:	08009cb3 	.word	0x08009cb3
 8009b54:	08009b05 	.word	0x08009b05
 8009b58:	08009b05 	.word	0x08009b05
 8009b5c:	08009c89 	.word	0x08009c89
 8009b60:	08009b05 	.word	0x08009b05
 8009b64:	08009b05 	.word	0x08009b05
 8009b68:	08009b05 	.word	0x08009b05
 8009b6c:	08009b05 	.word	0x08009b05
 8009b70:	08009c41 	.word	0x08009c41
 8009b74:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009b78:	e7db      	b.n	8009b32 <_scanf_float+0x8e>
 8009b7a:	290e      	cmp	r1, #14
 8009b7c:	d8c2      	bhi.n	8009b04 <_scanf_float+0x60>
 8009b7e:	a001      	add	r0, pc, #4	; (adr r0, 8009b84 <_scanf_float+0xe0>)
 8009b80:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009b84:	08009c33 	.word	0x08009c33
 8009b88:	08009b05 	.word	0x08009b05
 8009b8c:	08009c33 	.word	0x08009c33
 8009b90:	08009cc7 	.word	0x08009cc7
 8009b94:	08009b05 	.word	0x08009b05
 8009b98:	08009be1 	.word	0x08009be1
 8009b9c:	08009c1d 	.word	0x08009c1d
 8009ba0:	08009c1d 	.word	0x08009c1d
 8009ba4:	08009c1d 	.word	0x08009c1d
 8009ba8:	08009c1d 	.word	0x08009c1d
 8009bac:	08009c1d 	.word	0x08009c1d
 8009bb0:	08009c1d 	.word	0x08009c1d
 8009bb4:	08009c1d 	.word	0x08009c1d
 8009bb8:	08009c1d 	.word	0x08009c1d
 8009bbc:	08009c1d 	.word	0x08009c1d
 8009bc0:	2b6e      	cmp	r3, #110	; 0x6e
 8009bc2:	d809      	bhi.n	8009bd8 <_scanf_float+0x134>
 8009bc4:	2b60      	cmp	r3, #96	; 0x60
 8009bc6:	d8b2      	bhi.n	8009b2e <_scanf_float+0x8a>
 8009bc8:	2b54      	cmp	r3, #84	; 0x54
 8009bca:	d077      	beq.n	8009cbc <_scanf_float+0x218>
 8009bcc:	2b59      	cmp	r3, #89	; 0x59
 8009bce:	d199      	bne.n	8009b04 <_scanf_float+0x60>
 8009bd0:	2d07      	cmp	r5, #7
 8009bd2:	d197      	bne.n	8009b04 <_scanf_float+0x60>
 8009bd4:	2508      	movs	r5, #8
 8009bd6:	e029      	b.n	8009c2c <_scanf_float+0x188>
 8009bd8:	2b74      	cmp	r3, #116	; 0x74
 8009bda:	d06f      	beq.n	8009cbc <_scanf_float+0x218>
 8009bdc:	2b79      	cmp	r3, #121	; 0x79
 8009bde:	e7f6      	b.n	8009bce <_scanf_float+0x12a>
 8009be0:	6821      	ldr	r1, [r4, #0]
 8009be2:	05c8      	lsls	r0, r1, #23
 8009be4:	d51a      	bpl.n	8009c1c <_scanf_float+0x178>
 8009be6:	9b02      	ldr	r3, [sp, #8]
 8009be8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009bec:	6021      	str	r1, [r4, #0]
 8009bee:	f109 0901 	add.w	r9, r9, #1
 8009bf2:	b11b      	cbz	r3, 8009bfc <_scanf_float+0x158>
 8009bf4:	3b01      	subs	r3, #1
 8009bf6:	3201      	adds	r2, #1
 8009bf8:	9302      	str	r3, [sp, #8]
 8009bfa:	60a2      	str	r2, [r4, #8]
 8009bfc:	68a3      	ldr	r3, [r4, #8]
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	60a3      	str	r3, [r4, #8]
 8009c02:	6923      	ldr	r3, [r4, #16]
 8009c04:	3301      	adds	r3, #1
 8009c06:	6123      	str	r3, [r4, #16]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	607b      	str	r3, [r7, #4]
 8009c10:	f340 8084 	ble.w	8009d1c <_scanf_float+0x278>
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	3301      	adds	r3, #1
 8009c18:	603b      	str	r3, [r7, #0]
 8009c1a:	e766      	b.n	8009aea <_scanf_float+0x46>
 8009c1c:	eb1a 0f05 	cmn.w	sl, r5
 8009c20:	f47f af70 	bne.w	8009b04 <_scanf_float+0x60>
 8009c24:	6822      	ldr	r2, [r4, #0]
 8009c26:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009c2a:	6022      	str	r2, [r4, #0]
 8009c2c:	f806 3b01 	strb.w	r3, [r6], #1
 8009c30:	e7e4      	b.n	8009bfc <_scanf_float+0x158>
 8009c32:	6822      	ldr	r2, [r4, #0]
 8009c34:	0610      	lsls	r0, r2, #24
 8009c36:	f57f af65 	bpl.w	8009b04 <_scanf_float+0x60>
 8009c3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c3e:	e7f4      	b.n	8009c2a <_scanf_float+0x186>
 8009c40:	f1ba 0f00 	cmp.w	sl, #0
 8009c44:	d10e      	bne.n	8009c64 <_scanf_float+0x1c0>
 8009c46:	f1b9 0f00 	cmp.w	r9, #0
 8009c4a:	d10e      	bne.n	8009c6a <_scanf_float+0x1c6>
 8009c4c:	6822      	ldr	r2, [r4, #0]
 8009c4e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009c52:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009c56:	d108      	bne.n	8009c6a <_scanf_float+0x1c6>
 8009c58:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009c5c:	6022      	str	r2, [r4, #0]
 8009c5e:	f04f 0a01 	mov.w	sl, #1
 8009c62:	e7e3      	b.n	8009c2c <_scanf_float+0x188>
 8009c64:	f1ba 0f02 	cmp.w	sl, #2
 8009c68:	d055      	beq.n	8009d16 <_scanf_float+0x272>
 8009c6a:	2d01      	cmp	r5, #1
 8009c6c:	d002      	beq.n	8009c74 <_scanf_float+0x1d0>
 8009c6e:	2d04      	cmp	r5, #4
 8009c70:	f47f af48 	bne.w	8009b04 <_scanf_float+0x60>
 8009c74:	3501      	adds	r5, #1
 8009c76:	b2ed      	uxtb	r5, r5
 8009c78:	e7d8      	b.n	8009c2c <_scanf_float+0x188>
 8009c7a:	f1ba 0f01 	cmp.w	sl, #1
 8009c7e:	f47f af41 	bne.w	8009b04 <_scanf_float+0x60>
 8009c82:	f04f 0a02 	mov.w	sl, #2
 8009c86:	e7d1      	b.n	8009c2c <_scanf_float+0x188>
 8009c88:	b97d      	cbnz	r5, 8009caa <_scanf_float+0x206>
 8009c8a:	f1b9 0f00 	cmp.w	r9, #0
 8009c8e:	f47f af3c 	bne.w	8009b0a <_scanf_float+0x66>
 8009c92:	6822      	ldr	r2, [r4, #0]
 8009c94:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009c98:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009c9c:	f47f af39 	bne.w	8009b12 <_scanf_float+0x6e>
 8009ca0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009ca4:	6022      	str	r2, [r4, #0]
 8009ca6:	2501      	movs	r5, #1
 8009ca8:	e7c0      	b.n	8009c2c <_scanf_float+0x188>
 8009caa:	2d03      	cmp	r5, #3
 8009cac:	d0e2      	beq.n	8009c74 <_scanf_float+0x1d0>
 8009cae:	2d05      	cmp	r5, #5
 8009cb0:	e7de      	b.n	8009c70 <_scanf_float+0x1cc>
 8009cb2:	2d02      	cmp	r5, #2
 8009cb4:	f47f af26 	bne.w	8009b04 <_scanf_float+0x60>
 8009cb8:	2503      	movs	r5, #3
 8009cba:	e7b7      	b.n	8009c2c <_scanf_float+0x188>
 8009cbc:	2d06      	cmp	r5, #6
 8009cbe:	f47f af21 	bne.w	8009b04 <_scanf_float+0x60>
 8009cc2:	2507      	movs	r5, #7
 8009cc4:	e7b2      	b.n	8009c2c <_scanf_float+0x188>
 8009cc6:	6822      	ldr	r2, [r4, #0]
 8009cc8:	0591      	lsls	r1, r2, #22
 8009cca:	f57f af1b 	bpl.w	8009b04 <_scanf_float+0x60>
 8009cce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009cd2:	6022      	str	r2, [r4, #0]
 8009cd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009cd8:	e7a8      	b.n	8009c2c <_scanf_float+0x188>
 8009cda:	6822      	ldr	r2, [r4, #0]
 8009cdc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009ce0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009ce4:	d006      	beq.n	8009cf4 <_scanf_float+0x250>
 8009ce6:	0550      	lsls	r0, r2, #21
 8009ce8:	f57f af0c 	bpl.w	8009b04 <_scanf_float+0x60>
 8009cec:	f1b9 0f00 	cmp.w	r9, #0
 8009cf0:	f43f af0f 	beq.w	8009b12 <_scanf_float+0x6e>
 8009cf4:	0591      	lsls	r1, r2, #22
 8009cf6:	bf58      	it	pl
 8009cf8:	9901      	ldrpl	r1, [sp, #4]
 8009cfa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009cfe:	bf58      	it	pl
 8009d00:	eba9 0101 	subpl.w	r1, r9, r1
 8009d04:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009d08:	bf58      	it	pl
 8009d0a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009d0e:	6022      	str	r2, [r4, #0]
 8009d10:	f04f 0900 	mov.w	r9, #0
 8009d14:	e78a      	b.n	8009c2c <_scanf_float+0x188>
 8009d16:	f04f 0a03 	mov.w	sl, #3
 8009d1a:	e787      	b.n	8009c2c <_scanf_float+0x188>
 8009d1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009d20:	4639      	mov	r1, r7
 8009d22:	4640      	mov	r0, r8
 8009d24:	4798      	blx	r3
 8009d26:	2800      	cmp	r0, #0
 8009d28:	f43f aedf 	beq.w	8009aea <_scanf_float+0x46>
 8009d2c:	e6ea      	b.n	8009b04 <_scanf_float+0x60>
 8009d2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009d36:	463a      	mov	r2, r7
 8009d38:	4640      	mov	r0, r8
 8009d3a:	4798      	blx	r3
 8009d3c:	6923      	ldr	r3, [r4, #16]
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	6123      	str	r3, [r4, #16]
 8009d42:	e6ec      	b.n	8009b1e <_scanf_float+0x7a>
 8009d44:	1e6b      	subs	r3, r5, #1
 8009d46:	2b06      	cmp	r3, #6
 8009d48:	d825      	bhi.n	8009d96 <_scanf_float+0x2f2>
 8009d4a:	2d02      	cmp	r5, #2
 8009d4c:	d836      	bhi.n	8009dbc <_scanf_float+0x318>
 8009d4e:	455e      	cmp	r6, fp
 8009d50:	f67f aee8 	bls.w	8009b24 <_scanf_float+0x80>
 8009d54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d58:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009d5c:	463a      	mov	r2, r7
 8009d5e:	4640      	mov	r0, r8
 8009d60:	4798      	blx	r3
 8009d62:	6923      	ldr	r3, [r4, #16]
 8009d64:	3b01      	subs	r3, #1
 8009d66:	6123      	str	r3, [r4, #16]
 8009d68:	e7f1      	b.n	8009d4e <_scanf_float+0x2aa>
 8009d6a:	9802      	ldr	r0, [sp, #8]
 8009d6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d70:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009d74:	9002      	str	r0, [sp, #8]
 8009d76:	463a      	mov	r2, r7
 8009d78:	4640      	mov	r0, r8
 8009d7a:	4798      	blx	r3
 8009d7c:	6923      	ldr	r3, [r4, #16]
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	6123      	str	r3, [r4, #16]
 8009d82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d86:	fa5f fa8a 	uxtb.w	sl, sl
 8009d8a:	f1ba 0f02 	cmp.w	sl, #2
 8009d8e:	d1ec      	bne.n	8009d6a <_scanf_float+0x2c6>
 8009d90:	3d03      	subs	r5, #3
 8009d92:	b2ed      	uxtb	r5, r5
 8009d94:	1b76      	subs	r6, r6, r5
 8009d96:	6823      	ldr	r3, [r4, #0]
 8009d98:	05da      	lsls	r2, r3, #23
 8009d9a:	d52f      	bpl.n	8009dfc <_scanf_float+0x358>
 8009d9c:	055b      	lsls	r3, r3, #21
 8009d9e:	d510      	bpl.n	8009dc2 <_scanf_float+0x31e>
 8009da0:	455e      	cmp	r6, fp
 8009da2:	f67f aebf 	bls.w	8009b24 <_scanf_float+0x80>
 8009da6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009daa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009dae:	463a      	mov	r2, r7
 8009db0:	4640      	mov	r0, r8
 8009db2:	4798      	blx	r3
 8009db4:	6923      	ldr	r3, [r4, #16]
 8009db6:	3b01      	subs	r3, #1
 8009db8:	6123      	str	r3, [r4, #16]
 8009dba:	e7f1      	b.n	8009da0 <_scanf_float+0x2fc>
 8009dbc:	46aa      	mov	sl, r5
 8009dbe:	9602      	str	r6, [sp, #8]
 8009dc0:	e7df      	b.n	8009d82 <_scanf_float+0x2de>
 8009dc2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009dc6:	6923      	ldr	r3, [r4, #16]
 8009dc8:	2965      	cmp	r1, #101	; 0x65
 8009dca:	f103 33ff 	add.w	r3, r3, #4294967295
 8009dce:	f106 35ff 	add.w	r5, r6, #4294967295
 8009dd2:	6123      	str	r3, [r4, #16]
 8009dd4:	d00c      	beq.n	8009df0 <_scanf_float+0x34c>
 8009dd6:	2945      	cmp	r1, #69	; 0x45
 8009dd8:	d00a      	beq.n	8009df0 <_scanf_float+0x34c>
 8009dda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009dde:	463a      	mov	r2, r7
 8009de0:	4640      	mov	r0, r8
 8009de2:	4798      	blx	r3
 8009de4:	6923      	ldr	r3, [r4, #16]
 8009de6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009dea:	3b01      	subs	r3, #1
 8009dec:	1eb5      	subs	r5, r6, #2
 8009dee:	6123      	str	r3, [r4, #16]
 8009df0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009df4:	463a      	mov	r2, r7
 8009df6:	4640      	mov	r0, r8
 8009df8:	4798      	blx	r3
 8009dfa:	462e      	mov	r6, r5
 8009dfc:	6825      	ldr	r5, [r4, #0]
 8009dfe:	f015 0510 	ands.w	r5, r5, #16
 8009e02:	d159      	bne.n	8009eb8 <_scanf_float+0x414>
 8009e04:	7035      	strb	r5, [r6, #0]
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e10:	d11b      	bne.n	8009e4a <_scanf_float+0x3a6>
 8009e12:	9b01      	ldr	r3, [sp, #4]
 8009e14:	454b      	cmp	r3, r9
 8009e16:	eba3 0209 	sub.w	r2, r3, r9
 8009e1a:	d123      	bne.n	8009e64 <_scanf_float+0x3c0>
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	4659      	mov	r1, fp
 8009e20:	4640      	mov	r0, r8
 8009e22:	f000 feaf 	bl	800ab84 <_strtod_r>
 8009e26:	6822      	ldr	r2, [r4, #0]
 8009e28:	9b03      	ldr	r3, [sp, #12]
 8009e2a:	f012 0f02 	tst.w	r2, #2
 8009e2e:	ec57 6b10 	vmov	r6, r7, d0
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	d021      	beq.n	8009e7a <_scanf_float+0x3d6>
 8009e36:	9903      	ldr	r1, [sp, #12]
 8009e38:	1d1a      	adds	r2, r3, #4
 8009e3a:	600a      	str	r2, [r1, #0]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	e9c3 6700 	strd	r6, r7, [r3]
 8009e42:	68e3      	ldr	r3, [r4, #12]
 8009e44:	3301      	adds	r3, #1
 8009e46:	60e3      	str	r3, [r4, #12]
 8009e48:	e66d      	b.n	8009b26 <_scanf_float+0x82>
 8009e4a:	9b04      	ldr	r3, [sp, #16]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d0e5      	beq.n	8009e1c <_scanf_float+0x378>
 8009e50:	9905      	ldr	r1, [sp, #20]
 8009e52:	230a      	movs	r3, #10
 8009e54:	462a      	mov	r2, r5
 8009e56:	3101      	adds	r1, #1
 8009e58:	4640      	mov	r0, r8
 8009e5a:	f000 ff1b 	bl	800ac94 <_strtol_r>
 8009e5e:	9b04      	ldr	r3, [sp, #16]
 8009e60:	9e05      	ldr	r6, [sp, #20]
 8009e62:	1ac2      	subs	r2, r0, r3
 8009e64:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009e68:	429e      	cmp	r6, r3
 8009e6a:	bf28      	it	cs
 8009e6c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009e70:	4912      	ldr	r1, [pc, #72]	; (8009ebc <_scanf_float+0x418>)
 8009e72:	4630      	mov	r0, r6
 8009e74:	f000 f844 	bl	8009f00 <siprintf>
 8009e78:	e7d0      	b.n	8009e1c <_scanf_float+0x378>
 8009e7a:	9903      	ldr	r1, [sp, #12]
 8009e7c:	f012 0f04 	tst.w	r2, #4
 8009e80:	f103 0204 	add.w	r2, r3, #4
 8009e84:	600a      	str	r2, [r1, #0]
 8009e86:	d1d9      	bne.n	8009e3c <_scanf_float+0x398>
 8009e88:	f8d3 8000 	ldr.w	r8, [r3]
 8009e8c:	ee10 2a10 	vmov	r2, s0
 8009e90:	ee10 0a10 	vmov	r0, s0
 8009e94:	463b      	mov	r3, r7
 8009e96:	4639      	mov	r1, r7
 8009e98:	f7f6 fe60 	bl	8000b5c <__aeabi_dcmpun>
 8009e9c:	b128      	cbz	r0, 8009eaa <_scanf_float+0x406>
 8009e9e:	4808      	ldr	r0, [pc, #32]	; (8009ec0 <_scanf_float+0x41c>)
 8009ea0:	f000 f828 	bl	8009ef4 <nanf>
 8009ea4:	ed88 0a00 	vstr	s0, [r8]
 8009ea8:	e7cb      	b.n	8009e42 <_scanf_float+0x39e>
 8009eaa:	4630      	mov	r0, r6
 8009eac:	4639      	mov	r1, r7
 8009eae:	f7f6 feb3 	bl	8000c18 <__aeabi_d2f>
 8009eb2:	f8c8 0000 	str.w	r0, [r8]
 8009eb6:	e7c4      	b.n	8009e42 <_scanf_float+0x39e>
 8009eb8:	2500      	movs	r5, #0
 8009eba:	e634      	b.n	8009b26 <_scanf_float+0x82>
 8009ebc:	0800de14 	.word	0x0800de14
 8009ec0:	0800e288 	.word	0x0800e288

08009ec4 <iprintf>:
 8009ec4:	b40f      	push	{r0, r1, r2, r3}
 8009ec6:	4b0a      	ldr	r3, [pc, #40]	; (8009ef0 <iprintf+0x2c>)
 8009ec8:	b513      	push	{r0, r1, r4, lr}
 8009eca:	681c      	ldr	r4, [r3, #0]
 8009ecc:	b124      	cbz	r4, 8009ed8 <iprintf+0x14>
 8009ece:	69a3      	ldr	r3, [r4, #24]
 8009ed0:	b913      	cbnz	r3, 8009ed8 <iprintf+0x14>
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	f001 fdb2 	bl	800ba3c <__sinit>
 8009ed8:	ab05      	add	r3, sp, #20
 8009eda:	9a04      	ldr	r2, [sp, #16]
 8009edc:	68a1      	ldr	r1, [r4, #8]
 8009ede:	9301      	str	r3, [sp, #4]
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	f003 f917 	bl	800d114 <_vfiprintf_r>
 8009ee6:	b002      	add	sp, #8
 8009ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eec:	b004      	add	sp, #16
 8009eee:	4770      	bx	lr
 8009ef0:	20000018 	.word	0x20000018

08009ef4 <nanf>:
 8009ef4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009efc <nanf+0x8>
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	7fc00000 	.word	0x7fc00000

08009f00 <siprintf>:
 8009f00:	b40e      	push	{r1, r2, r3}
 8009f02:	b500      	push	{lr}
 8009f04:	b09c      	sub	sp, #112	; 0x70
 8009f06:	ab1d      	add	r3, sp, #116	; 0x74
 8009f08:	9002      	str	r0, [sp, #8]
 8009f0a:	9006      	str	r0, [sp, #24]
 8009f0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f10:	4809      	ldr	r0, [pc, #36]	; (8009f38 <siprintf+0x38>)
 8009f12:	9107      	str	r1, [sp, #28]
 8009f14:	9104      	str	r1, [sp, #16]
 8009f16:	4909      	ldr	r1, [pc, #36]	; (8009f3c <siprintf+0x3c>)
 8009f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f1c:	9105      	str	r1, [sp, #20]
 8009f1e:	6800      	ldr	r0, [r0, #0]
 8009f20:	9301      	str	r3, [sp, #4]
 8009f22:	a902      	add	r1, sp, #8
 8009f24:	f002 ffcc 	bl	800cec0 <_svfiprintf_r>
 8009f28:	9b02      	ldr	r3, [sp, #8]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	701a      	strb	r2, [r3, #0]
 8009f2e:	b01c      	add	sp, #112	; 0x70
 8009f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f34:	b003      	add	sp, #12
 8009f36:	4770      	bx	lr
 8009f38:	20000018 	.word	0x20000018
 8009f3c:	ffff0208 	.word	0xffff0208

08009f40 <sulp>:
 8009f40:	b570      	push	{r4, r5, r6, lr}
 8009f42:	4604      	mov	r4, r0
 8009f44:	460d      	mov	r5, r1
 8009f46:	ec45 4b10 	vmov	d0, r4, r5
 8009f4a:	4616      	mov	r6, r2
 8009f4c:	f002 fd16 	bl	800c97c <__ulp>
 8009f50:	ec51 0b10 	vmov	r0, r1, d0
 8009f54:	b17e      	cbz	r6, 8009f76 <sulp+0x36>
 8009f56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009f5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	dd09      	ble.n	8009f76 <sulp+0x36>
 8009f62:	051b      	lsls	r3, r3, #20
 8009f64:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009f68:	2400      	movs	r4, #0
 8009f6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009f6e:	4622      	mov	r2, r4
 8009f70:	462b      	mov	r3, r5
 8009f72:	f7f6 fb59 	bl	8000628 <__aeabi_dmul>
 8009f76:	bd70      	pop	{r4, r5, r6, pc}

08009f78 <_strtod_l>:
 8009f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f7c:	ed2d 8b02 	vpush	{d8}
 8009f80:	b09d      	sub	sp, #116	; 0x74
 8009f82:	461f      	mov	r7, r3
 8009f84:	2300      	movs	r3, #0
 8009f86:	9318      	str	r3, [sp, #96]	; 0x60
 8009f88:	4ba2      	ldr	r3, [pc, #648]	; (800a214 <_strtod_l+0x29c>)
 8009f8a:	9213      	str	r2, [sp, #76]	; 0x4c
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	9305      	str	r3, [sp, #20]
 8009f90:	4604      	mov	r4, r0
 8009f92:	4618      	mov	r0, r3
 8009f94:	4688      	mov	r8, r1
 8009f96:	f7f6 f933 	bl	8000200 <strlen>
 8009f9a:	f04f 0a00 	mov.w	sl, #0
 8009f9e:	4605      	mov	r5, r0
 8009fa0:	f04f 0b00 	mov.w	fp, #0
 8009fa4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009fa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009faa:	781a      	ldrb	r2, [r3, #0]
 8009fac:	2a2b      	cmp	r2, #43	; 0x2b
 8009fae:	d04e      	beq.n	800a04e <_strtod_l+0xd6>
 8009fb0:	d83b      	bhi.n	800a02a <_strtod_l+0xb2>
 8009fb2:	2a0d      	cmp	r2, #13
 8009fb4:	d834      	bhi.n	800a020 <_strtod_l+0xa8>
 8009fb6:	2a08      	cmp	r2, #8
 8009fb8:	d834      	bhi.n	800a024 <_strtod_l+0xac>
 8009fba:	2a00      	cmp	r2, #0
 8009fbc:	d03e      	beq.n	800a03c <_strtod_l+0xc4>
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	930a      	str	r3, [sp, #40]	; 0x28
 8009fc2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009fc4:	7833      	ldrb	r3, [r6, #0]
 8009fc6:	2b30      	cmp	r3, #48	; 0x30
 8009fc8:	f040 80b0 	bne.w	800a12c <_strtod_l+0x1b4>
 8009fcc:	7873      	ldrb	r3, [r6, #1]
 8009fce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009fd2:	2b58      	cmp	r3, #88	; 0x58
 8009fd4:	d168      	bne.n	800a0a8 <_strtod_l+0x130>
 8009fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fd8:	9301      	str	r3, [sp, #4]
 8009fda:	ab18      	add	r3, sp, #96	; 0x60
 8009fdc:	9702      	str	r7, [sp, #8]
 8009fde:	9300      	str	r3, [sp, #0]
 8009fe0:	4a8d      	ldr	r2, [pc, #564]	; (800a218 <_strtod_l+0x2a0>)
 8009fe2:	ab19      	add	r3, sp, #100	; 0x64
 8009fe4:	a917      	add	r1, sp, #92	; 0x5c
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f001 fe2c 	bl	800bc44 <__gethex>
 8009fec:	f010 0707 	ands.w	r7, r0, #7
 8009ff0:	4605      	mov	r5, r0
 8009ff2:	d005      	beq.n	800a000 <_strtod_l+0x88>
 8009ff4:	2f06      	cmp	r7, #6
 8009ff6:	d12c      	bne.n	800a052 <_strtod_l+0xda>
 8009ff8:	3601      	adds	r6, #1
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	9617      	str	r6, [sp, #92]	; 0x5c
 8009ffe:	930a      	str	r3, [sp, #40]	; 0x28
 800a000:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a002:	2b00      	cmp	r3, #0
 800a004:	f040 8590 	bne.w	800ab28 <_strtod_l+0xbb0>
 800a008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a00a:	b1eb      	cbz	r3, 800a048 <_strtod_l+0xd0>
 800a00c:	4652      	mov	r2, sl
 800a00e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a012:	ec43 2b10 	vmov	d0, r2, r3
 800a016:	b01d      	add	sp, #116	; 0x74
 800a018:	ecbd 8b02 	vpop	{d8}
 800a01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a020:	2a20      	cmp	r2, #32
 800a022:	d1cc      	bne.n	8009fbe <_strtod_l+0x46>
 800a024:	3301      	adds	r3, #1
 800a026:	9317      	str	r3, [sp, #92]	; 0x5c
 800a028:	e7be      	b.n	8009fa8 <_strtod_l+0x30>
 800a02a:	2a2d      	cmp	r2, #45	; 0x2d
 800a02c:	d1c7      	bne.n	8009fbe <_strtod_l+0x46>
 800a02e:	2201      	movs	r2, #1
 800a030:	920a      	str	r2, [sp, #40]	; 0x28
 800a032:	1c5a      	adds	r2, r3, #1
 800a034:	9217      	str	r2, [sp, #92]	; 0x5c
 800a036:	785b      	ldrb	r3, [r3, #1]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1c2      	bne.n	8009fc2 <_strtod_l+0x4a>
 800a03c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a03e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a042:	2b00      	cmp	r3, #0
 800a044:	f040 856e 	bne.w	800ab24 <_strtod_l+0xbac>
 800a048:	4652      	mov	r2, sl
 800a04a:	465b      	mov	r3, fp
 800a04c:	e7e1      	b.n	800a012 <_strtod_l+0x9a>
 800a04e:	2200      	movs	r2, #0
 800a050:	e7ee      	b.n	800a030 <_strtod_l+0xb8>
 800a052:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a054:	b13a      	cbz	r2, 800a066 <_strtod_l+0xee>
 800a056:	2135      	movs	r1, #53	; 0x35
 800a058:	a81a      	add	r0, sp, #104	; 0x68
 800a05a:	f002 fd9a 	bl	800cb92 <__copybits>
 800a05e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a060:	4620      	mov	r0, r4
 800a062:	f002 f959 	bl	800c318 <_Bfree>
 800a066:	3f01      	subs	r7, #1
 800a068:	2f04      	cmp	r7, #4
 800a06a:	d806      	bhi.n	800a07a <_strtod_l+0x102>
 800a06c:	e8df f007 	tbb	[pc, r7]
 800a070:	1714030a 	.word	0x1714030a
 800a074:	0a          	.byte	0x0a
 800a075:	00          	.byte	0x00
 800a076:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a07a:	0728      	lsls	r0, r5, #28
 800a07c:	d5c0      	bpl.n	800a000 <_strtod_l+0x88>
 800a07e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a082:	e7bd      	b.n	800a000 <_strtod_l+0x88>
 800a084:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a088:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a08a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a08e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a092:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a096:	e7f0      	b.n	800a07a <_strtod_l+0x102>
 800a098:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a21c <_strtod_l+0x2a4>
 800a09c:	e7ed      	b.n	800a07a <_strtod_l+0x102>
 800a09e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a0a2:	f04f 3aff 	mov.w	sl, #4294967295
 800a0a6:	e7e8      	b.n	800a07a <_strtod_l+0x102>
 800a0a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0aa:	1c5a      	adds	r2, r3, #1
 800a0ac:	9217      	str	r2, [sp, #92]	; 0x5c
 800a0ae:	785b      	ldrb	r3, [r3, #1]
 800a0b0:	2b30      	cmp	r3, #48	; 0x30
 800a0b2:	d0f9      	beq.n	800a0a8 <_strtod_l+0x130>
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d0a3      	beq.n	800a000 <_strtod_l+0x88>
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	f04f 0900 	mov.w	r9, #0
 800a0be:	9304      	str	r3, [sp, #16]
 800a0c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0c2:	9308      	str	r3, [sp, #32]
 800a0c4:	f8cd 901c 	str.w	r9, [sp, #28]
 800a0c8:	464f      	mov	r7, r9
 800a0ca:	220a      	movs	r2, #10
 800a0cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a0ce:	7806      	ldrb	r6, [r0, #0]
 800a0d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a0d4:	b2d9      	uxtb	r1, r3
 800a0d6:	2909      	cmp	r1, #9
 800a0d8:	d92a      	bls.n	800a130 <_strtod_l+0x1b8>
 800a0da:	9905      	ldr	r1, [sp, #20]
 800a0dc:	462a      	mov	r2, r5
 800a0de:	f003 f9a6 	bl	800d42e <strncmp>
 800a0e2:	b398      	cbz	r0, 800a14c <_strtod_l+0x1d4>
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	4632      	mov	r2, r6
 800a0e8:	463d      	mov	r5, r7
 800a0ea:	9005      	str	r0, [sp, #20]
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2a65      	cmp	r2, #101	; 0x65
 800a0f0:	d001      	beq.n	800a0f6 <_strtod_l+0x17e>
 800a0f2:	2a45      	cmp	r2, #69	; 0x45
 800a0f4:	d118      	bne.n	800a128 <_strtod_l+0x1b0>
 800a0f6:	b91d      	cbnz	r5, 800a100 <_strtod_l+0x188>
 800a0f8:	9a04      	ldr	r2, [sp, #16]
 800a0fa:	4302      	orrs	r2, r0
 800a0fc:	d09e      	beq.n	800a03c <_strtod_l+0xc4>
 800a0fe:	2500      	movs	r5, #0
 800a100:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a104:	f108 0201 	add.w	r2, r8, #1
 800a108:	9217      	str	r2, [sp, #92]	; 0x5c
 800a10a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a10e:	2a2b      	cmp	r2, #43	; 0x2b
 800a110:	d075      	beq.n	800a1fe <_strtod_l+0x286>
 800a112:	2a2d      	cmp	r2, #45	; 0x2d
 800a114:	d07b      	beq.n	800a20e <_strtod_l+0x296>
 800a116:	f04f 0c00 	mov.w	ip, #0
 800a11a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a11e:	2909      	cmp	r1, #9
 800a120:	f240 8082 	bls.w	800a228 <_strtod_l+0x2b0>
 800a124:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a128:	2600      	movs	r6, #0
 800a12a:	e09d      	b.n	800a268 <_strtod_l+0x2f0>
 800a12c:	2300      	movs	r3, #0
 800a12e:	e7c4      	b.n	800a0ba <_strtod_l+0x142>
 800a130:	2f08      	cmp	r7, #8
 800a132:	bfd8      	it	le
 800a134:	9907      	ldrle	r1, [sp, #28]
 800a136:	f100 0001 	add.w	r0, r0, #1
 800a13a:	bfda      	itte	le
 800a13c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a140:	9307      	strle	r3, [sp, #28]
 800a142:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a146:	3701      	adds	r7, #1
 800a148:	9017      	str	r0, [sp, #92]	; 0x5c
 800a14a:	e7bf      	b.n	800a0cc <_strtod_l+0x154>
 800a14c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a14e:	195a      	adds	r2, r3, r5
 800a150:	9217      	str	r2, [sp, #92]	; 0x5c
 800a152:	5d5a      	ldrb	r2, [r3, r5]
 800a154:	2f00      	cmp	r7, #0
 800a156:	d037      	beq.n	800a1c8 <_strtod_l+0x250>
 800a158:	9005      	str	r0, [sp, #20]
 800a15a:	463d      	mov	r5, r7
 800a15c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a160:	2b09      	cmp	r3, #9
 800a162:	d912      	bls.n	800a18a <_strtod_l+0x212>
 800a164:	2301      	movs	r3, #1
 800a166:	e7c2      	b.n	800a0ee <_strtod_l+0x176>
 800a168:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a16a:	1c5a      	adds	r2, r3, #1
 800a16c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a16e:	785a      	ldrb	r2, [r3, #1]
 800a170:	3001      	adds	r0, #1
 800a172:	2a30      	cmp	r2, #48	; 0x30
 800a174:	d0f8      	beq.n	800a168 <_strtod_l+0x1f0>
 800a176:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a17a:	2b08      	cmp	r3, #8
 800a17c:	f200 84d9 	bhi.w	800ab32 <_strtod_l+0xbba>
 800a180:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a182:	9005      	str	r0, [sp, #20]
 800a184:	2000      	movs	r0, #0
 800a186:	9308      	str	r3, [sp, #32]
 800a188:	4605      	mov	r5, r0
 800a18a:	3a30      	subs	r2, #48	; 0x30
 800a18c:	f100 0301 	add.w	r3, r0, #1
 800a190:	d014      	beq.n	800a1bc <_strtod_l+0x244>
 800a192:	9905      	ldr	r1, [sp, #20]
 800a194:	4419      	add	r1, r3
 800a196:	9105      	str	r1, [sp, #20]
 800a198:	462b      	mov	r3, r5
 800a19a:	eb00 0e05 	add.w	lr, r0, r5
 800a19e:	210a      	movs	r1, #10
 800a1a0:	4573      	cmp	r3, lr
 800a1a2:	d113      	bne.n	800a1cc <_strtod_l+0x254>
 800a1a4:	182b      	adds	r3, r5, r0
 800a1a6:	2b08      	cmp	r3, #8
 800a1a8:	f105 0501 	add.w	r5, r5, #1
 800a1ac:	4405      	add	r5, r0
 800a1ae:	dc1c      	bgt.n	800a1ea <_strtod_l+0x272>
 800a1b0:	9907      	ldr	r1, [sp, #28]
 800a1b2:	230a      	movs	r3, #10
 800a1b4:	fb03 2301 	mla	r3, r3, r1, r2
 800a1b8:	9307      	str	r3, [sp, #28]
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a1be:	1c51      	adds	r1, r2, #1
 800a1c0:	9117      	str	r1, [sp, #92]	; 0x5c
 800a1c2:	7852      	ldrb	r2, [r2, #1]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	e7c9      	b.n	800a15c <_strtod_l+0x1e4>
 800a1c8:	4638      	mov	r0, r7
 800a1ca:	e7d2      	b.n	800a172 <_strtod_l+0x1fa>
 800a1cc:	2b08      	cmp	r3, #8
 800a1ce:	dc04      	bgt.n	800a1da <_strtod_l+0x262>
 800a1d0:	9e07      	ldr	r6, [sp, #28]
 800a1d2:	434e      	muls	r6, r1
 800a1d4:	9607      	str	r6, [sp, #28]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	e7e2      	b.n	800a1a0 <_strtod_l+0x228>
 800a1da:	f103 0c01 	add.w	ip, r3, #1
 800a1de:	f1bc 0f10 	cmp.w	ip, #16
 800a1e2:	bfd8      	it	le
 800a1e4:	fb01 f909 	mulle.w	r9, r1, r9
 800a1e8:	e7f5      	b.n	800a1d6 <_strtod_l+0x25e>
 800a1ea:	2d10      	cmp	r5, #16
 800a1ec:	bfdc      	itt	le
 800a1ee:	230a      	movle	r3, #10
 800a1f0:	fb03 2909 	mlale	r9, r3, r9, r2
 800a1f4:	e7e1      	b.n	800a1ba <_strtod_l+0x242>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	9305      	str	r3, [sp, #20]
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e77c      	b.n	800a0f8 <_strtod_l+0x180>
 800a1fe:	f04f 0c00 	mov.w	ip, #0
 800a202:	f108 0202 	add.w	r2, r8, #2
 800a206:	9217      	str	r2, [sp, #92]	; 0x5c
 800a208:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a20c:	e785      	b.n	800a11a <_strtod_l+0x1a2>
 800a20e:	f04f 0c01 	mov.w	ip, #1
 800a212:	e7f6      	b.n	800a202 <_strtod_l+0x28a>
 800a214:	0800e0cc 	.word	0x0800e0cc
 800a218:	0800de1c 	.word	0x0800de1c
 800a21c:	7ff00000 	.word	0x7ff00000
 800a220:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a222:	1c51      	adds	r1, r2, #1
 800a224:	9117      	str	r1, [sp, #92]	; 0x5c
 800a226:	7852      	ldrb	r2, [r2, #1]
 800a228:	2a30      	cmp	r2, #48	; 0x30
 800a22a:	d0f9      	beq.n	800a220 <_strtod_l+0x2a8>
 800a22c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a230:	2908      	cmp	r1, #8
 800a232:	f63f af79 	bhi.w	800a128 <_strtod_l+0x1b0>
 800a236:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a23a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a23c:	9206      	str	r2, [sp, #24]
 800a23e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a240:	1c51      	adds	r1, r2, #1
 800a242:	9117      	str	r1, [sp, #92]	; 0x5c
 800a244:	7852      	ldrb	r2, [r2, #1]
 800a246:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a24a:	2e09      	cmp	r6, #9
 800a24c:	d937      	bls.n	800a2be <_strtod_l+0x346>
 800a24e:	9e06      	ldr	r6, [sp, #24]
 800a250:	1b89      	subs	r1, r1, r6
 800a252:	2908      	cmp	r1, #8
 800a254:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a258:	dc02      	bgt.n	800a260 <_strtod_l+0x2e8>
 800a25a:	4576      	cmp	r6, lr
 800a25c:	bfa8      	it	ge
 800a25e:	4676      	movge	r6, lr
 800a260:	f1bc 0f00 	cmp.w	ip, #0
 800a264:	d000      	beq.n	800a268 <_strtod_l+0x2f0>
 800a266:	4276      	negs	r6, r6
 800a268:	2d00      	cmp	r5, #0
 800a26a:	d14d      	bne.n	800a308 <_strtod_l+0x390>
 800a26c:	9904      	ldr	r1, [sp, #16]
 800a26e:	4301      	orrs	r1, r0
 800a270:	f47f aec6 	bne.w	800a000 <_strtod_l+0x88>
 800a274:	2b00      	cmp	r3, #0
 800a276:	f47f aee1 	bne.w	800a03c <_strtod_l+0xc4>
 800a27a:	2a69      	cmp	r2, #105	; 0x69
 800a27c:	d027      	beq.n	800a2ce <_strtod_l+0x356>
 800a27e:	dc24      	bgt.n	800a2ca <_strtod_l+0x352>
 800a280:	2a49      	cmp	r2, #73	; 0x49
 800a282:	d024      	beq.n	800a2ce <_strtod_l+0x356>
 800a284:	2a4e      	cmp	r2, #78	; 0x4e
 800a286:	f47f aed9 	bne.w	800a03c <_strtod_l+0xc4>
 800a28a:	499f      	ldr	r1, [pc, #636]	; (800a508 <_strtod_l+0x590>)
 800a28c:	a817      	add	r0, sp, #92	; 0x5c
 800a28e:	f001 ff31 	bl	800c0f4 <__match>
 800a292:	2800      	cmp	r0, #0
 800a294:	f43f aed2 	beq.w	800a03c <_strtod_l+0xc4>
 800a298:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	2b28      	cmp	r3, #40	; 0x28
 800a29e:	d12d      	bne.n	800a2fc <_strtod_l+0x384>
 800a2a0:	499a      	ldr	r1, [pc, #616]	; (800a50c <_strtod_l+0x594>)
 800a2a2:	aa1a      	add	r2, sp, #104	; 0x68
 800a2a4:	a817      	add	r0, sp, #92	; 0x5c
 800a2a6:	f001 ff39 	bl	800c11c <__hexnan>
 800a2aa:	2805      	cmp	r0, #5
 800a2ac:	d126      	bne.n	800a2fc <_strtod_l+0x384>
 800a2ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a2b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a2b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a2b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a2bc:	e6a0      	b.n	800a000 <_strtod_l+0x88>
 800a2be:	210a      	movs	r1, #10
 800a2c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a2c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a2c8:	e7b9      	b.n	800a23e <_strtod_l+0x2c6>
 800a2ca:	2a6e      	cmp	r2, #110	; 0x6e
 800a2cc:	e7db      	b.n	800a286 <_strtod_l+0x30e>
 800a2ce:	4990      	ldr	r1, [pc, #576]	; (800a510 <_strtod_l+0x598>)
 800a2d0:	a817      	add	r0, sp, #92	; 0x5c
 800a2d2:	f001 ff0f 	bl	800c0f4 <__match>
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	f43f aeb0 	beq.w	800a03c <_strtod_l+0xc4>
 800a2dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2de:	498d      	ldr	r1, [pc, #564]	; (800a514 <_strtod_l+0x59c>)
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	a817      	add	r0, sp, #92	; 0x5c
 800a2e4:	9317      	str	r3, [sp, #92]	; 0x5c
 800a2e6:	f001 ff05 	bl	800c0f4 <__match>
 800a2ea:	b910      	cbnz	r0, 800a2f2 <_strtod_l+0x37a>
 800a2ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	9317      	str	r3, [sp, #92]	; 0x5c
 800a2f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a524 <_strtod_l+0x5ac>
 800a2f6:	f04f 0a00 	mov.w	sl, #0
 800a2fa:	e681      	b.n	800a000 <_strtod_l+0x88>
 800a2fc:	4886      	ldr	r0, [pc, #536]	; (800a518 <_strtod_l+0x5a0>)
 800a2fe:	f003 f83b 	bl	800d378 <nan>
 800a302:	ec5b ab10 	vmov	sl, fp, d0
 800a306:	e67b      	b.n	800a000 <_strtod_l+0x88>
 800a308:	9b05      	ldr	r3, [sp, #20]
 800a30a:	9807      	ldr	r0, [sp, #28]
 800a30c:	1af3      	subs	r3, r6, r3
 800a30e:	2f00      	cmp	r7, #0
 800a310:	bf08      	it	eq
 800a312:	462f      	moveq	r7, r5
 800a314:	2d10      	cmp	r5, #16
 800a316:	9306      	str	r3, [sp, #24]
 800a318:	46a8      	mov	r8, r5
 800a31a:	bfa8      	it	ge
 800a31c:	f04f 0810 	movge.w	r8, #16
 800a320:	f7f6 f908 	bl	8000534 <__aeabi_ui2d>
 800a324:	2d09      	cmp	r5, #9
 800a326:	4682      	mov	sl, r0
 800a328:	468b      	mov	fp, r1
 800a32a:	dd13      	ble.n	800a354 <_strtod_l+0x3dc>
 800a32c:	4b7b      	ldr	r3, [pc, #492]	; (800a51c <_strtod_l+0x5a4>)
 800a32e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a332:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a336:	f7f6 f977 	bl	8000628 <__aeabi_dmul>
 800a33a:	4682      	mov	sl, r0
 800a33c:	4648      	mov	r0, r9
 800a33e:	468b      	mov	fp, r1
 800a340:	f7f6 f8f8 	bl	8000534 <__aeabi_ui2d>
 800a344:	4602      	mov	r2, r0
 800a346:	460b      	mov	r3, r1
 800a348:	4650      	mov	r0, sl
 800a34a:	4659      	mov	r1, fp
 800a34c:	f7f5 ffb6 	bl	80002bc <__adddf3>
 800a350:	4682      	mov	sl, r0
 800a352:	468b      	mov	fp, r1
 800a354:	2d0f      	cmp	r5, #15
 800a356:	dc38      	bgt.n	800a3ca <_strtod_l+0x452>
 800a358:	9b06      	ldr	r3, [sp, #24]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	f43f ae50 	beq.w	800a000 <_strtod_l+0x88>
 800a360:	dd24      	ble.n	800a3ac <_strtod_l+0x434>
 800a362:	2b16      	cmp	r3, #22
 800a364:	dc0b      	bgt.n	800a37e <_strtod_l+0x406>
 800a366:	496d      	ldr	r1, [pc, #436]	; (800a51c <_strtod_l+0x5a4>)
 800a368:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a36c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a370:	4652      	mov	r2, sl
 800a372:	465b      	mov	r3, fp
 800a374:	f7f6 f958 	bl	8000628 <__aeabi_dmul>
 800a378:	4682      	mov	sl, r0
 800a37a:	468b      	mov	fp, r1
 800a37c:	e640      	b.n	800a000 <_strtod_l+0x88>
 800a37e:	9a06      	ldr	r2, [sp, #24]
 800a380:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a384:	4293      	cmp	r3, r2
 800a386:	db20      	blt.n	800a3ca <_strtod_l+0x452>
 800a388:	4c64      	ldr	r4, [pc, #400]	; (800a51c <_strtod_l+0x5a4>)
 800a38a:	f1c5 050f 	rsb	r5, r5, #15
 800a38e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a392:	4652      	mov	r2, sl
 800a394:	465b      	mov	r3, fp
 800a396:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a39a:	f7f6 f945 	bl	8000628 <__aeabi_dmul>
 800a39e:	9b06      	ldr	r3, [sp, #24]
 800a3a0:	1b5d      	subs	r5, r3, r5
 800a3a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a3a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a3aa:	e7e3      	b.n	800a374 <_strtod_l+0x3fc>
 800a3ac:	9b06      	ldr	r3, [sp, #24]
 800a3ae:	3316      	adds	r3, #22
 800a3b0:	db0b      	blt.n	800a3ca <_strtod_l+0x452>
 800a3b2:	9b05      	ldr	r3, [sp, #20]
 800a3b4:	1b9e      	subs	r6, r3, r6
 800a3b6:	4b59      	ldr	r3, [pc, #356]	; (800a51c <_strtod_l+0x5a4>)
 800a3b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a3bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a3c0:	4650      	mov	r0, sl
 800a3c2:	4659      	mov	r1, fp
 800a3c4:	f7f6 fa5a 	bl	800087c <__aeabi_ddiv>
 800a3c8:	e7d6      	b.n	800a378 <_strtod_l+0x400>
 800a3ca:	9b06      	ldr	r3, [sp, #24]
 800a3cc:	eba5 0808 	sub.w	r8, r5, r8
 800a3d0:	4498      	add	r8, r3
 800a3d2:	f1b8 0f00 	cmp.w	r8, #0
 800a3d6:	dd74      	ble.n	800a4c2 <_strtod_l+0x54a>
 800a3d8:	f018 030f 	ands.w	r3, r8, #15
 800a3dc:	d00a      	beq.n	800a3f4 <_strtod_l+0x47c>
 800a3de:	494f      	ldr	r1, [pc, #316]	; (800a51c <_strtod_l+0x5a4>)
 800a3e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a3e4:	4652      	mov	r2, sl
 800a3e6:	465b      	mov	r3, fp
 800a3e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3ec:	f7f6 f91c 	bl	8000628 <__aeabi_dmul>
 800a3f0:	4682      	mov	sl, r0
 800a3f2:	468b      	mov	fp, r1
 800a3f4:	f038 080f 	bics.w	r8, r8, #15
 800a3f8:	d04f      	beq.n	800a49a <_strtod_l+0x522>
 800a3fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a3fe:	dd22      	ble.n	800a446 <_strtod_l+0x4ce>
 800a400:	2500      	movs	r5, #0
 800a402:	462e      	mov	r6, r5
 800a404:	9507      	str	r5, [sp, #28]
 800a406:	9505      	str	r5, [sp, #20]
 800a408:	2322      	movs	r3, #34	; 0x22
 800a40a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a524 <_strtod_l+0x5ac>
 800a40e:	6023      	str	r3, [r4, #0]
 800a410:	f04f 0a00 	mov.w	sl, #0
 800a414:	9b07      	ldr	r3, [sp, #28]
 800a416:	2b00      	cmp	r3, #0
 800a418:	f43f adf2 	beq.w	800a000 <_strtod_l+0x88>
 800a41c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a41e:	4620      	mov	r0, r4
 800a420:	f001 ff7a 	bl	800c318 <_Bfree>
 800a424:	9905      	ldr	r1, [sp, #20]
 800a426:	4620      	mov	r0, r4
 800a428:	f001 ff76 	bl	800c318 <_Bfree>
 800a42c:	4631      	mov	r1, r6
 800a42e:	4620      	mov	r0, r4
 800a430:	f001 ff72 	bl	800c318 <_Bfree>
 800a434:	9907      	ldr	r1, [sp, #28]
 800a436:	4620      	mov	r0, r4
 800a438:	f001 ff6e 	bl	800c318 <_Bfree>
 800a43c:	4629      	mov	r1, r5
 800a43e:	4620      	mov	r0, r4
 800a440:	f001 ff6a 	bl	800c318 <_Bfree>
 800a444:	e5dc      	b.n	800a000 <_strtod_l+0x88>
 800a446:	4b36      	ldr	r3, [pc, #216]	; (800a520 <_strtod_l+0x5a8>)
 800a448:	9304      	str	r3, [sp, #16]
 800a44a:	2300      	movs	r3, #0
 800a44c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a450:	4650      	mov	r0, sl
 800a452:	4659      	mov	r1, fp
 800a454:	4699      	mov	r9, r3
 800a456:	f1b8 0f01 	cmp.w	r8, #1
 800a45a:	dc21      	bgt.n	800a4a0 <_strtod_l+0x528>
 800a45c:	b10b      	cbz	r3, 800a462 <_strtod_l+0x4ea>
 800a45e:	4682      	mov	sl, r0
 800a460:	468b      	mov	fp, r1
 800a462:	4b2f      	ldr	r3, [pc, #188]	; (800a520 <_strtod_l+0x5a8>)
 800a464:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a468:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a46c:	4652      	mov	r2, sl
 800a46e:	465b      	mov	r3, fp
 800a470:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a474:	f7f6 f8d8 	bl	8000628 <__aeabi_dmul>
 800a478:	4b2a      	ldr	r3, [pc, #168]	; (800a524 <_strtod_l+0x5ac>)
 800a47a:	460a      	mov	r2, r1
 800a47c:	400b      	ands	r3, r1
 800a47e:	492a      	ldr	r1, [pc, #168]	; (800a528 <_strtod_l+0x5b0>)
 800a480:	428b      	cmp	r3, r1
 800a482:	4682      	mov	sl, r0
 800a484:	d8bc      	bhi.n	800a400 <_strtod_l+0x488>
 800a486:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a48a:	428b      	cmp	r3, r1
 800a48c:	bf86      	itte	hi
 800a48e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a52c <_strtod_l+0x5b4>
 800a492:	f04f 3aff 	movhi.w	sl, #4294967295
 800a496:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a49a:	2300      	movs	r3, #0
 800a49c:	9304      	str	r3, [sp, #16]
 800a49e:	e084      	b.n	800a5aa <_strtod_l+0x632>
 800a4a0:	f018 0f01 	tst.w	r8, #1
 800a4a4:	d005      	beq.n	800a4b2 <_strtod_l+0x53a>
 800a4a6:	9b04      	ldr	r3, [sp, #16]
 800a4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ac:	f7f6 f8bc 	bl	8000628 <__aeabi_dmul>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	9a04      	ldr	r2, [sp, #16]
 800a4b4:	3208      	adds	r2, #8
 800a4b6:	f109 0901 	add.w	r9, r9, #1
 800a4ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a4be:	9204      	str	r2, [sp, #16]
 800a4c0:	e7c9      	b.n	800a456 <_strtod_l+0x4de>
 800a4c2:	d0ea      	beq.n	800a49a <_strtod_l+0x522>
 800a4c4:	f1c8 0800 	rsb	r8, r8, #0
 800a4c8:	f018 020f 	ands.w	r2, r8, #15
 800a4cc:	d00a      	beq.n	800a4e4 <_strtod_l+0x56c>
 800a4ce:	4b13      	ldr	r3, [pc, #76]	; (800a51c <_strtod_l+0x5a4>)
 800a4d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4d4:	4650      	mov	r0, sl
 800a4d6:	4659      	mov	r1, fp
 800a4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4dc:	f7f6 f9ce 	bl	800087c <__aeabi_ddiv>
 800a4e0:	4682      	mov	sl, r0
 800a4e2:	468b      	mov	fp, r1
 800a4e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a4e8:	d0d7      	beq.n	800a49a <_strtod_l+0x522>
 800a4ea:	f1b8 0f1f 	cmp.w	r8, #31
 800a4ee:	dd1f      	ble.n	800a530 <_strtod_l+0x5b8>
 800a4f0:	2500      	movs	r5, #0
 800a4f2:	462e      	mov	r6, r5
 800a4f4:	9507      	str	r5, [sp, #28]
 800a4f6:	9505      	str	r5, [sp, #20]
 800a4f8:	2322      	movs	r3, #34	; 0x22
 800a4fa:	f04f 0a00 	mov.w	sl, #0
 800a4fe:	f04f 0b00 	mov.w	fp, #0
 800a502:	6023      	str	r3, [r4, #0]
 800a504:	e786      	b.n	800a414 <_strtod_l+0x49c>
 800a506:	bf00      	nop
 800a508:	0800dded 	.word	0x0800dded
 800a50c:	0800de30 	.word	0x0800de30
 800a510:	0800dde5 	.word	0x0800dde5
 800a514:	0800df74 	.word	0x0800df74
 800a518:	0800e288 	.word	0x0800e288
 800a51c:	0800e168 	.word	0x0800e168
 800a520:	0800e140 	.word	0x0800e140
 800a524:	7ff00000 	.word	0x7ff00000
 800a528:	7ca00000 	.word	0x7ca00000
 800a52c:	7fefffff 	.word	0x7fefffff
 800a530:	f018 0310 	ands.w	r3, r8, #16
 800a534:	bf18      	it	ne
 800a536:	236a      	movne	r3, #106	; 0x6a
 800a538:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a8e8 <_strtod_l+0x970>
 800a53c:	9304      	str	r3, [sp, #16]
 800a53e:	4650      	mov	r0, sl
 800a540:	4659      	mov	r1, fp
 800a542:	2300      	movs	r3, #0
 800a544:	f018 0f01 	tst.w	r8, #1
 800a548:	d004      	beq.n	800a554 <_strtod_l+0x5dc>
 800a54a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a54e:	f7f6 f86b 	bl	8000628 <__aeabi_dmul>
 800a552:	2301      	movs	r3, #1
 800a554:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a558:	f109 0908 	add.w	r9, r9, #8
 800a55c:	d1f2      	bne.n	800a544 <_strtod_l+0x5cc>
 800a55e:	b10b      	cbz	r3, 800a564 <_strtod_l+0x5ec>
 800a560:	4682      	mov	sl, r0
 800a562:	468b      	mov	fp, r1
 800a564:	9b04      	ldr	r3, [sp, #16]
 800a566:	b1c3      	cbz	r3, 800a59a <_strtod_l+0x622>
 800a568:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a56c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a570:	2b00      	cmp	r3, #0
 800a572:	4659      	mov	r1, fp
 800a574:	dd11      	ble.n	800a59a <_strtod_l+0x622>
 800a576:	2b1f      	cmp	r3, #31
 800a578:	f340 8124 	ble.w	800a7c4 <_strtod_l+0x84c>
 800a57c:	2b34      	cmp	r3, #52	; 0x34
 800a57e:	bfde      	ittt	le
 800a580:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a584:	f04f 33ff 	movle.w	r3, #4294967295
 800a588:	fa03 f202 	lslle.w	r2, r3, r2
 800a58c:	f04f 0a00 	mov.w	sl, #0
 800a590:	bfcc      	ite	gt
 800a592:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a596:	ea02 0b01 	andle.w	fp, r2, r1
 800a59a:	2200      	movs	r2, #0
 800a59c:	2300      	movs	r3, #0
 800a59e:	4650      	mov	r0, sl
 800a5a0:	4659      	mov	r1, fp
 800a5a2:	f7f6 faa9 	bl	8000af8 <__aeabi_dcmpeq>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	d1a2      	bne.n	800a4f0 <_strtod_l+0x578>
 800a5aa:	9b07      	ldr	r3, [sp, #28]
 800a5ac:	9300      	str	r3, [sp, #0]
 800a5ae:	9908      	ldr	r1, [sp, #32]
 800a5b0:	462b      	mov	r3, r5
 800a5b2:	463a      	mov	r2, r7
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f001 ff17 	bl	800c3e8 <__s2b>
 800a5ba:	9007      	str	r0, [sp, #28]
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	f43f af1f 	beq.w	800a400 <_strtod_l+0x488>
 800a5c2:	9b05      	ldr	r3, [sp, #20]
 800a5c4:	1b9e      	subs	r6, r3, r6
 800a5c6:	9b06      	ldr	r3, [sp, #24]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	bfb4      	ite	lt
 800a5cc:	4633      	movlt	r3, r6
 800a5ce:	2300      	movge	r3, #0
 800a5d0:	930c      	str	r3, [sp, #48]	; 0x30
 800a5d2:	9b06      	ldr	r3, [sp, #24]
 800a5d4:	2500      	movs	r5, #0
 800a5d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a5da:	9312      	str	r3, [sp, #72]	; 0x48
 800a5dc:	462e      	mov	r6, r5
 800a5de:	9b07      	ldr	r3, [sp, #28]
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	6859      	ldr	r1, [r3, #4]
 800a5e4:	f001 fe58 	bl	800c298 <_Balloc>
 800a5e8:	9005      	str	r0, [sp, #20]
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	f43f af0c 	beq.w	800a408 <_strtod_l+0x490>
 800a5f0:	9b07      	ldr	r3, [sp, #28]
 800a5f2:	691a      	ldr	r2, [r3, #16]
 800a5f4:	3202      	adds	r2, #2
 800a5f6:	f103 010c 	add.w	r1, r3, #12
 800a5fa:	0092      	lsls	r2, r2, #2
 800a5fc:	300c      	adds	r0, #12
 800a5fe:	f7fe fdd1 	bl	80091a4 <memcpy>
 800a602:	ec4b ab10 	vmov	d0, sl, fp
 800a606:	aa1a      	add	r2, sp, #104	; 0x68
 800a608:	a919      	add	r1, sp, #100	; 0x64
 800a60a:	4620      	mov	r0, r4
 800a60c:	f002 fa32 	bl	800ca74 <__d2b>
 800a610:	ec4b ab18 	vmov	d8, sl, fp
 800a614:	9018      	str	r0, [sp, #96]	; 0x60
 800a616:	2800      	cmp	r0, #0
 800a618:	f43f aef6 	beq.w	800a408 <_strtod_l+0x490>
 800a61c:	2101      	movs	r1, #1
 800a61e:	4620      	mov	r0, r4
 800a620:	f001 ff7c 	bl	800c51c <__i2b>
 800a624:	4606      	mov	r6, r0
 800a626:	2800      	cmp	r0, #0
 800a628:	f43f aeee 	beq.w	800a408 <_strtod_l+0x490>
 800a62c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a62e:	9904      	ldr	r1, [sp, #16]
 800a630:	2b00      	cmp	r3, #0
 800a632:	bfab      	itete	ge
 800a634:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a636:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a638:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a63a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a63e:	bfac      	ite	ge
 800a640:	eb03 0902 	addge.w	r9, r3, r2
 800a644:	1ad7      	sublt	r7, r2, r3
 800a646:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a648:	eba3 0801 	sub.w	r8, r3, r1
 800a64c:	4490      	add	r8, r2
 800a64e:	4ba1      	ldr	r3, [pc, #644]	; (800a8d4 <_strtod_l+0x95c>)
 800a650:	f108 38ff 	add.w	r8, r8, #4294967295
 800a654:	4598      	cmp	r8, r3
 800a656:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a65a:	f280 80c7 	bge.w	800a7ec <_strtod_l+0x874>
 800a65e:	eba3 0308 	sub.w	r3, r3, r8
 800a662:	2b1f      	cmp	r3, #31
 800a664:	eba2 0203 	sub.w	r2, r2, r3
 800a668:	f04f 0101 	mov.w	r1, #1
 800a66c:	f300 80b1 	bgt.w	800a7d2 <_strtod_l+0x85a>
 800a670:	fa01 f303 	lsl.w	r3, r1, r3
 800a674:	930d      	str	r3, [sp, #52]	; 0x34
 800a676:	2300      	movs	r3, #0
 800a678:	9308      	str	r3, [sp, #32]
 800a67a:	eb09 0802 	add.w	r8, r9, r2
 800a67e:	9b04      	ldr	r3, [sp, #16]
 800a680:	45c1      	cmp	r9, r8
 800a682:	4417      	add	r7, r2
 800a684:	441f      	add	r7, r3
 800a686:	464b      	mov	r3, r9
 800a688:	bfa8      	it	ge
 800a68a:	4643      	movge	r3, r8
 800a68c:	42bb      	cmp	r3, r7
 800a68e:	bfa8      	it	ge
 800a690:	463b      	movge	r3, r7
 800a692:	2b00      	cmp	r3, #0
 800a694:	bfc2      	ittt	gt
 800a696:	eba8 0803 	subgt.w	r8, r8, r3
 800a69a:	1aff      	subgt	r7, r7, r3
 800a69c:	eba9 0903 	subgt.w	r9, r9, r3
 800a6a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	dd17      	ble.n	800a6d6 <_strtod_l+0x75e>
 800a6a6:	4631      	mov	r1, r6
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	f001 fff6 	bl	800c69c <__pow5mult>
 800a6b0:	4606      	mov	r6, r0
 800a6b2:	2800      	cmp	r0, #0
 800a6b4:	f43f aea8 	beq.w	800a408 <_strtod_l+0x490>
 800a6b8:	4601      	mov	r1, r0
 800a6ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a6bc:	4620      	mov	r0, r4
 800a6be:	f001 ff43 	bl	800c548 <__multiply>
 800a6c2:	900b      	str	r0, [sp, #44]	; 0x2c
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	f43f ae9f 	beq.w	800a408 <_strtod_l+0x490>
 800a6ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	f001 fe23 	bl	800c318 <_Bfree>
 800a6d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6d4:	9318      	str	r3, [sp, #96]	; 0x60
 800a6d6:	f1b8 0f00 	cmp.w	r8, #0
 800a6da:	f300 808c 	bgt.w	800a7f6 <_strtod_l+0x87e>
 800a6de:	9b06      	ldr	r3, [sp, #24]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	dd08      	ble.n	800a6f6 <_strtod_l+0x77e>
 800a6e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a6e6:	9905      	ldr	r1, [sp, #20]
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f001 ffd7 	bl	800c69c <__pow5mult>
 800a6ee:	9005      	str	r0, [sp, #20]
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	f43f ae89 	beq.w	800a408 <_strtod_l+0x490>
 800a6f6:	2f00      	cmp	r7, #0
 800a6f8:	dd08      	ble.n	800a70c <_strtod_l+0x794>
 800a6fa:	9905      	ldr	r1, [sp, #20]
 800a6fc:	463a      	mov	r2, r7
 800a6fe:	4620      	mov	r0, r4
 800a700:	f002 f826 	bl	800c750 <__lshift>
 800a704:	9005      	str	r0, [sp, #20]
 800a706:	2800      	cmp	r0, #0
 800a708:	f43f ae7e 	beq.w	800a408 <_strtod_l+0x490>
 800a70c:	f1b9 0f00 	cmp.w	r9, #0
 800a710:	dd08      	ble.n	800a724 <_strtod_l+0x7ac>
 800a712:	4631      	mov	r1, r6
 800a714:	464a      	mov	r2, r9
 800a716:	4620      	mov	r0, r4
 800a718:	f002 f81a 	bl	800c750 <__lshift>
 800a71c:	4606      	mov	r6, r0
 800a71e:	2800      	cmp	r0, #0
 800a720:	f43f ae72 	beq.w	800a408 <_strtod_l+0x490>
 800a724:	9a05      	ldr	r2, [sp, #20]
 800a726:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a728:	4620      	mov	r0, r4
 800a72a:	f002 f89d 	bl	800c868 <__mdiff>
 800a72e:	4605      	mov	r5, r0
 800a730:	2800      	cmp	r0, #0
 800a732:	f43f ae69 	beq.w	800a408 <_strtod_l+0x490>
 800a736:	68c3      	ldr	r3, [r0, #12]
 800a738:	930b      	str	r3, [sp, #44]	; 0x2c
 800a73a:	2300      	movs	r3, #0
 800a73c:	60c3      	str	r3, [r0, #12]
 800a73e:	4631      	mov	r1, r6
 800a740:	f002 f876 	bl	800c830 <__mcmp>
 800a744:	2800      	cmp	r0, #0
 800a746:	da60      	bge.n	800a80a <_strtod_l+0x892>
 800a748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a74a:	ea53 030a 	orrs.w	r3, r3, sl
 800a74e:	f040 8082 	bne.w	800a856 <_strtod_l+0x8de>
 800a752:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a756:	2b00      	cmp	r3, #0
 800a758:	d17d      	bne.n	800a856 <_strtod_l+0x8de>
 800a75a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a75e:	0d1b      	lsrs	r3, r3, #20
 800a760:	051b      	lsls	r3, r3, #20
 800a762:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a766:	d976      	bls.n	800a856 <_strtod_l+0x8de>
 800a768:	696b      	ldr	r3, [r5, #20]
 800a76a:	b913      	cbnz	r3, 800a772 <_strtod_l+0x7fa>
 800a76c:	692b      	ldr	r3, [r5, #16]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	dd71      	ble.n	800a856 <_strtod_l+0x8de>
 800a772:	4629      	mov	r1, r5
 800a774:	2201      	movs	r2, #1
 800a776:	4620      	mov	r0, r4
 800a778:	f001 ffea 	bl	800c750 <__lshift>
 800a77c:	4631      	mov	r1, r6
 800a77e:	4605      	mov	r5, r0
 800a780:	f002 f856 	bl	800c830 <__mcmp>
 800a784:	2800      	cmp	r0, #0
 800a786:	dd66      	ble.n	800a856 <_strtod_l+0x8de>
 800a788:	9904      	ldr	r1, [sp, #16]
 800a78a:	4a53      	ldr	r2, [pc, #332]	; (800a8d8 <_strtod_l+0x960>)
 800a78c:	465b      	mov	r3, fp
 800a78e:	2900      	cmp	r1, #0
 800a790:	f000 8081 	beq.w	800a896 <_strtod_l+0x91e>
 800a794:	ea02 010b 	and.w	r1, r2, fp
 800a798:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a79c:	dc7b      	bgt.n	800a896 <_strtod_l+0x91e>
 800a79e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a7a2:	f77f aea9 	ble.w	800a4f8 <_strtod_l+0x580>
 800a7a6:	4b4d      	ldr	r3, [pc, #308]	; (800a8dc <_strtod_l+0x964>)
 800a7a8:	4650      	mov	r0, sl
 800a7aa:	4659      	mov	r1, fp
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	f7f5 ff3b 	bl	8000628 <__aeabi_dmul>
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	4303      	orrs	r3, r0
 800a7b6:	bf08      	it	eq
 800a7b8:	2322      	moveq	r3, #34	; 0x22
 800a7ba:	4682      	mov	sl, r0
 800a7bc:	468b      	mov	fp, r1
 800a7be:	bf08      	it	eq
 800a7c0:	6023      	streq	r3, [r4, #0]
 800a7c2:	e62b      	b.n	800a41c <_strtod_l+0x4a4>
 800a7c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a7cc:	ea03 0a0a 	and.w	sl, r3, sl
 800a7d0:	e6e3      	b.n	800a59a <_strtod_l+0x622>
 800a7d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a7d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a7da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a7de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a7e2:	fa01 f308 	lsl.w	r3, r1, r8
 800a7e6:	9308      	str	r3, [sp, #32]
 800a7e8:	910d      	str	r1, [sp, #52]	; 0x34
 800a7ea:	e746      	b.n	800a67a <_strtod_l+0x702>
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	9308      	str	r3, [sp, #32]
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	930d      	str	r3, [sp, #52]	; 0x34
 800a7f4:	e741      	b.n	800a67a <_strtod_l+0x702>
 800a7f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a7f8:	4642      	mov	r2, r8
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	f001 ffa8 	bl	800c750 <__lshift>
 800a800:	9018      	str	r0, [sp, #96]	; 0x60
 800a802:	2800      	cmp	r0, #0
 800a804:	f47f af6b 	bne.w	800a6de <_strtod_l+0x766>
 800a808:	e5fe      	b.n	800a408 <_strtod_l+0x490>
 800a80a:	465f      	mov	r7, fp
 800a80c:	d16e      	bne.n	800a8ec <_strtod_l+0x974>
 800a80e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a810:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a814:	b342      	cbz	r2, 800a868 <_strtod_l+0x8f0>
 800a816:	4a32      	ldr	r2, [pc, #200]	; (800a8e0 <_strtod_l+0x968>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d128      	bne.n	800a86e <_strtod_l+0x8f6>
 800a81c:	9b04      	ldr	r3, [sp, #16]
 800a81e:	4651      	mov	r1, sl
 800a820:	b1eb      	cbz	r3, 800a85e <_strtod_l+0x8e6>
 800a822:	4b2d      	ldr	r3, [pc, #180]	; (800a8d8 <_strtod_l+0x960>)
 800a824:	403b      	ands	r3, r7
 800a826:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a82a:	f04f 32ff 	mov.w	r2, #4294967295
 800a82e:	d819      	bhi.n	800a864 <_strtod_l+0x8ec>
 800a830:	0d1b      	lsrs	r3, r3, #20
 800a832:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a836:	fa02 f303 	lsl.w	r3, r2, r3
 800a83a:	4299      	cmp	r1, r3
 800a83c:	d117      	bne.n	800a86e <_strtod_l+0x8f6>
 800a83e:	4b29      	ldr	r3, [pc, #164]	; (800a8e4 <_strtod_l+0x96c>)
 800a840:	429f      	cmp	r7, r3
 800a842:	d102      	bne.n	800a84a <_strtod_l+0x8d2>
 800a844:	3101      	adds	r1, #1
 800a846:	f43f addf 	beq.w	800a408 <_strtod_l+0x490>
 800a84a:	4b23      	ldr	r3, [pc, #140]	; (800a8d8 <_strtod_l+0x960>)
 800a84c:	403b      	ands	r3, r7
 800a84e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a852:	f04f 0a00 	mov.w	sl, #0
 800a856:	9b04      	ldr	r3, [sp, #16]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d1a4      	bne.n	800a7a6 <_strtod_l+0x82e>
 800a85c:	e5de      	b.n	800a41c <_strtod_l+0x4a4>
 800a85e:	f04f 33ff 	mov.w	r3, #4294967295
 800a862:	e7ea      	b.n	800a83a <_strtod_l+0x8c2>
 800a864:	4613      	mov	r3, r2
 800a866:	e7e8      	b.n	800a83a <_strtod_l+0x8c2>
 800a868:	ea53 030a 	orrs.w	r3, r3, sl
 800a86c:	d08c      	beq.n	800a788 <_strtod_l+0x810>
 800a86e:	9b08      	ldr	r3, [sp, #32]
 800a870:	b1db      	cbz	r3, 800a8aa <_strtod_l+0x932>
 800a872:	423b      	tst	r3, r7
 800a874:	d0ef      	beq.n	800a856 <_strtod_l+0x8de>
 800a876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a878:	9a04      	ldr	r2, [sp, #16]
 800a87a:	4650      	mov	r0, sl
 800a87c:	4659      	mov	r1, fp
 800a87e:	b1c3      	cbz	r3, 800a8b2 <_strtod_l+0x93a>
 800a880:	f7ff fb5e 	bl	8009f40 <sulp>
 800a884:	4602      	mov	r2, r0
 800a886:	460b      	mov	r3, r1
 800a888:	ec51 0b18 	vmov	r0, r1, d8
 800a88c:	f7f5 fd16 	bl	80002bc <__adddf3>
 800a890:	4682      	mov	sl, r0
 800a892:	468b      	mov	fp, r1
 800a894:	e7df      	b.n	800a856 <_strtod_l+0x8de>
 800a896:	4013      	ands	r3, r2
 800a898:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a89c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a8a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a8a4:	f04f 3aff 	mov.w	sl, #4294967295
 800a8a8:	e7d5      	b.n	800a856 <_strtod_l+0x8de>
 800a8aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8ac:	ea13 0f0a 	tst.w	r3, sl
 800a8b0:	e7e0      	b.n	800a874 <_strtod_l+0x8fc>
 800a8b2:	f7ff fb45 	bl	8009f40 <sulp>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	ec51 0b18 	vmov	r0, r1, d8
 800a8be:	f7f5 fcfb 	bl	80002b8 <__aeabi_dsub>
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	4682      	mov	sl, r0
 800a8c8:	468b      	mov	fp, r1
 800a8ca:	f7f6 f915 	bl	8000af8 <__aeabi_dcmpeq>
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d0c1      	beq.n	800a856 <_strtod_l+0x8de>
 800a8d2:	e611      	b.n	800a4f8 <_strtod_l+0x580>
 800a8d4:	fffffc02 	.word	0xfffffc02
 800a8d8:	7ff00000 	.word	0x7ff00000
 800a8dc:	39500000 	.word	0x39500000
 800a8e0:	000fffff 	.word	0x000fffff
 800a8e4:	7fefffff 	.word	0x7fefffff
 800a8e8:	0800de48 	.word	0x0800de48
 800a8ec:	4631      	mov	r1, r6
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	f002 f91c 	bl	800cb2c <__ratio>
 800a8f4:	ec59 8b10 	vmov	r8, r9, d0
 800a8f8:	ee10 0a10 	vmov	r0, s0
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a902:	4649      	mov	r1, r9
 800a904:	f7f6 f90c 	bl	8000b20 <__aeabi_dcmple>
 800a908:	2800      	cmp	r0, #0
 800a90a:	d07a      	beq.n	800aa02 <_strtod_l+0xa8a>
 800a90c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d04a      	beq.n	800a9a8 <_strtod_l+0xa30>
 800a912:	4b95      	ldr	r3, [pc, #596]	; (800ab68 <_strtod_l+0xbf0>)
 800a914:	2200      	movs	r2, #0
 800a916:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a91a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ab68 <_strtod_l+0xbf0>
 800a91e:	f04f 0800 	mov.w	r8, #0
 800a922:	4b92      	ldr	r3, [pc, #584]	; (800ab6c <_strtod_l+0xbf4>)
 800a924:	403b      	ands	r3, r7
 800a926:	930d      	str	r3, [sp, #52]	; 0x34
 800a928:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a92a:	4b91      	ldr	r3, [pc, #580]	; (800ab70 <_strtod_l+0xbf8>)
 800a92c:	429a      	cmp	r2, r3
 800a92e:	f040 80b0 	bne.w	800aa92 <_strtod_l+0xb1a>
 800a932:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a936:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a93a:	ec4b ab10 	vmov	d0, sl, fp
 800a93e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a942:	f002 f81b 	bl	800c97c <__ulp>
 800a946:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a94a:	ec53 2b10 	vmov	r2, r3, d0
 800a94e:	f7f5 fe6b 	bl	8000628 <__aeabi_dmul>
 800a952:	4652      	mov	r2, sl
 800a954:	465b      	mov	r3, fp
 800a956:	f7f5 fcb1 	bl	80002bc <__adddf3>
 800a95a:	460b      	mov	r3, r1
 800a95c:	4983      	ldr	r1, [pc, #524]	; (800ab6c <_strtod_l+0xbf4>)
 800a95e:	4a85      	ldr	r2, [pc, #532]	; (800ab74 <_strtod_l+0xbfc>)
 800a960:	4019      	ands	r1, r3
 800a962:	4291      	cmp	r1, r2
 800a964:	4682      	mov	sl, r0
 800a966:	d960      	bls.n	800aa2a <_strtod_l+0xab2>
 800a968:	ee18 3a90 	vmov	r3, s17
 800a96c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a970:	4293      	cmp	r3, r2
 800a972:	d104      	bne.n	800a97e <_strtod_l+0xa06>
 800a974:	ee18 3a10 	vmov	r3, s16
 800a978:	3301      	adds	r3, #1
 800a97a:	f43f ad45 	beq.w	800a408 <_strtod_l+0x490>
 800a97e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ab80 <_strtod_l+0xc08>
 800a982:	f04f 3aff 	mov.w	sl, #4294967295
 800a986:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a988:	4620      	mov	r0, r4
 800a98a:	f001 fcc5 	bl	800c318 <_Bfree>
 800a98e:	9905      	ldr	r1, [sp, #20]
 800a990:	4620      	mov	r0, r4
 800a992:	f001 fcc1 	bl	800c318 <_Bfree>
 800a996:	4631      	mov	r1, r6
 800a998:	4620      	mov	r0, r4
 800a99a:	f001 fcbd 	bl	800c318 <_Bfree>
 800a99e:	4629      	mov	r1, r5
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	f001 fcb9 	bl	800c318 <_Bfree>
 800a9a6:	e61a      	b.n	800a5de <_strtod_l+0x666>
 800a9a8:	f1ba 0f00 	cmp.w	sl, #0
 800a9ac:	d11b      	bne.n	800a9e6 <_strtod_l+0xa6e>
 800a9ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a9b2:	b9f3      	cbnz	r3, 800a9f2 <_strtod_l+0xa7a>
 800a9b4:	4b6c      	ldr	r3, [pc, #432]	; (800ab68 <_strtod_l+0xbf0>)
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	4640      	mov	r0, r8
 800a9ba:	4649      	mov	r1, r9
 800a9bc:	f7f6 f8a6 	bl	8000b0c <__aeabi_dcmplt>
 800a9c0:	b9d0      	cbnz	r0, 800a9f8 <_strtod_l+0xa80>
 800a9c2:	4640      	mov	r0, r8
 800a9c4:	4649      	mov	r1, r9
 800a9c6:	4b6c      	ldr	r3, [pc, #432]	; (800ab78 <_strtod_l+0xc00>)
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f7f5 fe2d 	bl	8000628 <__aeabi_dmul>
 800a9ce:	4680      	mov	r8, r0
 800a9d0:	4689      	mov	r9, r1
 800a9d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a9d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a9da:	9315      	str	r3, [sp, #84]	; 0x54
 800a9dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a9e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a9e4:	e79d      	b.n	800a922 <_strtod_l+0x9aa>
 800a9e6:	f1ba 0f01 	cmp.w	sl, #1
 800a9ea:	d102      	bne.n	800a9f2 <_strtod_l+0xa7a>
 800a9ec:	2f00      	cmp	r7, #0
 800a9ee:	f43f ad83 	beq.w	800a4f8 <_strtod_l+0x580>
 800a9f2:	4b62      	ldr	r3, [pc, #392]	; (800ab7c <_strtod_l+0xc04>)
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	e78e      	b.n	800a916 <_strtod_l+0x99e>
 800a9f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ab78 <_strtod_l+0xc00>
 800a9fc:	f04f 0800 	mov.w	r8, #0
 800aa00:	e7e7      	b.n	800a9d2 <_strtod_l+0xa5a>
 800aa02:	4b5d      	ldr	r3, [pc, #372]	; (800ab78 <_strtod_l+0xc00>)
 800aa04:	4640      	mov	r0, r8
 800aa06:	4649      	mov	r1, r9
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f7f5 fe0d 	bl	8000628 <__aeabi_dmul>
 800aa0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa10:	4680      	mov	r8, r0
 800aa12:	4689      	mov	r9, r1
 800aa14:	b933      	cbnz	r3, 800aa24 <_strtod_l+0xaac>
 800aa16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa1a:	900e      	str	r0, [sp, #56]	; 0x38
 800aa1c:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800aa22:	e7dd      	b.n	800a9e0 <_strtod_l+0xa68>
 800aa24:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800aa28:	e7f9      	b.n	800aa1e <_strtod_l+0xaa6>
 800aa2a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800aa2e:	9b04      	ldr	r3, [sp, #16]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d1a8      	bne.n	800a986 <_strtod_l+0xa0e>
 800aa34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aa38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa3a:	0d1b      	lsrs	r3, r3, #20
 800aa3c:	051b      	lsls	r3, r3, #20
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d1a1      	bne.n	800a986 <_strtod_l+0xa0e>
 800aa42:	4640      	mov	r0, r8
 800aa44:	4649      	mov	r1, r9
 800aa46:	f7f6 f94f 	bl	8000ce8 <__aeabi_d2lz>
 800aa4a:	f7f5 fdbf 	bl	80005cc <__aeabi_l2d>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	460b      	mov	r3, r1
 800aa52:	4640      	mov	r0, r8
 800aa54:	4649      	mov	r1, r9
 800aa56:	f7f5 fc2f 	bl	80002b8 <__aeabi_dsub>
 800aa5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa60:	ea43 030a 	orr.w	r3, r3, sl
 800aa64:	4313      	orrs	r3, r2
 800aa66:	4680      	mov	r8, r0
 800aa68:	4689      	mov	r9, r1
 800aa6a:	d055      	beq.n	800ab18 <_strtod_l+0xba0>
 800aa6c:	a336      	add	r3, pc, #216	; (adr r3, 800ab48 <_strtod_l+0xbd0>)
 800aa6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa72:	f7f6 f84b 	bl	8000b0c <__aeabi_dcmplt>
 800aa76:	2800      	cmp	r0, #0
 800aa78:	f47f acd0 	bne.w	800a41c <_strtod_l+0x4a4>
 800aa7c:	a334      	add	r3, pc, #208	; (adr r3, 800ab50 <_strtod_l+0xbd8>)
 800aa7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa82:	4640      	mov	r0, r8
 800aa84:	4649      	mov	r1, r9
 800aa86:	f7f6 f85f 	bl	8000b48 <__aeabi_dcmpgt>
 800aa8a:	2800      	cmp	r0, #0
 800aa8c:	f43f af7b 	beq.w	800a986 <_strtod_l+0xa0e>
 800aa90:	e4c4      	b.n	800a41c <_strtod_l+0x4a4>
 800aa92:	9b04      	ldr	r3, [sp, #16]
 800aa94:	b333      	cbz	r3, 800aae4 <_strtod_l+0xb6c>
 800aa96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa98:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aa9c:	d822      	bhi.n	800aae4 <_strtod_l+0xb6c>
 800aa9e:	a32e      	add	r3, pc, #184	; (adr r3, 800ab58 <_strtod_l+0xbe0>)
 800aaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa4:	4640      	mov	r0, r8
 800aaa6:	4649      	mov	r1, r9
 800aaa8:	f7f6 f83a 	bl	8000b20 <__aeabi_dcmple>
 800aaac:	b1a0      	cbz	r0, 800aad8 <_strtod_l+0xb60>
 800aaae:	4649      	mov	r1, r9
 800aab0:	4640      	mov	r0, r8
 800aab2:	f7f6 f891 	bl	8000bd8 <__aeabi_d2uiz>
 800aab6:	2801      	cmp	r0, #1
 800aab8:	bf38      	it	cc
 800aaba:	2001      	movcc	r0, #1
 800aabc:	f7f5 fd3a 	bl	8000534 <__aeabi_ui2d>
 800aac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aac2:	4680      	mov	r8, r0
 800aac4:	4689      	mov	r9, r1
 800aac6:	bb23      	cbnz	r3, 800ab12 <_strtod_l+0xb9a>
 800aac8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aacc:	9010      	str	r0, [sp, #64]	; 0x40
 800aace:	9311      	str	r3, [sp, #68]	; 0x44
 800aad0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aad4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aada:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aadc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800aae0:	1a9b      	subs	r3, r3, r2
 800aae2:	9309      	str	r3, [sp, #36]	; 0x24
 800aae4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aae8:	eeb0 0a48 	vmov.f32	s0, s16
 800aaec:	eef0 0a68 	vmov.f32	s1, s17
 800aaf0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aaf4:	f001 ff42 	bl	800c97c <__ulp>
 800aaf8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aafc:	ec53 2b10 	vmov	r2, r3, d0
 800ab00:	f7f5 fd92 	bl	8000628 <__aeabi_dmul>
 800ab04:	ec53 2b18 	vmov	r2, r3, d8
 800ab08:	f7f5 fbd8 	bl	80002bc <__adddf3>
 800ab0c:	4682      	mov	sl, r0
 800ab0e:	468b      	mov	fp, r1
 800ab10:	e78d      	b.n	800aa2e <_strtod_l+0xab6>
 800ab12:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ab16:	e7db      	b.n	800aad0 <_strtod_l+0xb58>
 800ab18:	a311      	add	r3, pc, #68	; (adr r3, 800ab60 <_strtod_l+0xbe8>)
 800ab1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1e:	f7f5 fff5 	bl	8000b0c <__aeabi_dcmplt>
 800ab22:	e7b2      	b.n	800aa8a <_strtod_l+0xb12>
 800ab24:	2300      	movs	r3, #0
 800ab26:	930a      	str	r3, [sp, #40]	; 0x28
 800ab28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab2c:	6013      	str	r3, [r2, #0]
 800ab2e:	f7ff ba6b 	b.w	800a008 <_strtod_l+0x90>
 800ab32:	2a65      	cmp	r2, #101	; 0x65
 800ab34:	f43f ab5f 	beq.w	800a1f6 <_strtod_l+0x27e>
 800ab38:	2a45      	cmp	r2, #69	; 0x45
 800ab3a:	f43f ab5c 	beq.w	800a1f6 <_strtod_l+0x27e>
 800ab3e:	2301      	movs	r3, #1
 800ab40:	f7ff bb94 	b.w	800a26c <_strtod_l+0x2f4>
 800ab44:	f3af 8000 	nop.w
 800ab48:	94a03595 	.word	0x94a03595
 800ab4c:	3fdfffff 	.word	0x3fdfffff
 800ab50:	35afe535 	.word	0x35afe535
 800ab54:	3fe00000 	.word	0x3fe00000
 800ab58:	ffc00000 	.word	0xffc00000
 800ab5c:	41dfffff 	.word	0x41dfffff
 800ab60:	94a03595 	.word	0x94a03595
 800ab64:	3fcfffff 	.word	0x3fcfffff
 800ab68:	3ff00000 	.word	0x3ff00000
 800ab6c:	7ff00000 	.word	0x7ff00000
 800ab70:	7fe00000 	.word	0x7fe00000
 800ab74:	7c9fffff 	.word	0x7c9fffff
 800ab78:	3fe00000 	.word	0x3fe00000
 800ab7c:	bff00000 	.word	0xbff00000
 800ab80:	7fefffff 	.word	0x7fefffff

0800ab84 <_strtod_r>:
 800ab84:	4b01      	ldr	r3, [pc, #4]	; (800ab8c <_strtod_r+0x8>)
 800ab86:	f7ff b9f7 	b.w	8009f78 <_strtod_l>
 800ab8a:	bf00      	nop
 800ab8c:	20000080 	.word	0x20000080

0800ab90 <_strtol_l.constprop.0>:
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab96:	d001      	beq.n	800ab9c <_strtol_l.constprop.0+0xc>
 800ab98:	2b24      	cmp	r3, #36	; 0x24
 800ab9a:	d906      	bls.n	800abaa <_strtol_l.constprop.0+0x1a>
 800ab9c:	f7fe fad8 	bl	8009150 <__errno>
 800aba0:	2316      	movs	r3, #22
 800aba2:	6003      	str	r3, [r0, #0]
 800aba4:	2000      	movs	r0, #0
 800aba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abaa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ac90 <_strtol_l.constprop.0+0x100>
 800abae:	460d      	mov	r5, r1
 800abb0:	462e      	mov	r6, r5
 800abb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abb6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800abba:	f017 0708 	ands.w	r7, r7, #8
 800abbe:	d1f7      	bne.n	800abb0 <_strtol_l.constprop.0+0x20>
 800abc0:	2c2d      	cmp	r4, #45	; 0x2d
 800abc2:	d132      	bne.n	800ac2a <_strtol_l.constprop.0+0x9a>
 800abc4:	782c      	ldrb	r4, [r5, #0]
 800abc6:	2701      	movs	r7, #1
 800abc8:	1cb5      	adds	r5, r6, #2
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d05b      	beq.n	800ac86 <_strtol_l.constprop.0+0xf6>
 800abce:	2b10      	cmp	r3, #16
 800abd0:	d109      	bne.n	800abe6 <_strtol_l.constprop.0+0x56>
 800abd2:	2c30      	cmp	r4, #48	; 0x30
 800abd4:	d107      	bne.n	800abe6 <_strtol_l.constprop.0+0x56>
 800abd6:	782c      	ldrb	r4, [r5, #0]
 800abd8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800abdc:	2c58      	cmp	r4, #88	; 0x58
 800abde:	d14d      	bne.n	800ac7c <_strtol_l.constprop.0+0xec>
 800abe0:	786c      	ldrb	r4, [r5, #1]
 800abe2:	2310      	movs	r3, #16
 800abe4:	3502      	adds	r5, #2
 800abe6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800abea:	f108 38ff 	add.w	r8, r8, #4294967295
 800abee:	f04f 0c00 	mov.w	ip, #0
 800abf2:	fbb8 f9f3 	udiv	r9, r8, r3
 800abf6:	4666      	mov	r6, ip
 800abf8:	fb03 8a19 	mls	sl, r3, r9, r8
 800abfc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ac00:	f1be 0f09 	cmp.w	lr, #9
 800ac04:	d816      	bhi.n	800ac34 <_strtol_l.constprop.0+0xa4>
 800ac06:	4674      	mov	r4, lr
 800ac08:	42a3      	cmp	r3, r4
 800ac0a:	dd24      	ble.n	800ac56 <_strtol_l.constprop.0+0xc6>
 800ac0c:	f1bc 0f00 	cmp.w	ip, #0
 800ac10:	db1e      	blt.n	800ac50 <_strtol_l.constprop.0+0xc0>
 800ac12:	45b1      	cmp	r9, r6
 800ac14:	d31c      	bcc.n	800ac50 <_strtol_l.constprop.0+0xc0>
 800ac16:	d101      	bne.n	800ac1c <_strtol_l.constprop.0+0x8c>
 800ac18:	45a2      	cmp	sl, r4
 800ac1a:	db19      	blt.n	800ac50 <_strtol_l.constprop.0+0xc0>
 800ac1c:	fb06 4603 	mla	r6, r6, r3, r4
 800ac20:	f04f 0c01 	mov.w	ip, #1
 800ac24:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac28:	e7e8      	b.n	800abfc <_strtol_l.constprop.0+0x6c>
 800ac2a:	2c2b      	cmp	r4, #43	; 0x2b
 800ac2c:	bf04      	itt	eq
 800ac2e:	782c      	ldrbeq	r4, [r5, #0]
 800ac30:	1cb5      	addeq	r5, r6, #2
 800ac32:	e7ca      	b.n	800abca <_strtol_l.constprop.0+0x3a>
 800ac34:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ac38:	f1be 0f19 	cmp.w	lr, #25
 800ac3c:	d801      	bhi.n	800ac42 <_strtol_l.constprop.0+0xb2>
 800ac3e:	3c37      	subs	r4, #55	; 0x37
 800ac40:	e7e2      	b.n	800ac08 <_strtol_l.constprop.0+0x78>
 800ac42:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ac46:	f1be 0f19 	cmp.w	lr, #25
 800ac4a:	d804      	bhi.n	800ac56 <_strtol_l.constprop.0+0xc6>
 800ac4c:	3c57      	subs	r4, #87	; 0x57
 800ac4e:	e7db      	b.n	800ac08 <_strtol_l.constprop.0+0x78>
 800ac50:	f04f 3cff 	mov.w	ip, #4294967295
 800ac54:	e7e6      	b.n	800ac24 <_strtol_l.constprop.0+0x94>
 800ac56:	f1bc 0f00 	cmp.w	ip, #0
 800ac5a:	da05      	bge.n	800ac68 <_strtol_l.constprop.0+0xd8>
 800ac5c:	2322      	movs	r3, #34	; 0x22
 800ac5e:	6003      	str	r3, [r0, #0]
 800ac60:	4646      	mov	r6, r8
 800ac62:	b942      	cbnz	r2, 800ac76 <_strtol_l.constprop.0+0xe6>
 800ac64:	4630      	mov	r0, r6
 800ac66:	e79e      	b.n	800aba6 <_strtol_l.constprop.0+0x16>
 800ac68:	b107      	cbz	r7, 800ac6c <_strtol_l.constprop.0+0xdc>
 800ac6a:	4276      	negs	r6, r6
 800ac6c:	2a00      	cmp	r2, #0
 800ac6e:	d0f9      	beq.n	800ac64 <_strtol_l.constprop.0+0xd4>
 800ac70:	f1bc 0f00 	cmp.w	ip, #0
 800ac74:	d000      	beq.n	800ac78 <_strtol_l.constprop.0+0xe8>
 800ac76:	1e69      	subs	r1, r5, #1
 800ac78:	6011      	str	r1, [r2, #0]
 800ac7a:	e7f3      	b.n	800ac64 <_strtol_l.constprop.0+0xd4>
 800ac7c:	2430      	movs	r4, #48	; 0x30
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d1b1      	bne.n	800abe6 <_strtol_l.constprop.0+0x56>
 800ac82:	2308      	movs	r3, #8
 800ac84:	e7af      	b.n	800abe6 <_strtol_l.constprop.0+0x56>
 800ac86:	2c30      	cmp	r4, #48	; 0x30
 800ac88:	d0a5      	beq.n	800abd6 <_strtol_l.constprop.0+0x46>
 800ac8a:	230a      	movs	r3, #10
 800ac8c:	e7ab      	b.n	800abe6 <_strtol_l.constprop.0+0x56>
 800ac8e:	bf00      	nop
 800ac90:	0800de71 	.word	0x0800de71

0800ac94 <_strtol_r>:
 800ac94:	f7ff bf7c 	b.w	800ab90 <_strtol_l.constprop.0>

0800ac98 <quorem>:
 800ac98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac9c:	6903      	ldr	r3, [r0, #16]
 800ac9e:	690c      	ldr	r4, [r1, #16]
 800aca0:	42a3      	cmp	r3, r4
 800aca2:	4607      	mov	r7, r0
 800aca4:	f2c0 8081 	blt.w	800adaa <quorem+0x112>
 800aca8:	3c01      	subs	r4, #1
 800acaa:	f101 0814 	add.w	r8, r1, #20
 800acae:	f100 0514 	add.w	r5, r0, #20
 800acb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acb6:	9301      	str	r3, [sp, #4]
 800acb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800acbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acc0:	3301      	adds	r3, #1
 800acc2:	429a      	cmp	r2, r3
 800acc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800acc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800accc:	fbb2 f6f3 	udiv	r6, r2, r3
 800acd0:	d331      	bcc.n	800ad36 <quorem+0x9e>
 800acd2:	f04f 0e00 	mov.w	lr, #0
 800acd6:	4640      	mov	r0, r8
 800acd8:	46ac      	mov	ip, r5
 800acda:	46f2      	mov	sl, lr
 800acdc:	f850 2b04 	ldr.w	r2, [r0], #4
 800ace0:	b293      	uxth	r3, r2
 800ace2:	fb06 e303 	mla	r3, r6, r3, lr
 800ace6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800acea:	b29b      	uxth	r3, r3
 800acec:	ebaa 0303 	sub.w	r3, sl, r3
 800acf0:	f8dc a000 	ldr.w	sl, [ip]
 800acf4:	0c12      	lsrs	r2, r2, #16
 800acf6:	fa13 f38a 	uxtah	r3, r3, sl
 800acfa:	fb06 e202 	mla	r2, r6, r2, lr
 800acfe:	9300      	str	r3, [sp, #0]
 800ad00:	9b00      	ldr	r3, [sp, #0]
 800ad02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ad06:	b292      	uxth	r2, r2
 800ad08:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ad0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad10:	f8bd 3000 	ldrh.w	r3, [sp]
 800ad14:	4581      	cmp	r9, r0
 800ad16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad1a:	f84c 3b04 	str.w	r3, [ip], #4
 800ad1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ad22:	d2db      	bcs.n	800acdc <quorem+0x44>
 800ad24:	f855 300b 	ldr.w	r3, [r5, fp]
 800ad28:	b92b      	cbnz	r3, 800ad36 <quorem+0x9e>
 800ad2a:	9b01      	ldr	r3, [sp, #4]
 800ad2c:	3b04      	subs	r3, #4
 800ad2e:	429d      	cmp	r5, r3
 800ad30:	461a      	mov	r2, r3
 800ad32:	d32e      	bcc.n	800ad92 <quorem+0xfa>
 800ad34:	613c      	str	r4, [r7, #16]
 800ad36:	4638      	mov	r0, r7
 800ad38:	f001 fd7a 	bl	800c830 <__mcmp>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	db24      	blt.n	800ad8a <quorem+0xf2>
 800ad40:	3601      	adds	r6, #1
 800ad42:	4628      	mov	r0, r5
 800ad44:	f04f 0c00 	mov.w	ip, #0
 800ad48:	f858 2b04 	ldr.w	r2, [r8], #4
 800ad4c:	f8d0 e000 	ldr.w	lr, [r0]
 800ad50:	b293      	uxth	r3, r2
 800ad52:	ebac 0303 	sub.w	r3, ip, r3
 800ad56:	0c12      	lsrs	r2, r2, #16
 800ad58:	fa13 f38e 	uxtah	r3, r3, lr
 800ad5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ad60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad6a:	45c1      	cmp	r9, r8
 800ad6c:	f840 3b04 	str.w	r3, [r0], #4
 800ad70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ad74:	d2e8      	bcs.n	800ad48 <quorem+0xb0>
 800ad76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad7e:	b922      	cbnz	r2, 800ad8a <quorem+0xf2>
 800ad80:	3b04      	subs	r3, #4
 800ad82:	429d      	cmp	r5, r3
 800ad84:	461a      	mov	r2, r3
 800ad86:	d30a      	bcc.n	800ad9e <quorem+0x106>
 800ad88:	613c      	str	r4, [r7, #16]
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	b003      	add	sp, #12
 800ad8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad92:	6812      	ldr	r2, [r2, #0]
 800ad94:	3b04      	subs	r3, #4
 800ad96:	2a00      	cmp	r2, #0
 800ad98:	d1cc      	bne.n	800ad34 <quorem+0x9c>
 800ad9a:	3c01      	subs	r4, #1
 800ad9c:	e7c7      	b.n	800ad2e <quorem+0x96>
 800ad9e:	6812      	ldr	r2, [r2, #0]
 800ada0:	3b04      	subs	r3, #4
 800ada2:	2a00      	cmp	r2, #0
 800ada4:	d1f0      	bne.n	800ad88 <quorem+0xf0>
 800ada6:	3c01      	subs	r4, #1
 800ada8:	e7eb      	b.n	800ad82 <quorem+0xea>
 800adaa:	2000      	movs	r0, #0
 800adac:	e7ee      	b.n	800ad8c <quorem+0xf4>
	...

0800adb0 <_dtoa_r>:
 800adb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb4:	ed2d 8b04 	vpush	{d8-d9}
 800adb8:	ec57 6b10 	vmov	r6, r7, d0
 800adbc:	b093      	sub	sp, #76	; 0x4c
 800adbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800adc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800adc4:	9106      	str	r1, [sp, #24]
 800adc6:	ee10 aa10 	vmov	sl, s0
 800adca:	4604      	mov	r4, r0
 800adcc:	9209      	str	r2, [sp, #36]	; 0x24
 800adce:	930c      	str	r3, [sp, #48]	; 0x30
 800add0:	46bb      	mov	fp, r7
 800add2:	b975      	cbnz	r5, 800adf2 <_dtoa_r+0x42>
 800add4:	2010      	movs	r0, #16
 800add6:	f001 fa45 	bl	800c264 <malloc>
 800adda:	4602      	mov	r2, r0
 800addc:	6260      	str	r0, [r4, #36]	; 0x24
 800adde:	b920      	cbnz	r0, 800adea <_dtoa_r+0x3a>
 800ade0:	4ba7      	ldr	r3, [pc, #668]	; (800b080 <_dtoa_r+0x2d0>)
 800ade2:	21ea      	movs	r1, #234	; 0xea
 800ade4:	48a7      	ldr	r0, [pc, #668]	; (800b084 <_dtoa_r+0x2d4>)
 800ade6:	f002 fc17 	bl	800d618 <__assert_func>
 800adea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800adee:	6005      	str	r5, [r0, #0]
 800adf0:	60c5      	str	r5, [r0, #12]
 800adf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adf4:	6819      	ldr	r1, [r3, #0]
 800adf6:	b151      	cbz	r1, 800ae0e <_dtoa_r+0x5e>
 800adf8:	685a      	ldr	r2, [r3, #4]
 800adfa:	604a      	str	r2, [r1, #4]
 800adfc:	2301      	movs	r3, #1
 800adfe:	4093      	lsls	r3, r2
 800ae00:	608b      	str	r3, [r1, #8]
 800ae02:	4620      	mov	r0, r4
 800ae04:	f001 fa88 	bl	800c318 <_Bfree>
 800ae08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	601a      	str	r2, [r3, #0]
 800ae0e:	1e3b      	subs	r3, r7, #0
 800ae10:	bfaa      	itet	ge
 800ae12:	2300      	movge	r3, #0
 800ae14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ae18:	f8c8 3000 	strge.w	r3, [r8]
 800ae1c:	4b9a      	ldr	r3, [pc, #616]	; (800b088 <_dtoa_r+0x2d8>)
 800ae1e:	bfbc      	itt	lt
 800ae20:	2201      	movlt	r2, #1
 800ae22:	f8c8 2000 	strlt.w	r2, [r8]
 800ae26:	ea33 030b 	bics.w	r3, r3, fp
 800ae2a:	d11b      	bne.n	800ae64 <_dtoa_r+0xb4>
 800ae2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae2e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ae32:	6013      	str	r3, [r2, #0]
 800ae34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae38:	4333      	orrs	r3, r6
 800ae3a:	f000 8592 	beq.w	800b962 <_dtoa_r+0xbb2>
 800ae3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae40:	b963      	cbnz	r3, 800ae5c <_dtoa_r+0xac>
 800ae42:	4b92      	ldr	r3, [pc, #584]	; (800b08c <_dtoa_r+0x2dc>)
 800ae44:	e022      	b.n	800ae8c <_dtoa_r+0xdc>
 800ae46:	4b92      	ldr	r3, [pc, #584]	; (800b090 <_dtoa_r+0x2e0>)
 800ae48:	9301      	str	r3, [sp, #4]
 800ae4a:	3308      	adds	r3, #8
 800ae4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ae4e:	6013      	str	r3, [r2, #0]
 800ae50:	9801      	ldr	r0, [sp, #4]
 800ae52:	b013      	add	sp, #76	; 0x4c
 800ae54:	ecbd 8b04 	vpop	{d8-d9}
 800ae58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae5c:	4b8b      	ldr	r3, [pc, #556]	; (800b08c <_dtoa_r+0x2dc>)
 800ae5e:	9301      	str	r3, [sp, #4]
 800ae60:	3303      	adds	r3, #3
 800ae62:	e7f3      	b.n	800ae4c <_dtoa_r+0x9c>
 800ae64:	2200      	movs	r2, #0
 800ae66:	2300      	movs	r3, #0
 800ae68:	4650      	mov	r0, sl
 800ae6a:	4659      	mov	r1, fp
 800ae6c:	f7f5 fe44 	bl	8000af8 <__aeabi_dcmpeq>
 800ae70:	ec4b ab19 	vmov	d9, sl, fp
 800ae74:	4680      	mov	r8, r0
 800ae76:	b158      	cbz	r0, 800ae90 <_dtoa_r+0xe0>
 800ae78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	6013      	str	r3, [r2, #0]
 800ae7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	f000 856b 	beq.w	800b95c <_dtoa_r+0xbac>
 800ae86:	4883      	ldr	r0, [pc, #524]	; (800b094 <_dtoa_r+0x2e4>)
 800ae88:	6018      	str	r0, [r3, #0]
 800ae8a:	1e43      	subs	r3, r0, #1
 800ae8c:	9301      	str	r3, [sp, #4]
 800ae8e:	e7df      	b.n	800ae50 <_dtoa_r+0xa0>
 800ae90:	ec4b ab10 	vmov	d0, sl, fp
 800ae94:	aa10      	add	r2, sp, #64	; 0x40
 800ae96:	a911      	add	r1, sp, #68	; 0x44
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f001 fdeb 	bl	800ca74 <__d2b>
 800ae9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800aea2:	ee08 0a10 	vmov	s16, r0
 800aea6:	2d00      	cmp	r5, #0
 800aea8:	f000 8084 	beq.w	800afb4 <_dtoa_r+0x204>
 800aeac:	ee19 3a90 	vmov	r3, s19
 800aeb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aeb4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800aeb8:	4656      	mov	r6, sl
 800aeba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800aebe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aec2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800aec6:	4b74      	ldr	r3, [pc, #464]	; (800b098 <_dtoa_r+0x2e8>)
 800aec8:	2200      	movs	r2, #0
 800aeca:	4630      	mov	r0, r6
 800aecc:	4639      	mov	r1, r7
 800aece:	f7f5 f9f3 	bl	80002b8 <__aeabi_dsub>
 800aed2:	a365      	add	r3, pc, #404	; (adr r3, 800b068 <_dtoa_r+0x2b8>)
 800aed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed8:	f7f5 fba6 	bl	8000628 <__aeabi_dmul>
 800aedc:	a364      	add	r3, pc, #400	; (adr r3, 800b070 <_dtoa_r+0x2c0>)
 800aede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee2:	f7f5 f9eb 	bl	80002bc <__adddf3>
 800aee6:	4606      	mov	r6, r0
 800aee8:	4628      	mov	r0, r5
 800aeea:	460f      	mov	r7, r1
 800aeec:	f7f5 fb32 	bl	8000554 <__aeabi_i2d>
 800aef0:	a361      	add	r3, pc, #388	; (adr r3, 800b078 <_dtoa_r+0x2c8>)
 800aef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef6:	f7f5 fb97 	bl	8000628 <__aeabi_dmul>
 800aefa:	4602      	mov	r2, r0
 800aefc:	460b      	mov	r3, r1
 800aefe:	4630      	mov	r0, r6
 800af00:	4639      	mov	r1, r7
 800af02:	f7f5 f9db 	bl	80002bc <__adddf3>
 800af06:	4606      	mov	r6, r0
 800af08:	460f      	mov	r7, r1
 800af0a:	f7f5 fe3d 	bl	8000b88 <__aeabi_d2iz>
 800af0e:	2200      	movs	r2, #0
 800af10:	9000      	str	r0, [sp, #0]
 800af12:	2300      	movs	r3, #0
 800af14:	4630      	mov	r0, r6
 800af16:	4639      	mov	r1, r7
 800af18:	f7f5 fdf8 	bl	8000b0c <__aeabi_dcmplt>
 800af1c:	b150      	cbz	r0, 800af34 <_dtoa_r+0x184>
 800af1e:	9800      	ldr	r0, [sp, #0]
 800af20:	f7f5 fb18 	bl	8000554 <__aeabi_i2d>
 800af24:	4632      	mov	r2, r6
 800af26:	463b      	mov	r3, r7
 800af28:	f7f5 fde6 	bl	8000af8 <__aeabi_dcmpeq>
 800af2c:	b910      	cbnz	r0, 800af34 <_dtoa_r+0x184>
 800af2e:	9b00      	ldr	r3, [sp, #0]
 800af30:	3b01      	subs	r3, #1
 800af32:	9300      	str	r3, [sp, #0]
 800af34:	9b00      	ldr	r3, [sp, #0]
 800af36:	2b16      	cmp	r3, #22
 800af38:	d85a      	bhi.n	800aff0 <_dtoa_r+0x240>
 800af3a:	9a00      	ldr	r2, [sp, #0]
 800af3c:	4b57      	ldr	r3, [pc, #348]	; (800b09c <_dtoa_r+0x2ec>)
 800af3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af46:	ec51 0b19 	vmov	r0, r1, d9
 800af4a:	f7f5 fddf 	bl	8000b0c <__aeabi_dcmplt>
 800af4e:	2800      	cmp	r0, #0
 800af50:	d050      	beq.n	800aff4 <_dtoa_r+0x244>
 800af52:	9b00      	ldr	r3, [sp, #0]
 800af54:	3b01      	subs	r3, #1
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	2300      	movs	r3, #0
 800af5a:	930b      	str	r3, [sp, #44]	; 0x2c
 800af5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af5e:	1b5d      	subs	r5, r3, r5
 800af60:	1e6b      	subs	r3, r5, #1
 800af62:	9305      	str	r3, [sp, #20]
 800af64:	bf45      	ittet	mi
 800af66:	f1c5 0301 	rsbmi	r3, r5, #1
 800af6a:	9304      	strmi	r3, [sp, #16]
 800af6c:	2300      	movpl	r3, #0
 800af6e:	2300      	movmi	r3, #0
 800af70:	bf4c      	ite	mi
 800af72:	9305      	strmi	r3, [sp, #20]
 800af74:	9304      	strpl	r3, [sp, #16]
 800af76:	9b00      	ldr	r3, [sp, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	db3d      	blt.n	800aff8 <_dtoa_r+0x248>
 800af7c:	9b05      	ldr	r3, [sp, #20]
 800af7e:	9a00      	ldr	r2, [sp, #0]
 800af80:	920a      	str	r2, [sp, #40]	; 0x28
 800af82:	4413      	add	r3, r2
 800af84:	9305      	str	r3, [sp, #20]
 800af86:	2300      	movs	r3, #0
 800af88:	9307      	str	r3, [sp, #28]
 800af8a:	9b06      	ldr	r3, [sp, #24]
 800af8c:	2b09      	cmp	r3, #9
 800af8e:	f200 8089 	bhi.w	800b0a4 <_dtoa_r+0x2f4>
 800af92:	2b05      	cmp	r3, #5
 800af94:	bfc4      	itt	gt
 800af96:	3b04      	subgt	r3, #4
 800af98:	9306      	strgt	r3, [sp, #24]
 800af9a:	9b06      	ldr	r3, [sp, #24]
 800af9c:	f1a3 0302 	sub.w	r3, r3, #2
 800afa0:	bfcc      	ite	gt
 800afa2:	2500      	movgt	r5, #0
 800afa4:	2501      	movle	r5, #1
 800afa6:	2b03      	cmp	r3, #3
 800afa8:	f200 8087 	bhi.w	800b0ba <_dtoa_r+0x30a>
 800afac:	e8df f003 	tbb	[pc, r3]
 800afb0:	59383a2d 	.word	0x59383a2d
 800afb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800afb8:	441d      	add	r5, r3
 800afba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800afbe:	2b20      	cmp	r3, #32
 800afc0:	bfc1      	itttt	gt
 800afc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800afc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800afca:	fa0b f303 	lslgt.w	r3, fp, r3
 800afce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800afd2:	bfda      	itte	le
 800afd4:	f1c3 0320 	rsble	r3, r3, #32
 800afd8:	fa06 f003 	lslle.w	r0, r6, r3
 800afdc:	4318      	orrgt	r0, r3
 800afde:	f7f5 faa9 	bl	8000534 <__aeabi_ui2d>
 800afe2:	2301      	movs	r3, #1
 800afe4:	4606      	mov	r6, r0
 800afe6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800afea:	3d01      	subs	r5, #1
 800afec:	930e      	str	r3, [sp, #56]	; 0x38
 800afee:	e76a      	b.n	800aec6 <_dtoa_r+0x116>
 800aff0:	2301      	movs	r3, #1
 800aff2:	e7b2      	b.n	800af5a <_dtoa_r+0x1aa>
 800aff4:	900b      	str	r0, [sp, #44]	; 0x2c
 800aff6:	e7b1      	b.n	800af5c <_dtoa_r+0x1ac>
 800aff8:	9b04      	ldr	r3, [sp, #16]
 800affa:	9a00      	ldr	r2, [sp, #0]
 800affc:	1a9b      	subs	r3, r3, r2
 800affe:	9304      	str	r3, [sp, #16]
 800b000:	4253      	negs	r3, r2
 800b002:	9307      	str	r3, [sp, #28]
 800b004:	2300      	movs	r3, #0
 800b006:	930a      	str	r3, [sp, #40]	; 0x28
 800b008:	e7bf      	b.n	800af8a <_dtoa_r+0x1da>
 800b00a:	2300      	movs	r3, #0
 800b00c:	9308      	str	r3, [sp, #32]
 800b00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b010:	2b00      	cmp	r3, #0
 800b012:	dc55      	bgt.n	800b0c0 <_dtoa_r+0x310>
 800b014:	2301      	movs	r3, #1
 800b016:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b01a:	461a      	mov	r2, r3
 800b01c:	9209      	str	r2, [sp, #36]	; 0x24
 800b01e:	e00c      	b.n	800b03a <_dtoa_r+0x28a>
 800b020:	2301      	movs	r3, #1
 800b022:	e7f3      	b.n	800b00c <_dtoa_r+0x25c>
 800b024:	2300      	movs	r3, #0
 800b026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b028:	9308      	str	r3, [sp, #32]
 800b02a:	9b00      	ldr	r3, [sp, #0]
 800b02c:	4413      	add	r3, r2
 800b02e:	9302      	str	r3, [sp, #8]
 800b030:	3301      	adds	r3, #1
 800b032:	2b01      	cmp	r3, #1
 800b034:	9303      	str	r3, [sp, #12]
 800b036:	bfb8      	it	lt
 800b038:	2301      	movlt	r3, #1
 800b03a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b03c:	2200      	movs	r2, #0
 800b03e:	6042      	str	r2, [r0, #4]
 800b040:	2204      	movs	r2, #4
 800b042:	f102 0614 	add.w	r6, r2, #20
 800b046:	429e      	cmp	r6, r3
 800b048:	6841      	ldr	r1, [r0, #4]
 800b04a:	d93d      	bls.n	800b0c8 <_dtoa_r+0x318>
 800b04c:	4620      	mov	r0, r4
 800b04e:	f001 f923 	bl	800c298 <_Balloc>
 800b052:	9001      	str	r0, [sp, #4]
 800b054:	2800      	cmp	r0, #0
 800b056:	d13b      	bne.n	800b0d0 <_dtoa_r+0x320>
 800b058:	4b11      	ldr	r3, [pc, #68]	; (800b0a0 <_dtoa_r+0x2f0>)
 800b05a:	4602      	mov	r2, r0
 800b05c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b060:	e6c0      	b.n	800ade4 <_dtoa_r+0x34>
 800b062:	2301      	movs	r3, #1
 800b064:	e7df      	b.n	800b026 <_dtoa_r+0x276>
 800b066:	bf00      	nop
 800b068:	636f4361 	.word	0x636f4361
 800b06c:	3fd287a7 	.word	0x3fd287a7
 800b070:	8b60c8b3 	.word	0x8b60c8b3
 800b074:	3fc68a28 	.word	0x3fc68a28
 800b078:	509f79fb 	.word	0x509f79fb
 800b07c:	3fd34413 	.word	0x3fd34413
 800b080:	0800df7e 	.word	0x0800df7e
 800b084:	0800df95 	.word	0x0800df95
 800b088:	7ff00000 	.word	0x7ff00000
 800b08c:	0800df7a 	.word	0x0800df7a
 800b090:	0800df71 	.word	0x0800df71
 800b094:	0800ddf1 	.word	0x0800ddf1
 800b098:	3ff80000 	.word	0x3ff80000
 800b09c:	0800e168 	.word	0x0800e168
 800b0a0:	0800dff0 	.word	0x0800dff0
 800b0a4:	2501      	movs	r5, #1
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	9306      	str	r3, [sp, #24]
 800b0aa:	9508      	str	r5, [sp, #32]
 800b0ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b0b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	2312      	movs	r3, #18
 800b0b8:	e7b0      	b.n	800b01c <_dtoa_r+0x26c>
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	9308      	str	r3, [sp, #32]
 800b0be:	e7f5      	b.n	800b0ac <_dtoa_r+0x2fc>
 800b0c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b0c6:	e7b8      	b.n	800b03a <_dtoa_r+0x28a>
 800b0c8:	3101      	adds	r1, #1
 800b0ca:	6041      	str	r1, [r0, #4]
 800b0cc:	0052      	lsls	r2, r2, #1
 800b0ce:	e7b8      	b.n	800b042 <_dtoa_r+0x292>
 800b0d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0d2:	9a01      	ldr	r2, [sp, #4]
 800b0d4:	601a      	str	r2, [r3, #0]
 800b0d6:	9b03      	ldr	r3, [sp, #12]
 800b0d8:	2b0e      	cmp	r3, #14
 800b0da:	f200 809d 	bhi.w	800b218 <_dtoa_r+0x468>
 800b0de:	2d00      	cmp	r5, #0
 800b0e0:	f000 809a 	beq.w	800b218 <_dtoa_r+0x468>
 800b0e4:	9b00      	ldr	r3, [sp, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	dd32      	ble.n	800b150 <_dtoa_r+0x3a0>
 800b0ea:	4ab7      	ldr	r2, [pc, #732]	; (800b3c8 <_dtoa_r+0x618>)
 800b0ec:	f003 030f 	and.w	r3, r3, #15
 800b0f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b0f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b0f8:	9b00      	ldr	r3, [sp, #0]
 800b0fa:	05d8      	lsls	r0, r3, #23
 800b0fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b100:	d516      	bpl.n	800b130 <_dtoa_r+0x380>
 800b102:	4bb2      	ldr	r3, [pc, #712]	; (800b3cc <_dtoa_r+0x61c>)
 800b104:	ec51 0b19 	vmov	r0, r1, d9
 800b108:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b10c:	f7f5 fbb6 	bl	800087c <__aeabi_ddiv>
 800b110:	f007 070f 	and.w	r7, r7, #15
 800b114:	4682      	mov	sl, r0
 800b116:	468b      	mov	fp, r1
 800b118:	2503      	movs	r5, #3
 800b11a:	4eac      	ldr	r6, [pc, #688]	; (800b3cc <_dtoa_r+0x61c>)
 800b11c:	b957      	cbnz	r7, 800b134 <_dtoa_r+0x384>
 800b11e:	4642      	mov	r2, r8
 800b120:	464b      	mov	r3, r9
 800b122:	4650      	mov	r0, sl
 800b124:	4659      	mov	r1, fp
 800b126:	f7f5 fba9 	bl	800087c <__aeabi_ddiv>
 800b12a:	4682      	mov	sl, r0
 800b12c:	468b      	mov	fp, r1
 800b12e:	e028      	b.n	800b182 <_dtoa_r+0x3d2>
 800b130:	2502      	movs	r5, #2
 800b132:	e7f2      	b.n	800b11a <_dtoa_r+0x36a>
 800b134:	07f9      	lsls	r1, r7, #31
 800b136:	d508      	bpl.n	800b14a <_dtoa_r+0x39a>
 800b138:	4640      	mov	r0, r8
 800b13a:	4649      	mov	r1, r9
 800b13c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b140:	f7f5 fa72 	bl	8000628 <__aeabi_dmul>
 800b144:	3501      	adds	r5, #1
 800b146:	4680      	mov	r8, r0
 800b148:	4689      	mov	r9, r1
 800b14a:	107f      	asrs	r7, r7, #1
 800b14c:	3608      	adds	r6, #8
 800b14e:	e7e5      	b.n	800b11c <_dtoa_r+0x36c>
 800b150:	f000 809b 	beq.w	800b28a <_dtoa_r+0x4da>
 800b154:	9b00      	ldr	r3, [sp, #0]
 800b156:	4f9d      	ldr	r7, [pc, #628]	; (800b3cc <_dtoa_r+0x61c>)
 800b158:	425e      	negs	r6, r3
 800b15a:	4b9b      	ldr	r3, [pc, #620]	; (800b3c8 <_dtoa_r+0x618>)
 800b15c:	f006 020f 	and.w	r2, r6, #15
 800b160:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b168:	ec51 0b19 	vmov	r0, r1, d9
 800b16c:	f7f5 fa5c 	bl	8000628 <__aeabi_dmul>
 800b170:	1136      	asrs	r6, r6, #4
 800b172:	4682      	mov	sl, r0
 800b174:	468b      	mov	fp, r1
 800b176:	2300      	movs	r3, #0
 800b178:	2502      	movs	r5, #2
 800b17a:	2e00      	cmp	r6, #0
 800b17c:	d17a      	bne.n	800b274 <_dtoa_r+0x4c4>
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d1d3      	bne.n	800b12a <_dtoa_r+0x37a>
 800b182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b184:	2b00      	cmp	r3, #0
 800b186:	f000 8082 	beq.w	800b28e <_dtoa_r+0x4de>
 800b18a:	4b91      	ldr	r3, [pc, #580]	; (800b3d0 <_dtoa_r+0x620>)
 800b18c:	2200      	movs	r2, #0
 800b18e:	4650      	mov	r0, sl
 800b190:	4659      	mov	r1, fp
 800b192:	f7f5 fcbb 	bl	8000b0c <__aeabi_dcmplt>
 800b196:	2800      	cmp	r0, #0
 800b198:	d079      	beq.n	800b28e <_dtoa_r+0x4de>
 800b19a:	9b03      	ldr	r3, [sp, #12]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d076      	beq.n	800b28e <_dtoa_r+0x4de>
 800b1a0:	9b02      	ldr	r3, [sp, #8]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	dd36      	ble.n	800b214 <_dtoa_r+0x464>
 800b1a6:	9b00      	ldr	r3, [sp, #0]
 800b1a8:	4650      	mov	r0, sl
 800b1aa:	4659      	mov	r1, fp
 800b1ac:	1e5f      	subs	r7, r3, #1
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	4b88      	ldr	r3, [pc, #544]	; (800b3d4 <_dtoa_r+0x624>)
 800b1b2:	f7f5 fa39 	bl	8000628 <__aeabi_dmul>
 800b1b6:	9e02      	ldr	r6, [sp, #8]
 800b1b8:	4682      	mov	sl, r0
 800b1ba:	468b      	mov	fp, r1
 800b1bc:	3501      	adds	r5, #1
 800b1be:	4628      	mov	r0, r5
 800b1c0:	f7f5 f9c8 	bl	8000554 <__aeabi_i2d>
 800b1c4:	4652      	mov	r2, sl
 800b1c6:	465b      	mov	r3, fp
 800b1c8:	f7f5 fa2e 	bl	8000628 <__aeabi_dmul>
 800b1cc:	4b82      	ldr	r3, [pc, #520]	; (800b3d8 <_dtoa_r+0x628>)
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f7f5 f874 	bl	80002bc <__adddf3>
 800b1d4:	46d0      	mov	r8, sl
 800b1d6:	46d9      	mov	r9, fp
 800b1d8:	4682      	mov	sl, r0
 800b1da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b1de:	2e00      	cmp	r6, #0
 800b1e0:	d158      	bne.n	800b294 <_dtoa_r+0x4e4>
 800b1e2:	4b7e      	ldr	r3, [pc, #504]	; (800b3dc <_dtoa_r+0x62c>)
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	4640      	mov	r0, r8
 800b1e8:	4649      	mov	r1, r9
 800b1ea:	f7f5 f865 	bl	80002b8 <__aeabi_dsub>
 800b1ee:	4652      	mov	r2, sl
 800b1f0:	465b      	mov	r3, fp
 800b1f2:	4680      	mov	r8, r0
 800b1f4:	4689      	mov	r9, r1
 800b1f6:	f7f5 fca7 	bl	8000b48 <__aeabi_dcmpgt>
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	f040 8295 	bne.w	800b72a <_dtoa_r+0x97a>
 800b200:	4652      	mov	r2, sl
 800b202:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b206:	4640      	mov	r0, r8
 800b208:	4649      	mov	r1, r9
 800b20a:	f7f5 fc7f 	bl	8000b0c <__aeabi_dcmplt>
 800b20e:	2800      	cmp	r0, #0
 800b210:	f040 8289 	bne.w	800b726 <_dtoa_r+0x976>
 800b214:	ec5b ab19 	vmov	sl, fp, d9
 800b218:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f2c0 8148 	blt.w	800b4b0 <_dtoa_r+0x700>
 800b220:	9a00      	ldr	r2, [sp, #0]
 800b222:	2a0e      	cmp	r2, #14
 800b224:	f300 8144 	bgt.w	800b4b0 <_dtoa_r+0x700>
 800b228:	4b67      	ldr	r3, [pc, #412]	; (800b3c8 <_dtoa_r+0x618>)
 800b22a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b22e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b234:	2b00      	cmp	r3, #0
 800b236:	f280 80d5 	bge.w	800b3e4 <_dtoa_r+0x634>
 800b23a:	9b03      	ldr	r3, [sp, #12]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	f300 80d1 	bgt.w	800b3e4 <_dtoa_r+0x634>
 800b242:	f040 826f 	bne.w	800b724 <_dtoa_r+0x974>
 800b246:	4b65      	ldr	r3, [pc, #404]	; (800b3dc <_dtoa_r+0x62c>)
 800b248:	2200      	movs	r2, #0
 800b24a:	4640      	mov	r0, r8
 800b24c:	4649      	mov	r1, r9
 800b24e:	f7f5 f9eb 	bl	8000628 <__aeabi_dmul>
 800b252:	4652      	mov	r2, sl
 800b254:	465b      	mov	r3, fp
 800b256:	f7f5 fc6d 	bl	8000b34 <__aeabi_dcmpge>
 800b25a:	9e03      	ldr	r6, [sp, #12]
 800b25c:	4637      	mov	r7, r6
 800b25e:	2800      	cmp	r0, #0
 800b260:	f040 8245 	bne.w	800b6ee <_dtoa_r+0x93e>
 800b264:	9d01      	ldr	r5, [sp, #4]
 800b266:	2331      	movs	r3, #49	; 0x31
 800b268:	f805 3b01 	strb.w	r3, [r5], #1
 800b26c:	9b00      	ldr	r3, [sp, #0]
 800b26e:	3301      	adds	r3, #1
 800b270:	9300      	str	r3, [sp, #0]
 800b272:	e240      	b.n	800b6f6 <_dtoa_r+0x946>
 800b274:	07f2      	lsls	r2, r6, #31
 800b276:	d505      	bpl.n	800b284 <_dtoa_r+0x4d4>
 800b278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b27c:	f7f5 f9d4 	bl	8000628 <__aeabi_dmul>
 800b280:	3501      	adds	r5, #1
 800b282:	2301      	movs	r3, #1
 800b284:	1076      	asrs	r6, r6, #1
 800b286:	3708      	adds	r7, #8
 800b288:	e777      	b.n	800b17a <_dtoa_r+0x3ca>
 800b28a:	2502      	movs	r5, #2
 800b28c:	e779      	b.n	800b182 <_dtoa_r+0x3d2>
 800b28e:	9f00      	ldr	r7, [sp, #0]
 800b290:	9e03      	ldr	r6, [sp, #12]
 800b292:	e794      	b.n	800b1be <_dtoa_r+0x40e>
 800b294:	9901      	ldr	r1, [sp, #4]
 800b296:	4b4c      	ldr	r3, [pc, #304]	; (800b3c8 <_dtoa_r+0x618>)
 800b298:	4431      	add	r1, r6
 800b29a:	910d      	str	r1, [sp, #52]	; 0x34
 800b29c:	9908      	ldr	r1, [sp, #32]
 800b29e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b2a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b2a6:	2900      	cmp	r1, #0
 800b2a8:	d043      	beq.n	800b332 <_dtoa_r+0x582>
 800b2aa:	494d      	ldr	r1, [pc, #308]	; (800b3e0 <_dtoa_r+0x630>)
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	f7f5 fae5 	bl	800087c <__aeabi_ddiv>
 800b2b2:	4652      	mov	r2, sl
 800b2b4:	465b      	mov	r3, fp
 800b2b6:	f7f4 ffff 	bl	80002b8 <__aeabi_dsub>
 800b2ba:	9d01      	ldr	r5, [sp, #4]
 800b2bc:	4682      	mov	sl, r0
 800b2be:	468b      	mov	fp, r1
 800b2c0:	4649      	mov	r1, r9
 800b2c2:	4640      	mov	r0, r8
 800b2c4:	f7f5 fc60 	bl	8000b88 <__aeabi_d2iz>
 800b2c8:	4606      	mov	r6, r0
 800b2ca:	f7f5 f943 	bl	8000554 <__aeabi_i2d>
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	4640      	mov	r0, r8
 800b2d4:	4649      	mov	r1, r9
 800b2d6:	f7f4 ffef 	bl	80002b8 <__aeabi_dsub>
 800b2da:	3630      	adds	r6, #48	; 0x30
 800b2dc:	f805 6b01 	strb.w	r6, [r5], #1
 800b2e0:	4652      	mov	r2, sl
 800b2e2:	465b      	mov	r3, fp
 800b2e4:	4680      	mov	r8, r0
 800b2e6:	4689      	mov	r9, r1
 800b2e8:	f7f5 fc10 	bl	8000b0c <__aeabi_dcmplt>
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	d163      	bne.n	800b3b8 <_dtoa_r+0x608>
 800b2f0:	4642      	mov	r2, r8
 800b2f2:	464b      	mov	r3, r9
 800b2f4:	4936      	ldr	r1, [pc, #216]	; (800b3d0 <_dtoa_r+0x620>)
 800b2f6:	2000      	movs	r0, #0
 800b2f8:	f7f4 ffde 	bl	80002b8 <__aeabi_dsub>
 800b2fc:	4652      	mov	r2, sl
 800b2fe:	465b      	mov	r3, fp
 800b300:	f7f5 fc04 	bl	8000b0c <__aeabi_dcmplt>
 800b304:	2800      	cmp	r0, #0
 800b306:	f040 80b5 	bne.w	800b474 <_dtoa_r+0x6c4>
 800b30a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b30c:	429d      	cmp	r5, r3
 800b30e:	d081      	beq.n	800b214 <_dtoa_r+0x464>
 800b310:	4b30      	ldr	r3, [pc, #192]	; (800b3d4 <_dtoa_r+0x624>)
 800b312:	2200      	movs	r2, #0
 800b314:	4650      	mov	r0, sl
 800b316:	4659      	mov	r1, fp
 800b318:	f7f5 f986 	bl	8000628 <__aeabi_dmul>
 800b31c:	4b2d      	ldr	r3, [pc, #180]	; (800b3d4 <_dtoa_r+0x624>)
 800b31e:	4682      	mov	sl, r0
 800b320:	468b      	mov	fp, r1
 800b322:	4640      	mov	r0, r8
 800b324:	4649      	mov	r1, r9
 800b326:	2200      	movs	r2, #0
 800b328:	f7f5 f97e 	bl	8000628 <__aeabi_dmul>
 800b32c:	4680      	mov	r8, r0
 800b32e:	4689      	mov	r9, r1
 800b330:	e7c6      	b.n	800b2c0 <_dtoa_r+0x510>
 800b332:	4650      	mov	r0, sl
 800b334:	4659      	mov	r1, fp
 800b336:	f7f5 f977 	bl	8000628 <__aeabi_dmul>
 800b33a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b33c:	9d01      	ldr	r5, [sp, #4]
 800b33e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b340:	4682      	mov	sl, r0
 800b342:	468b      	mov	fp, r1
 800b344:	4649      	mov	r1, r9
 800b346:	4640      	mov	r0, r8
 800b348:	f7f5 fc1e 	bl	8000b88 <__aeabi_d2iz>
 800b34c:	4606      	mov	r6, r0
 800b34e:	f7f5 f901 	bl	8000554 <__aeabi_i2d>
 800b352:	3630      	adds	r6, #48	; 0x30
 800b354:	4602      	mov	r2, r0
 800b356:	460b      	mov	r3, r1
 800b358:	4640      	mov	r0, r8
 800b35a:	4649      	mov	r1, r9
 800b35c:	f7f4 ffac 	bl	80002b8 <__aeabi_dsub>
 800b360:	f805 6b01 	strb.w	r6, [r5], #1
 800b364:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b366:	429d      	cmp	r5, r3
 800b368:	4680      	mov	r8, r0
 800b36a:	4689      	mov	r9, r1
 800b36c:	f04f 0200 	mov.w	r2, #0
 800b370:	d124      	bne.n	800b3bc <_dtoa_r+0x60c>
 800b372:	4b1b      	ldr	r3, [pc, #108]	; (800b3e0 <_dtoa_r+0x630>)
 800b374:	4650      	mov	r0, sl
 800b376:	4659      	mov	r1, fp
 800b378:	f7f4 ffa0 	bl	80002bc <__adddf3>
 800b37c:	4602      	mov	r2, r0
 800b37e:	460b      	mov	r3, r1
 800b380:	4640      	mov	r0, r8
 800b382:	4649      	mov	r1, r9
 800b384:	f7f5 fbe0 	bl	8000b48 <__aeabi_dcmpgt>
 800b388:	2800      	cmp	r0, #0
 800b38a:	d173      	bne.n	800b474 <_dtoa_r+0x6c4>
 800b38c:	4652      	mov	r2, sl
 800b38e:	465b      	mov	r3, fp
 800b390:	4913      	ldr	r1, [pc, #76]	; (800b3e0 <_dtoa_r+0x630>)
 800b392:	2000      	movs	r0, #0
 800b394:	f7f4 ff90 	bl	80002b8 <__aeabi_dsub>
 800b398:	4602      	mov	r2, r0
 800b39a:	460b      	mov	r3, r1
 800b39c:	4640      	mov	r0, r8
 800b39e:	4649      	mov	r1, r9
 800b3a0:	f7f5 fbb4 	bl	8000b0c <__aeabi_dcmplt>
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	f43f af35 	beq.w	800b214 <_dtoa_r+0x464>
 800b3aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b3ac:	1e6b      	subs	r3, r5, #1
 800b3ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b3b4:	2b30      	cmp	r3, #48	; 0x30
 800b3b6:	d0f8      	beq.n	800b3aa <_dtoa_r+0x5fa>
 800b3b8:	9700      	str	r7, [sp, #0]
 800b3ba:	e049      	b.n	800b450 <_dtoa_r+0x6a0>
 800b3bc:	4b05      	ldr	r3, [pc, #20]	; (800b3d4 <_dtoa_r+0x624>)
 800b3be:	f7f5 f933 	bl	8000628 <__aeabi_dmul>
 800b3c2:	4680      	mov	r8, r0
 800b3c4:	4689      	mov	r9, r1
 800b3c6:	e7bd      	b.n	800b344 <_dtoa_r+0x594>
 800b3c8:	0800e168 	.word	0x0800e168
 800b3cc:	0800e140 	.word	0x0800e140
 800b3d0:	3ff00000 	.word	0x3ff00000
 800b3d4:	40240000 	.word	0x40240000
 800b3d8:	401c0000 	.word	0x401c0000
 800b3dc:	40140000 	.word	0x40140000
 800b3e0:	3fe00000 	.word	0x3fe00000
 800b3e4:	9d01      	ldr	r5, [sp, #4]
 800b3e6:	4656      	mov	r6, sl
 800b3e8:	465f      	mov	r7, fp
 800b3ea:	4642      	mov	r2, r8
 800b3ec:	464b      	mov	r3, r9
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	4639      	mov	r1, r7
 800b3f2:	f7f5 fa43 	bl	800087c <__aeabi_ddiv>
 800b3f6:	f7f5 fbc7 	bl	8000b88 <__aeabi_d2iz>
 800b3fa:	4682      	mov	sl, r0
 800b3fc:	f7f5 f8aa 	bl	8000554 <__aeabi_i2d>
 800b400:	4642      	mov	r2, r8
 800b402:	464b      	mov	r3, r9
 800b404:	f7f5 f910 	bl	8000628 <__aeabi_dmul>
 800b408:	4602      	mov	r2, r0
 800b40a:	460b      	mov	r3, r1
 800b40c:	4630      	mov	r0, r6
 800b40e:	4639      	mov	r1, r7
 800b410:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b414:	f7f4 ff50 	bl	80002b8 <__aeabi_dsub>
 800b418:	f805 6b01 	strb.w	r6, [r5], #1
 800b41c:	9e01      	ldr	r6, [sp, #4]
 800b41e:	9f03      	ldr	r7, [sp, #12]
 800b420:	1bae      	subs	r6, r5, r6
 800b422:	42b7      	cmp	r7, r6
 800b424:	4602      	mov	r2, r0
 800b426:	460b      	mov	r3, r1
 800b428:	d135      	bne.n	800b496 <_dtoa_r+0x6e6>
 800b42a:	f7f4 ff47 	bl	80002bc <__adddf3>
 800b42e:	4642      	mov	r2, r8
 800b430:	464b      	mov	r3, r9
 800b432:	4606      	mov	r6, r0
 800b434:	460f      	mov	r7, r1
 800b436:	f7f5 fb87 	bl	8000b48 <__aeabi_dcmpgt>
 800b43a:	b9d0      	cbnz	r0, 800b472 <_dtoa_r+0x6c2>
 800b43c:	4642      	mov	r2, r8
 800b43e:	464b      	mov	r3, r9
 800b440:	4630      	mov	r0, r6
 800b442:	4639      	mov	r1, r7
 800b444:	f7f5 fb58 	bl	8000af8 <__aeabi_dcmpeq>
 800b448:	b110      	cbz	r0, 800b450 <_dtoa_r+0x6a0>
 800b44a:	f01a 0f01 	tst.w	sl, #1
 800b44e:	d110      	bne.n	800b472 <_dtoa_r+0x6c2>
 800b450:	4620      	mov	r0, r4
 800b452:	ee18 1a10 	vmov	r1, s16
 800b456:	f000 ff5f 	bl	800c318 <_Bfree>
 800b45a:	2300      	movs	r3, #0
 800b45c:	9800      	ldr	r0, [sp, #0]
 800b45e:	702b      	strb	r3, [r5, #0]
 800b460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b462:	3001      	adds	r0, #1
 800b464:	6018      	str	r0, [r3, #0]
 800b466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b468:	2b00      	cmp	r3, #0
 800b46a:	f43f acf1 	beq.w	800ae50 <_dtoa_r+0xa0>
 800b46e:	601d      	str	r5, [r3, #0]
 800b470:	e4ee      	b.n	800ae50 <_dtoa_r+0xa0>
 800b472:	9f00      	ldr	r7, [sp, #0]
 800b474:	462b      	mov	r3, r5
 800b476:	461d      	mov	r5, r3
 800b478:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b47c:	2a39      	cmp	r2, #57	; 0x39
 800b47e:	d106      	bne.n	800b48e <_dtoa_r+0x6de>
 800b480:	9a01      	ldr	r2, [sp, #4]
 800b482:	429a      	cmp	r2, r3
 800b484:	d1f7      	bne.n	800b476 <_dtoa_r+0x6c6>
 800b486:	9901      	ldr	r1, [sp, #4]
 800b488:	2230      	movs	r2, #48	; 0x30
 800b48a:	3701      	adds	r7, #1
 800b48c:	700a      	strb	r2, [r1, #0]
 800b48e:	781a      	ldrb	r2, [r3, #0]
 800b490:	3201      	adds	r2, #1
 800b492:	701a      	strb	r2, [r3, #0]
 800b494:	e790      	b.n	800b3b8 <_dtoa_r+0x608>
 800b496:	4ba6      	ldr	r3, [pc, #664]	; (800b730 <_dtoa_r+0x980>)
 800b498:	2200      	movs	r2, #0
 800b49a:	f7f5 f8c5 	bl	8000628 <__aeabi_dmul>
 800b49e:	2200      	movs	r2, #0
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	4606      	mov	r6, r0
 800b4a4:	460f      	mov	r7, r1
 800b4a6:	f7f5 fb27 	bl	8000af8 <__aeabi_dcmpeq>
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	d09d      	beq.n	800b3ea <_dtoa_r+0x63a>
 800b4ae:	e7cf      	b.n	800b450 <_dtoa_r+0x6a0>
 800b4b0:	9a08      	ldr	r2, [sp, #32]
 800b4b2:	2a00      	cmp	r2, #0
 800b4b4:	f000 80d7 	beq.w	800b666 <_dtoa_r+0x8b6>
 800b4b8:	9a06      	ldr	r2, [sp, #24]
 800b4ba:	2a01      	cmp	r2, #1
 800b4bc:	f300 80ba 	bgt.w	800b634 <_dtoa_r+0x884>
 800b4c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4c2:	2a00      	cmp	r2, #0
 800b4c4:	f000 80b2 	beq.w	800b62c <_dtoa_r+0x87c>
 800b4c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b4cc:	9e07      	ldr	r6, [sp, #28]
 800b4ce:	9d04      	ldr	r5, [sp, #16]
 800b4d0:	9a04      	ldr	r2, [sp, #16]
 800b4d2:	441a      	add	r2, r3
 800b4d4:	9204      	str	r2, [sp, #16]
 800b4d6:	9a05      	ldr	r2, [sp, #20]
 800b4d8:	2101      	movs	r1, #1
 800b4da:	441a      	add	r2, r3
 800b4dc:	4620      	mov	r0, r4
 800b4de:	9205      	str	r2, [sp, #20]
 800b4e0:	f001 f81c 	bl	800c51c <__i2b>
 800b4e4:	4607      	mov	r7, r0
 800b4e6:	2d00      	cmp	r5, #0
 800b4e8:	dd0c      	ble.n	800b504 <_dtoa_r+0x754>
 800b4ea:	9b05      	ldr	r3, [sp, #20]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	dd09      	ble.n	800b504 <_dtoa_r+0x754>
 800b4f0:	42ab      	cmp	r3, r5
 800b4f2:	9a04      	ldr	r2, [sp, #16]
 800b4f4:	bfa8      	it	ge
 800b4f6:	462b      	movge	r3, r5
 800b4f8:	1ad2      	subs	r2, r2, r3
 800b4fa:	9204      	str	r2, [sp, #16]
 800b4fc:	9a05      	ldr	r2, [sp, #20]
 800b4fe:	1aed      	subs	r5, r5, r3
 800b500:	1ad3      	subs	r3, r2, r3
 800b502:	9305      	str	r3, [sp, #20]
 800b504:	9b07      	ldr	r3, [sp, #28]
 800b506:	b31b      	cbz	r3, 800b550 <_dtoa_r+0x7a0>
 800b508:	9b08      	ldr	r3, [sp, #32]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	f000 80af 	beq.w	800b66e <_dtoa_r+0x8be>
 800b510:	2e00      	cmp	r6, #0
 800b512:	dd13      	ble.n	800b53c <_dtoa_r+0x78c>
 800b514:	4639      	mov	r1, r7
 800b516:	4632      	mov	r2, r6
 800b518:	4620      	mov	r0, r4
 800b51a:	f001 f8bf 	bl	800c69c <__pow5mult>
 800b51e:	ee18 2a10 	vmov	r2, s16
 800b522:	4601      	mov	r1, r0
 800b524:	4607      	mov	r7, r0
 800b526:	4620      	mov	r0, r4
 800b528:	f001 f80e 	bl	800c548 <__multiply>
 800b52c:	ee18 1a10 	vmov	r1, s16
 800b530:	4680      	mov	r8, r0
 800b532:	4620      	mov	r0, r4
 800b534:	f000 fef0 	bl	800c318 <_Bfree>
 800b538:	ee08 8a10 	vmov	s16, r8
 800b53c:	9b07      	ldr	r3, [sp, #28]
 800b53e:	1b9a      	subs	r2, r3, r6
 800b540:	d006      	beq.n	800b550 <_dtoa_r+0x7a0>
 800b542:	ee18 1a10 	vmov	r1, s16
 800b546:	4620      	mov	r0, r4
 800b548:	f001 f8a8 	bl	800c69c <__pow5mult>
 800b54c:	ee08 0a10 	vmov	s16, r0
 800b550:	2101      	movs	r1, #1
 800b552:	4620      	mov	r0, r4
 800b554:	f000 ffe2 	bl	800c51c <__i2b>
 800b558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	4606      	mov	r6, r0
 800b55e:	f340 8088 	ble.w	800b672 <_dtoa_r+0x8c2>
 800b562:	461a      	mov	r2, r3
 800b564:	4601      	mov	r1, r0
 800b566:	4620      	mov	r0, r4
 800b568:	f001 f898 	bl	800c69c <__pow5mult>
 800b56c:	9b06      	ldr	r3, [sp, #24]
 800b56e:	2b01      	cmp	r3, #1
 800b570:	4606      	mov	r6, r0
 800b572:	f340 8081 	ble.w	800b678 <_dtoa_r+0x8c8>
 800b576:	f04f 0800 	mov.w	r8, #0
 800b57a:	6933      	ldr	r3, [r6, #16]
 800b57c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b580:	6918      	ldr	r0, [r3, #16]
 800b582:	f000 ff7b 	bl	800c47c <__hi0bits>
 800b586:	f1c0 0020 	rsb	r0, r0, #32
 800b58a:	9b05      	ldr	r3, [sp, #20]
 800b58c:	4418      	add	r0, r3
 800b58e:	f010 001f 	ands.w	r0, r0, #31
 800b592:	f000 8092 	beq.w	800b6ba <_dtoa_r+0x90a>
 800b596:	f1c0 0320 	rsb	r3, r0, #32
 800b59a:	2b04      	cmp	r3, #4
 800b59c:	f340 808a 	ble.w	800b6b4 <_dtoa_r+0x904>
 800b5a0:	f1c0 001c 	rsb	r0, r0, #28
 800b5a4:	9b04      	ldr	r3, [sp, #16]
 800b5a6:	4403      	add	r3, r0
 800b5a8:	9304      	str	r3, [sp, #16]
 800b5aa:	9b05      	ldr	r3, [sp, #20]
 800b5ac:	4403      	add	r3, r0
 800b5ae:	4405      	add	r5, r0
 800b5b0:	9305      	str	r3, [sp, #20]
 800b5b2:	9b04      	ldr	r3, [sp, #16]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	dd07      	ble.n	800b5c8 <_dtoa_r+0x818>
 800b5b8:	ee18 1a10 	vmov	r1, s16
 800b5bc:	461a      	mov	r2, r3
 800b5be:	4620      	mov	r0, r4
 800b5c0:	f001 f8c6 	bl	800c750 <__lshift>
 800b5c4:	ee08 0a10 	vmov	s16, r0
 800b5c8:	9b05      	ldr	r3, [sp, #20]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	dd05      	ble.n	800b5da <_dtoa_r+0x82a>
 800b5ce:	4631      	mov	r1, r6
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	f001 f8bc 	bl	800c750 <__lshift>
 800b5d8:	4606      	mov	r6, r0
 800b5da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d06e      	beq.n	800b6be <_dtoa_r+0x90e>
 800b5e0:	ee18 0a10 	vmov	r0, s16
 800b5e4:	4631      	mov	r1, r6
 800b5e6:	f001 f923 	bl	800c830 <__mcmp>
 800b5ea:	2800      	cmp	r0, #0
 800b5ec:	da67      	bge.n	800b6be <_dtoa_r+0x90e>
 800b5ee:	9b00      	ldr	r3, [sp, #0]
 800b5f0:	3b01      	subs	r3, #1
 800b5f2:	ee18 1a10 	vmov	r1, s16
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	220a      	movs	r2, #10
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	f000 fead 	bl	800c35c <__multadd>
 800b602:	9b08      	ldr	r3, [sp, #32]
 800b604:	ee08 0a10 	vmov	s16, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	f000 81b1 	beq.w	800b970 <_dtoa_r+0xbc0>
 800b60e:	2300      	movs	r3, #0
 800b610:	4639      	mov	r1, r7
 800b612:	220a      	movs	r2, #10
 800b614:	4620      	mov	r0, r4
 800b616:	f000 fea1 	bl	800c35c <__multadd>
 800b61a:	9b02      	ldr	r3, [sp, #8]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	4607      	mov	r7, r0
 800b620:	f300 808e 	bgt.w	800b740 <_dtoa_r+0x990>
 800b624:	9b06      	ldr	r3, [sp, #24]
 800b626:	2b02      	cmp	r3, #2
 800b628:	dc51      	bgt.n	800b6ce <_dtoa_r+0x91e>
 800b62a:	e089      	b.n	800b740 <_dtoa_r+0x990>
 800b62c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b62e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b632:	e74b      	b.n	800b4cc <_dtoa_r+0x71c>
 800b634:	9b03      	ldr	r3, [sp, #12]
 800b636:	1e5e      	subs	r6, r3, #1
 800b638:	9b07      	ldr	r3, [sp, #28]
 800b63a:	42b3      	cmp	r3, r6
 800b63c:	bfbf      	itttt	lt
 800b63e:	9b07      	ldrlt	r3, [sp, #28]
 800b640:	9607      	strlt	r6, [sp, #28]
 800b642:	1af2      	sublt	r2, r6, r3
 800b644:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b646:	bfb6      	itet	lt
 800b648:	189b      	addlt	r3, r3, r2
 800b64a:	1b9e      	subge	r6, r3, r6
 800b64c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b64e:	9b03      	ldr	r3, [sp, #12]
 800b650:	bfb8      	it	lt
 800b652:	2600      	movlt	r6, #0
 800b654:	2b00      	cmp	r3, #0
 800b656:	bfb7      	itett	lt
 800b658:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b65c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b660:	1a9d      	sublt	r5, r3, r2
 800b662:	2300      	movlt	r3, #0
 800b664:	e734      	b.n	800b4d0 <_dtoa_r+0x720>
 800b666:	9e07      	ldr	r6, [sp, #28]
 800b668:	9d04      	ldr	r5, [sp, #16]
 800b66a:	9f08      	ldr	r7, [sp, #32]
 800b66c:	e73b      	b.n	800b4e6 <_dtoa_r+0x736>
 800b66e:	9a07      	ldr	r2, [sp, #28]
 800b670:	e767      	b.n	800b542 <_dtoa_r+0x792>
 800b672:	9b06      	ldr	r3, [sp, #24]
 800b674:	2b01      	cmp	r3, #1
 800b676:	dc18      	bgt.n	800b6aa <_dtoa_r+0x8fa>
 800b678:	f1ba 0f00 	cmp.w	sl, #0
 800b67c:	d115      	bne.n	800b6aa <_dtoa_r+0x8fa>
 800b67e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b682:	b993      	cbnz	r3, 800b6aa <_dtoa_r+0x8fa>
 800b684:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b688:	0d1b      	lsrs	r3, r3, #20
 800b68a:	051b      	lsls	r3, r3, #20
 800b68c:	b183      	cbz	r3, 800b6b0 <_dtoa_r+0x900>
 800b68e:	9b04      	ldr	r3, [sp, #16]
 800b690:	3301      	adds	r3, #1
 800b692:	9304      	str	r3, [sp, #16]
 800b694:	9b05      	ldr	r3, [sp, #20]
 800b696:	3301      	adds	r3, #1
 800b698:	9305      	str	r3, [sp, #20]
 800b69a:	f04f 0801 	mov.w	r8, #1
 800b69e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	f47f af6a 	bne.w	800b57a <_dtoa_r+0x7ca>
 800b6a6:	2001      	movs	r0, #1
 800b6a8:	e76f      	b.n	800b58a <_dtoa_r+0x7da>
 800b6aa:	f04f 0800 	mov.w	r8, #0
 800b6ae:	e7f6      	b.n	800b69e <_dtoa_r+0x8ee>
 800b6b0:	4698      	mov	r8, r3
 800b6b2:	e7f4      	b.n	800b69e <_dtoa_r+0x8ee>
 800b6b4:	f43f af7d 	beq.w	800b5b2 <_dtoa_r+0x802>
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	301c      	adds	r0, #28
 800b6bc:	e772      	b.n	800b5a4 <_dtoa_r+0x7f4>
 800b6be:	9b03      	ldr	r3, [sp, #12]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	dc37      	bgt.n	800b734 <_dtoa_r+0x984>
 800b6c4:	9b06      	ldr	r3, [sp, #24]
 800b6c6:	2b02      	cmp	r3, #2
 800b6c8:	dd34      	ble.n	800b734 <_dtoa_r+0x984>
 800b6ca:	9b03      	ldr	r3, [sp, #12]
 800b6cc:	9302      	str	r3, [sp, #8]
 800b6ce:	9b02      	ldr	r3, [sp, #8]
 800b6d0:	b96b      	cbnz	r3, 800b6ee <_dtoa_r+0x93e>
 800b6d2:	4631      	mov	r1, r6
 800b6d4:	2205      	movs	r2, #5
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	f000 fe40 	bl	800c35c <__multadd>
 800b6dc:	4601      	mov	r1, r0
 800b6de:	4606      	mov	r6, r0
 800b6e0:	ee18 0a10 	vmov	r0, s16
 800b6e4:	f001 f8a4 	bl	800c830 <__mcmp>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	f73f adbb 	bgt.w	800b264 <_dtoa_r+0x4b4>
 800b6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6f0:	9d01      	ldr	r5, [sp, #4]
 800b6f2:	43db      	mvns	r3, r3
 800b6f4:	9300      	str	r3, [sp, #0]
 800b6f6:	f04f 0800 	mov.w	r8, #0
 800b6fa:	4631      	mov	r1, r6
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	f000 fe0b 	bl	800c318 <_Bfree>
 800b702:	2f00      	cmp	r7, #0
 800b704:	f43f aea4 	beq.w	800b450 <_dtoa_r+0x6a0>
 800b708:	f1b8 0f00 	cmp.w	r8, #0
 800b70c:	d005      	beq.n	800b71a <_dtoa_r+0x96a>
 800b70e:	45b8      	cmp	r8, r7
 800b710:	d003      	beq.n	800b71a <_dtoa_r+0x96a>
 800b712:	4641      	mov	r1, r8
 800b714:	4620      	mov	r0, r4
 800b716:	f000 fdff 	bl	800c318 <_Bfree>
 800b71a:	4639      	mov	r1, r7
 800b71c:	4620      	mov	r0, r4
 800b71e:	f000 fdfb 	bl	800c318 <_Bfree>
 800b722:	e695      	b.n	800b450 <_dtoa_r+0x6a0>
 800b724:	2600      	movs	r6, #0
 800b726:	4637      	mov	r7, r6
 800b728:	e7e1      	b.n	800b6ee <_dtoa_r+0x93e>
 800b72a:	9700      	str	r7, [sp, #0]
 800b72c:	4637      	mov	r7, r6
 800b72e:	e599      	b.n	800b264 <_dtoa_r+0x4b4>
 800b730:	40240000 	.word	0x40240000
 800b734:	9b08      	ldr	r3, [sp, #32]
 800b736:	2b00      	cmp	r3, #0
 800b738:	f000 80ca 	beq.w	800b8d0 <_dtoa_r+0xb20>
 800b73c:	9b03      	ldr	r3, [sp, #12]
 800b73e:	9302      	str	r3, [sp, #8]
 800b740:	2d00      	cmp	r5, #0
 800b742:	dd05      	ble.n	800b750 <_dtoa_r+0x9a0>
 800b744:	4639      	mov	r1, r7
 800b746:	462a      	mov	r2, r5
 800b748:	4620      	mov	r0, r4
 800b74a:	f001 f801 	bl	800c750 <__lshift>
 800b74e:	4607      	mov	r7, r0
 800b750:	f1b8 0f00 	cmp.w	r8, #0
 800b754:	d05b      	beq.n	800b80e <_dtoa_r+0xa5e>
 800b756:	6879      	ldr	r1, [r7, #4]
 800b758:	4620      	mov	r0, r4
 800b75a:	f000 fd9d 	bl	800c298 <_Balloc>
 800b75e:	4605      	mov	r5, r0
 800b760:	b928      	cbnz	r0, 800b76e <_dtoa_r+0x9be>
 800b762:	4b87      	ldr	r3, [pc, #540]	; (800b980 <_dtoa_r+0xbd0>)
 800b764:	4602      	mov	r2, r0
 800b766:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b76a:	f7ff bb3b 	b.w	800ade4 <_dtoa_r+0x34>
 800b76e:	693a      	ldr	r2, [r7, #16]
 800b770:	3202      	adds	r2, #2
 800b772:	0092      	lsls	r2, r2, #2
 800b774:	f107 010c 	add.w	r1, r7, #12
 800b778:	300c      	adds	r0, #12
 800b77a:	f7fd fd13 	bl	80091a4 <memcpy>
 800b77e:	2201      	movs	r2, #1
 800b780:	4629      	mov	r1, r5
 800b782:	4620      	mov	r0, r4
 800b784:	f000 ffe4 	bl	800c750 <__lshift>
 800b788:	9b01      	ldr	r3, [sp, #4]
 800b78a:	f103 0901 	add.w	r9, r3, #1
 800b78e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b792:	4413      	add	r3, r2
 800b794:	9305      	str	r3, [sp, #20]
 800b796:	f00a 0301 	and.w	r3, sl, #1
 800b79a:	46b8      	mov	r8, r7
 800b79c:	9304      	str	r3, [sp, #16]
 800b79e:	4607      	mov	r7, r0
 800b7a0:	4631      	mov	r1, r6
 800b7a2:	ee18 0a10 	vmov	r0, s16
 800b7a6:	f7ff fa77 	bl	800ac98 <quorem>
 800b7aa:	4641      	mov	r1, r8
 800b7ac:	9002      	str	r0, [sp, #8]
 800b7ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b7b2:	ee18 0a10 	vmov	r0, s16
 800b7b6:	f001 f83b 	bl	800c830 <__mcmp>
 800b7ba:	463a      	mov	r2, r7
 800b7bc:	9003      	str	r0, [sp, #12]
 800b7be:	4631      	mov	r1, r6
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	f001 f851 	bl	800c868 <__mdiff>
 800b7c6:	68c2      	ldr	r2, [r0, #12]
 800b7c8:	f109 3bff 	add.w	fp, r9, #4294967295
 800b7cc:	4605      	mov	r5, r0
 800b7ce:	bb02      	cbnz	r2, 800b812 <_dtoa_r+0xa62>
 800b7d0:	4601      	mov	r1, r0
 800b7d2:	ee18 0a10 	vmov	r0, s16
 800b7d6:	f001 f82b 	bl	800c830 <__mcmp>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	4629      	mov	r1, r5
 800b7de:	4620      	mov	r0, r4
 800b7e0:	9207      	str	r2, [sp, #28]
 800b7e2:	f000 fd99 	bl	800c318 <_Bfree>
 800b7e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b7ea:	ea43 0102 	orr.w	r1, r3, r2
 800b7ee:	9b04      	ldr	r3, [sp, #16]
 800b7f0:	430b      	orrs	r3, r1
 800b7f2:	464d      	mov	r5, r9
 800b7f4:	d10f      	bne.n	800b816 <_dtoa_r+0xa66>
 800b7f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b7fa:	d02a      	beq.n	800b852 <_dtoa_r+0xaa2>
 800b7fc:	9b03      	ldr	r3, [sp, #12]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	dd02      	ble.n	800b808 <_dtoa_r+0xa58>
 800b802:	9b02      	ldr	r3, [sp, #8]
 800b804:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b808:	f88b a000 	strb.w	sl, [fp]
 800b80c:	e775      	b.n	800b6fa <_dtoa_r+0x94a>
 800b80e:	4638      	mov	r0, r7
 800b810:	e7ba      	b.n	800b788 <_dtoa_r+0x9d8>
 800b812:	2201      	movs	r2, #1
 800b814:	e7e2      	b.n	800b7dc <_dtoa_r+0xa2c>
 800b816:	9b03      	ldr	r3, [sp, #12]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	db04      	blt.n	800b826 <_dtoa_r+0xa76>
 800b81c:	9906      	ldr	r1, [sp, #24]
 800b81e:	430b      	orrs	r3, r1
 800b820:	9904      	ldr	r1, [sp, #16]
 800b822:	430b      	orrs	r3, r1
 800b824:	d122      	bne.n	800b86c <_dtoa_r+0xabc>
 800b826:	2a00      	cmp	r2, #0
 800b828:	ddee      	ble.n	800b808 <_dtoa_r+0xa58>
 800b82a:	ee18 1a10 	vmov	r1, s16
 800b82e:	2201      	movs	r2, #1
 800b830:	4620      	mov	r0, r4
 800b832:	f000 ff8d 	bl	800c750 <__lshift>
 800b836:	4631      	mov	r1, r6
 800b838:	ee08 0a10 	vmov	s16, r0
 800b83c:	f000 fff8 	bl	800c830 <__mcmp>
 800b840:	2800      	cmp	r0, #0
 800b842:	dc03      	bgt.n	800b84c <_dtoa_r+0xa9c>
 800b844:	d1e0      	bne.n	800b808 <_dtoa_r+0xa58>
 800b846:	f01a 0f01 	tst.w	sl, #1
 800b84a:	d0dd      	beq.n	800b808 <_dtoa_r+0xa58>
 800b84c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b850:	d1d7      	bne.n	800b802 <_dtoa_r+0xa52>
 800b852:	2339      	movs	r3, #57	; 0x39
 800b854:	f88b 3000 	strb.w	r3, [fp]
 800b858:	462b      	mov	r3, r5
 800b85a:	461d      	mov	r5, r3
 800b85c:	3b01      	subs	r3, #1
 800b85e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b862:	2a39      	cmp	r2, #57	; 0x39
 800b864:	d071      	beq.n	800b94a <_dtoa_r+0xb9a>
 800b866:	3201      	adds	r2, #1
 800b868:	701a      	strb	r2, [r3, #0]
 800b86a:	e746      	b.n	800b6fa <_dtoa_r+0x94a>
 800b86c:	2a00      	cmp	r2, #0
 800b86e:	dd07      	ble.n	800b880 <_dtoa_r+0xad0>
 800b870:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b874:	d0ed      	beq.n	800b852 <_dtoa_r+0xaa2>
 800b876:	f10a 0301 	add.w	r3, sl, #1
 800b87a:	f88b 3000 	strb.w	r3, [fp]
 800b87e:	e73c      	b.n	800b6fa <_dtoa_r+0x94a>
 800b880:	9b05      	ldr	r3, [sp, #20]
 800b882:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b886:	4599      	cmp	r9, r3
 800b888:	d047      	beq.n	800b91a <_dtoa_r+0xb6a>
 800b88a:	ee18 1a10 	vmov	r1, s16
 800b88e:	2300      	movs	r3, #0
 800b890:	220a      	movs	r2, #10
 800b892:	4620      	mov	r0, r4
 800b894:	f000 fd62 	bl	800c35c <__multadd>
 800b898:	45b8      	cmp	r8, r7
 800b89a:	ee08 0a10 	vmov	s16, r0
 800b89e:	f04f 0300 	mov.w	r3, #0
 800b8a2:	f04f 020a 	mov.w	r2, #10
 800b8a6:	4641      	mov	r1, r8
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	d106      	bne.n	800b8ba <_dtoa_r+0xb0a>
 800b8ac:	f000 fd56 	bl	800c35c <__multadd>
 800b8b0:	4680      	mov	r8, r0
 800b8b2:	4607      	mov	r7, r0
 800b8b4:	f109 0901 	add.w	r9, r9, #1
 800b8b8:	e772      	b.n	800b7a0 <_dtoa_r+0x9f0>
 800b8ba:	f000 fd4f 	bl	800c35c <__multadd>
 800b8be:	4639      	mov	r1, r7
 800b8c0:	4680      	mov	r8, r0
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	220a      	movs	r2, #10
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f000 fd48 	bl	800c35c <__multadd>
 800b8cc:	4607      	mov	r7, r0
 800b8ce:	e7f1      	b.n	800b8b4 <_dtoa_r+0xb04>
 800b8d0:	9b03      	ldr	r3, [sp, #12]
 800b8d2:	9302      	str	r3, [sp, #8]
 800b8d4:	9d01      	ldr	r5, [sp, #4]
 800b8d6:	ee18 0a10 	vmov	r0, s16
 800b8da:	4631      	mov	r1, r6
 800b8dc:	f7ff f9dc 	bl	800ac98 <quorem>
 800b8e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b8e4:	9b01      	ldr	r3, [sp, #4]
 800b8e6:	f805 ab01 	strb.w	sl, [r5], #1
 800b8ea:	1aea      	subs	r2, r5, r3
 800b8ec:	9b02      	ldr	r3, [sp, #8]
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	dd09      	ble.n	800b906 <_dtoa_r+0xb56>
 800b8f2:	ee18 1a10 	vmov	r1, s16
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	220a      	movs	r2, #10
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f000 fd2e 	bl	800c35c <__multadd>
 800b900:	ee08 0a10 	vmov	s16, r0
 800b904:	e7e7      	b.n	800b8d6 <_dtoa_r+0xb26>
 800b906:	9b02      	ldr	r3, [sp, #8]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	bfc8      	it	gt
 800b90c:	461d      	movgt	r5, r3
 800b90e:	9b01      	ldr	r3, [sp, #4]
 800b910:	bfd8      	it	le
 800b912:	2501      	movle	r5, #1
 800b914:	441d      	add	r5, r3
 800b916:	f04f 0800 	mov.w	r8, #0
 800b91a:	ee18 1a10 	vmov	r1, s16
 800b91e:	2201      	movs	r2, #1
 800b920:	4620      	mov	r0, r4
 800b922:	f000 ff15 	bl	800c750 <__lshift>
 800b926:	4631      	mov	r1, r6
 800b928:	ee08 0a10 	vmov	s16, r0
 800b92c:	f000 ff80 	bl	800c830 <__mcmp>
 800b930:	2800      	cmp	r0, #0
 800b932:	dc91      	bgt.n	800b858 <_dtoa_r+0xaa8>
 800b934:	d102      	bne.n	800b93c <_dtoa_r+0xb8c>
 800b936:	f01a 0f01 	tst.w	sl, #1
 800b93a:	d18d      	bne.n	800b858 <_dtoa_r+0xaa8>
 800b93c:	462b      	mov	r3, r5
 800b93e:	461d      	mov	r5, r3
 800b940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b944:	2a30      	cmp	r2, #48	; 0x30
 800b946:	d0fa      	beq.n	800b93e <_dtoa_r+0xb8e>
 800b948:	e6d7      	b.n	800b6fa <_dtoa_r+0x94a>
 800b94a:	9a01      	ldr	r2, [sp, #4]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d184      	bne.n	800b85a <_dtoa_r+0xaaa>
 800b950:	9b00      	ldr	r3, [sp, #0]
 800b952:	3301      	adds	r3, #1
 800b954:	9300      	str	r3, [sp, #0]
 800b956:	2331      	movs	r3, #49	; 0x31
 800b958:	7013      	strb	r3, [r2, #0]
 800b95a:	e6ce      	b.n	800b6fa <_dtoa_r+0x94a>
 800b95c:	4b09      	ldr	r3, [pc, #36]	; (800b984 <_dtoa_r+0xbd4>)
 800b95e:	f7ff ba95 	b.w	800ae8c <_dtoa_r+0xdc>
 800b962:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b964:	2b00      	cmp	r3, #0
 800b966:	f47f aa6e 	bne.w	800ae46 <_dtoa_r+0x96>
 800b96a:	4b07      	ldr	r3, [pc, #28]	; (800b988 <_dtoa_r+0xbd8>)
 800b96c:	f7ff ba8e 	b.w	800ae8c <_dtoa_r+0xdc>
 800b970:	9b02      	ldr	r3, [sp, #8]
 800b972:	2b00      	cmp	r3, #0
 800b974:	dcae      	bgt.n	800b8d4 <_dtoa_r+0xb24>
 800b976:	9b06      	ldr	r3, [sp, #24]
 800b978:	2b02      	cmp	r3, #2
 800b97a:	f73f aea8 	bgt.w	800b6ce <_dtoa_r+0x91e>
 800b97e:	e7a9      	b.n	800b8d4 <_dtoa_r+0xb24>
 800b980:	0800dff0 	.word	0x0800dff0
 800b984:	0800ddf0 	.word	0x0800ddf0
 800b988:	0800df71 	.word	0x0800df71

0800b98c <std>:
 800b98c:	2300      	movs	r3, #0
 800b98e:	b510      	push	{r4, lr}
 800b990:	4604      	mov	r4, r0
 800b992:	e9c0 3300 	strd	r3, r3, [r0]
 800b996:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b99a:	6083      	str	r3, [r0, #8]
 800b99c:	8181      	strh	r1, [r0, #12]
 800b99e:	6643      	str	r3, [r0, #100]	; 0x64
 800b9a0:	81c2      	strh	r2, [r0, #14]
 800b9a2:	6183      	str	r3, [r0, #24]
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	2208      	movs	r2, #8
 800b9a8:	305c      	adds	r0, #92	; 0x5c
 800b9aa:	f7fd fc09 	bl	80091c0 <memset>
 800b9ae:	4b05      	ldr	r3, [pc, #20]	; (800b9c4 <std+0x38>)
 800b9b0:	6263      	str	r3, [r4, #36]	; 0x24
 800b9b2:	4b05      	ldr	r3, [pc, #20]	; (800b9c8 <std+0x3c>)
 800b9b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b9b6:	4b05      	ldr	r3, [pc, #20]	; (800b9cc <std+0x40>)
 800b9b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b9ba:	4b05      	ldr	r3, [pc, #20]	; (800b9d0 <std+0x44>)
 800b9bc:	6224      	str	r4, [r4, #32]
 800b9be:	6323      	str	r3, [r4, #48]	; 0x30
 800b9c0:	bd10      	pop	{r4, pc}
 800b9c2:	bf00      	nop
 800b9c4:	0800d3a9 	.word	0x0800d3a9
 800b9c8:	0800d3cb 	.word	0x0800d3cb
 800b9cc:	0800d403 	.word	0x0800d403
 800b9d0:	0800d427 	.word	0x0800d427

0800b9d4 <_cleanup_r>:
 800b9d4:	4901      	ldr	r1, [pc, #4]	; (800b9dc <_cleanup_r+0x8>)
 800b9d6:	f000 b8af 	b.w	800bb38 <_fwalk_reent>
 800b9da:	bf00      	nop
 800b9dc:	0800d781 	.word	0x0800d781

0800b9e0 <__sfmoreglue>:
 800b9e0:	b570      	push	{r4, r5, r6, lr}
 800b9e2:	2268      	movs	r2, #104	; 0x68
 800b9e4:	1e4d      	subs	r5, r1, #1
 800b9e6:	4355      	muls	r5, r2
 800b9e8:	460e      	mov	r6, r1
 800b9ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b9ee:	f001 f997 	bl	800cd20 <_malloc_r>
 800b9f2:	4604      	mov	r4, r0
 800b9f4:	b140      	cbz	r0, 800ba08 <__sfmoreglue+0x28>
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	e9c0 1600 	strd	r1, r6, [r0]
 800b9fc:	300c      	adds	r0, #12
 800b9fe:	60a0      	str	r0, [r4, #8]
 800ba00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ba04:	f7fd fbdc 	bl	80091c0 <memset>
 800ba08:	4620      	mov	r0, r4
 800ba0a:	bd70      	pop	{r4, r5, r6, pc}

0800ba0c <__sfp_lock_acquire>:
 800ba0c:	4801      	ldr	r0, [pc, #4]	; (800ba14 <__sfp_lock_acquire+0x8>)
 800ba0e:	f000 bc26 	b.w	800c25e <__retarget_lock_acquire_recursive>
 800ba12:	bf00      	nop
 800ba14:	20001b81 	.word	0x20001b81

0800ba18 <__sfp_lock_release>:
 800ba18:	4801      	ldr	r0, [pc, #4]	; (800ba20 <__sfp_lock_release+0x8>)
 800ba1a:	f000 bc21 	b.w	800c260 <__retarget_lock_release_recursive>
 800ba1e:	bf00      	nop
 800ba20:	20001b81 	.word	0x20001b81

0800ba24 <__sinit_lock_acquire>:
 800ba24:	4801      	ldr	r0, [pc, #4]	; (800ba2c <__sinit_lock_acquire+0x8>)
 800ba26:	f000 bc1a 	b.w	800c25e <__retarget_lock_acquire_recursive>
 800ba2a:	bf00      	nop
 800ba2c:	20001b82 	.word	0x20001b82

0800ba30 <__sinit_lock_release>:
 800ba30:	4801      	ldr	r0, [pc, #4]	; (800ba38 <__sinit_lock_release+0x8>)
 800ba32:	f000 bc15 	b.w	800c260 <__retarget_lock_release_recursive>
 800ba36:	bf00      	nop
 800ba38:	20001b82 	.word	0x20001b82

0800ba3c <__sinit>:
 800ba3c:	b510      	push	{r4, lr}
 800ba3e:	4604      	mov	r4, r0
 800ba40:	f7ff fff0 	bl	800ba24 <__sinit_lock_acquire>
 800ba44:	69a3      	ldr	r3, [r4, #24]
 800ba46:	b11b      	cbz	r3, 800ba50 <__sinit+0x14>
 800ba48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba4c:	f7ff bff0 	b.w	800ba30 <__sinit_lock_release>
 800ba50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ba54:	6523      	str	r3, [r4, #80]	; 0x50
 800ba56:	4b13      	ldr	r3, [pc, #76]	; (800baa4 <__sinit+0x68>)
 800ba58:	4a13      	ldr	r2, [pc, #76]	; (800baa8 <__sinit+0x6c>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ba5e:	42a3      	cmp	r3, r4
 800ba60:	bf04      	itt	eq
 800ba62:	2301      	moveq	r3, #1
 800ba64:	61a3      	streq	r3, [r4, #24]
 800ba66:	4620      	mov	r0, r4
 800ba68:	f000 f820 	bl	800baac <__sfp>
 800ba6c:	6060      	str	r0, [r4, #4]
 800ba6e:	4620      	mov	r0, r4
 800ba70:	f000 f81c 	bl	800baac <__sfp>
 800ba74:	60a0      	str	r0, [r4, #8]
 800ba76:	4620      	mov	r0, r4
 800ba78:	f000 f818 	bl	800baac <__sfp>
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	60e0      	str	r0, [r4, #12]
 800ba80:	2104      	movs	r1, #4
 800ba82:	6860      	ldr	r0, [r4, #4]
 800ba84:	f7ff ff82 	bl	800b98c <std>
 800ba88:	68a0      	ldr	r0, [r4, #8]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	2109      	movs	r1, #9
 800ba8e:	f7ff ff7d 	bl	800b98c <std>
 800ba92:	68e0      	ldr	r0, [r4, #12]
 800ba94:	2202      	movs	r2, #2
 800ba96:	2112      	movs	r1, #18
 800ba98:	f7ff ff78 	bl	800b98c <std>
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	61a3      	str	r3, [r4, #24]
 800baa0:	e7d2      	b.n	800ba48 <__sinit+0xc>
 800baa2:	bf00      	nop
 800baa4:	0800dddc 	.word	0x0800dddc
 800baa8:	0800b9d5 	.word	0x0800b9d5

0800baac <__sfp>:
 800baac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baae:	4607      	mov	r7, r0
 800bab0:	f7ff ffac 	bl	800ba0c <__sfp_lock_acquire>
 800bab4:	4b1e      	ldr	r3, [pc, #120]	; (800bb30 <__sfp+0x84>)
 800bab6:	681e      	ldr	r6, [r3, #0]
 800bab8:	69b3      	ldr	r3, [r6, #24]
 800baba:	b913      	cbnz	r3, 800bac2 <__sfp+0x16>
 800babc:	4630      	mov	r0, r6
 800babe:	f7ff ffbd 	bl	800ba3c <__sinit>
 800bac2:	3648      	adds	r6, #72	; 0x48
 800bac4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bac8:	3b01      	subs	r3, #1
 800baca:	d503      	bpl.n	800bad4 <__sfp+0x28>
 800bacc:	6833      	ldr	r3, [r6, #0]
 800bace:	b30b      	cbz	r3, 800bb14 <__sfp+0x68>
 800bad0:	6836      	ldr	r6, [r6, #0]
 800bad2:	e7f7      	b.n	800bac4 <__sfp+0x18>
 800bad4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bad8:	b9d5      	cbnz	r5, 800bb10 <__sfp+0x64>
 800bada:	4b16      	ldr	r3, [pc, #88]	; (800bb34 <__sfp+0x88>)
 800badc:	60e3      	str	r3, [r4, #12]
 800bade:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bae2:	6665      	str	r5, [r4, #100]	; 0x64
 800bae4:	f000 fbba 	bl	800c25c <__retarget_lock_init_recursive>
 800bae8:	f7ff ff96 	bl	800ba18 <__sfp_lock_release>
 800baec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800baf0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800baf4:	6025      	str	r5, [r4, #0]
 800baf6:	61a5      	str	r5, [r4, #24]
 800baf8:	2208      	movs	r2, #8
 800bafa:	4629      	mov	r1, r5
 800bafc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bb00:	f7fd fb5e 	bl	80091c0 <memset>
 800bb04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bb08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb10:	3468      	adds	r4, #104	; 0x68
 800bb12:	e7d9      	b.n	800bac8 <__sfp+0x1c>
 800bb14:	2104      	movs	r1, #4
 800bb16:	4638      	mov	r0, r7
 800bb18:	f7ff ff62 	bl	800b9e0 <__sfmoreglue>
 800bb1c:	4604      	mov	r4, r0
 800bb1e:	6030      	str	r0, [r6, #0]
 800bb20:	2800      	cmp	r0, #0
 800bb22:	d1d5      	bne.n	800bad0 <__sfp+0x24>
 800bb24:	f7ff ff78 	bl	800ba18 <__sfp_lock_release>
 800bb28:	230c      	movs	r3, #12
 800bb2a:	603b      	str	r3, [r7, #0]
 800bb2c:	e7ee      	b.n	800bb0c <__sfp+0x60>
 800bb2e:	bf00      	nop
 800bb30:	0800dddc 	.word	0x0800dddc
 800bb34:	ffff0001 	.word	0xffff0001

0800bb38 <_fwalk_reent>:
 800bb38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb3c:	4606      	mov	r6, r0
 800bb3e:	4688      	mov	r8, r1
 800bb40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bb44:	2700      	movs	r7, #0
 800bb46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb4a:	f1b9 0901 	subs.w	r9, r9, #1
 800bb4e:	d505      	bpl.n	800bb5c <_fwalk_reent+0x24>
 800bb50:	6824      	ldr	r4, [r4, #0]
 800bb52:	2c00      	cmp	r4, #0
 800bb54:	d1f7      	bne.n	800bb46 <_fwalk_reent+0xe>
 800bb56:	4638      	mov	r0, r7
 800bb58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb5c:	89ab      	ldrh	r3, [r5, #12]
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d907      	bls.n	800bb72 <_fwalk_reent+0x3a>
 800bb62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb66:	3301      	adds	r3, #1
 800bb68:	d003      	beq.n	800bb72 <_fwalk_reent+0x3a>
 800bb6a:	4629      	mov	r1, r5
 800bb6c:	4630      	mov	r0, r6
 800bb6e:	47c0      	blx	r8
 800bb70:	4307      	orrs	r7, r0
 800bb72:	3568      	adds	r5, #104	; 0x68
 800bb74:	e7e9      	b.n	800bb4a <_fwalk_reent+0x12>

0800bb76 <rshift>:
 800bb76:	6903      	ldr	r3, [r0, #16]
 800bb78:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bb7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb80:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bb84:	f100 0414 	add.w	r4, r0, #20
 800bb88:	dd45      	ble.n	800bc16 <rshift+0xa0>
 800bb8a:	f011 011f 	ands.w	r1, r1, #31
 800bb8e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bb92:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bb96:	d10c      	bne.n	800bbb2 <rshift+0x3c>
 800bb98:	f100 0710 	add.w	r7, r0, #16
 800bb9c:	4629      	mov	r1, r5
 800bb9e:	42b1      	cmp	r1, r6
 800bba0:	d334      	bcc.n	800bc0c <rshift+0x96>
 800bba2:	1a9b      	subs	r3, r3, r2
 800bba4:	009b      	lsls	r3, r3, #2
 800bba6:	1eea      	subs	r2, r5, #3
 800bba8:	4296      	cmp	r6, r2
 800bbaa:	bf38      	it	cc
 800bbac:	2300      	movcc	r3, #0
 800bbae:	4423      	add	r3, r4
 800bbb0:	e015      	b.n	800bbde <rshift+0x68>
 800bbb2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bbb6:	f1c1 0820 	rsb	r8, r1, #32
 800bbba:	40cf      	lsrs	r7, r1
 800bbbc:	f105 0e04 	add.w	lr, r5, #4
 800bbc0:	46a1      	mov	r9, r4
 800bbc2:	4576      	cmp	r6, lr
 800bbc4:	46f4      	mov	ip, lr
 800bbc6:	d815      	bhi.n	800bbf4 <rshift+0x7e>
 800bbc8:	1a9a      	subs	r2, r3, r2
 800bbca:	0092      	lsls	r2, r2, #2
 800bbcc:	3a04      	subs	r2, #4
 800bbce:	3501      	adds	r5, #1
 800bbd0:	42ae      	cmp	r6, r5
 800bbd2:	bf38      	it	cc
 800bbd4:	2200      	movcc	r2, #0
 800bbd6:	18a3      	adds	r3, r4, r2
 800bbd8:	50a7      	str	r7, [r4, r2]
 800bbda:	b107      	cbz	r7, 800bbde <rshift+0x68>
 800bbdc:	3304      	adds	r3, #4
 800bbde:	1b1a      	subs	r2, r3, r4
 800bbe0:	42a3      	cmp	r3, r4
 800bbe2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bbe6:	bf08      	it	eq
 800bbe8:	2300      	moveq	r3, #0
 800bbea:	6102      	str	r2, [r0, #16]
 800bbec:	bf08      	it	eq
 800bbee:	6143      	streq	r3, [r0, #20]
 800bbf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbf4:	f8dc c000 	ldr.w	ip, [ip]
 800bbf8:	fa0c fc08 	lsl.w	ip, ip, r8
 800bbfc:	ea4c 0707 	orr.w	r7, ip, r7
 800bc00:	f849 7b04 	str.w	r7, [r9], #4
 800bc04:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bc08:	40cf      	lsrs	r7, r1
 800bc0a:	e7da      	b.n	800bbc2 <rshift+0x4c>
 800bc0c:	f851 cb04 	ldr.w	ip, [r1], #4
 800bc10:	f847 cf04 	str.w	ip, [r7, #4]!
 800bc14:	e7c3      	b.n	800bb9e <rshift+0x28>
 800bc16:	4623      	mov	r3, r4
 800bc18:	e7e1      	b.n	800bbde <rshift+0x68>

0800bc1a <__hexdig_fun>:
 800bc1a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bc1e:	2b09      	cmp	r3, #9
 800bc20:	d802      	bhi.n	800bc28 <__hexdig_fun+0xe>
 800bc22:	3820      	subs	r0, #32
 800bc24:	b2c0      	uxtb	r0, r0
 800bc26:	4770      	bx	lr
 800bc28:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bc2c:	2b05      	cmp	r3, #5
 800bc2e:	d801      	bhi.n	800bc34 <__hexdig_fun+0x1a>
 800bc30:	3847      	subs	r0, #71	; 0x47
 800bc32:	e7f7      	b.n	800bc24 <__hexdig_fun+0xa>
 800bc34:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bc38:	2b05      	cmp	r3, #5
 800bc3a:	d801      	bhi.n	800bc40 <__hexdig_fun+0x26>
 800bc3c:	3827      	subs	r0, #39	; 0x27
 800bc3e:	e7f1      	b.n	800bc24 <__hexdig_fun+0xa>
 800bc40:	2000      	movs	r0, #0
 800bc42:	4770      	bx	lr

0800bc44 <__gethex>:
 800bc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc48:	ed2d 8b02 	vpush	{d8}
 800bc4c:	b089      	sub	sp, #36	; 0x24
 800bc4e:	ee08 0a10 	vmov	s16, r0
 800bc52:	9304      	str	r3, [sp, #16]
 800bc54:	4bb4      	ldr	r3, [pc, #720]	; (800bf28 <__gethex+0x2e4>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	9301      	str	r3, [sp, #4]
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	468b      	mov	fp, r1
 800bc5e:	4690      	mov	r8, r2
 800bc60:	f7f4 face 	bl	8000200 <strlen>
 800bc64:	9b01      	ldr	r3, [sp, #4]
 800bc66:	f8db 2000 	ldr.w	r2, [fp]
 800bc6a:	4403      	add	r3, r0
 800bc6c:	4682      	mov	sl, r0
 800bc6e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bc72:	9305      	str	r3, [sp, #20]
 800bc74:	1c93      	adds	r3, r2, #2
 800bc76:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bc7a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bc7e:	32fe      	adds	r2, #254	; 0xfe
 800bc80:	18d1      	adds	r1, r2, r3
 800bc82:	461f      	mov	r7, r3
 800bc84:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bc88:	9100      	str	r1, [sp, #0]
 800bc8a:	2830      	cmp	r0, #48	; 0x30
 800bc8c:	d0f8      	beq.n	800bc80 <__gethex+0x3c>
 800bc8e:	f7ff ffc4 	bl	800bc1a <__hexdig_fun>
 800bc92:	4604      	mov	r4, r0
 800bc94:	2800      	cmp	r0, #0
 800bc96:	d13a      	bne.n	800bd0e <__gethex+0xca>
 800bc98:	9901      	ldr	r1, [sp, #4]
 800bc9a:	4652      	mov	r2, sl
 800bc9c:	4638      	mov	r0, r7
 800bc9e:	f001 fbc6 	bl	800d42e <strncmp>
 800bca2:	4605      	mov	r5, r0
 800bca4:	2800      	cmp	r0, #0
 800bca6:	d168      	bne.n	800bd7a <__gethex+0x136>
 800bca8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bcac:	eb07 060a 	add.w	r6, r7, sl
 800bcb0:	f7ff ffb3 	bl	800bc1a <__hexdig_fun>
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	d062      	beq.n	800bd7e <__gethex+0x13a>
 800bcb8:	4633      	mov	r3, r6
 800bcba:	7818      	ldrb	r0, [r3, #0]
 800bcbc:	2830      	cmp	r0, #48	; 0x30
 800bcbe:	461f      	mov	r7, r3
 800bcc0:	f103 0301 	add.w	r3, r3, #1
 800bcc4:	d0f9      	beq.n	800bcba <__gethex+0x76>
 800bcc6:	f7ff ffa8 	bl	800bc1a <__hexdig_fun>
 800bcca:	2301      	movs	r3, #1
 800bccc:	fab0 f480 	clz	r4, r0
 800bcd0:	0964      	lsrs	r4, r4, #5
 800bcd2:	4635      	mov	r5, r6
 800bcd4:	9300      	str	r3, [sp, #0]
 800bcd6:	463a      	mov	r2, r7
 800bcd8:	4616      	mov	r6, r2
 800bcda:	3201      	adds	r2, #1
 800bcdc:	7830      	ldrb	r0, [r6, #0]
 800bcde:	f7ff ff9c 	bl	800bc1a <__hexdig_fun>
 800bce2:	2800      	cmp	r0, #0
 800bce4:	d1f8      	bne.n	800bcd8 <__gethex+0x94>
 800bce6:	9901      	ldr	r1, [sp, #4]
 800bce8:	4652      	mov	r2, sl
 800bcea:	4630      	mov	r0, r6
 800bcec:	f001 fb9f 	bl	800d42e <strncmp>
 800bcf0:	b980      	cbnz	r0, 800bd14 <__gethex+0xd0>
 800bcf2:	b94d      	cbnz	r5, 800bd08 <__gethex+0xc4>
 800bcf4:	eb06 050a 	add.w	r5, r6, sl
 800bcf8:	462a      	mov	r2, r5
 800bcfa:	4616      	mov	r6, r2
 800bcfc:	3201      	adds	r2, #1
 800bcfe:	7830      	ldrb	r0, [r6, #0]
 800bd00:	f7ff ff8b 	bl	800bc1a <__hexdig_fun>
 800bd04:	2800      	cmp	r0, #0
 800bd06:	d1f8      	bne.n	800bcfa <__gethex+0xb6>
 800bd08:	1bad      	subs	r5, r5, r6
 800bd0a:	00ad      	lsls	r5, r5, #2
 800bd0c:	e004      	b.n	800bd18 <__gethex+0xd4>
 800bd0e:	2400      	movs	r4, #0
 800bd10:	4625      	mov	r5, r4
 800bd12:	e7e0      	b.n	800bcd6 <__gethex+0x92>
 800bd14:	2d00      	cmp	r5, #0
 800bd16:	d1f7      	bne.n	800bd08 <__gethex+0xc4>
 800bd18:	7833      	ldrb	r3, [r6, #0]
 800bd1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bd1e:	2b50      	cmp	r3, #80	; 0x50
 800bd20:	d13b      	bne.n	800bd9a <__gethex+0x156>
 800bd22:	7873      	ldrb	r3, [r6, #1]
 800bd24:	2b2b      	cmp	r3, #43	; 0x2b
 800bd26:	d02c      	beq.n	800bd82 <__gethex+0x13e>
 800bd28:	2b2d      	cmp	r3, #45	; 0x2d
 800bd2a:	d02e      	beq.n	800bd8a <__gethex+0x146>
 800bd2c:	1c71      	adds	r1, r6, #1
 800bd2e:	f04f 0900 	mov.w	r9, #0
 800bd32:	7808      	ldrb	r0, [r1, #0]
 800bd34:	f7ff ff71 	bl	800bc1a <__hexdig_fun>
 800bd38:	1e43      	subs	r3, r0, #1
 800bd3a:	b2db      	uxtb	r3, r3
 800bd3c:	2b18      	cmp	r3, #24
 800bd3e:	d82c      	bhi.n	800bd9a <__gethex+0x156>
 800bd40:	f1a0 0210 	sub.w	r2, r0, #16
 800bd44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bd48:	f7ff ff67 	bl	800bc1a <__hexdig_fun>
 800bd4c:	1e43      	subs	r3, r0, #1
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	2b18      	cmp	r3, #24
 800bd52:	d91d      	bls.n	800bd90 <__gethex+0x14c>
 800bd54:	f1b9 0f00 	cmp.w	r9, #0
 800bd58:	d000      	beq.n	800bd5c <__gethex+0x118>
 800bd5a:	4252      	negs	r2, r2
 800bd5c:	4415      	add	r5, r2
 800bd5e:	f8cb 1000 	str.w	r1, [fp]
 800bd62:	b1e4      	cbz	r4, 800bd9e <__gethex+0x15a>
 800bd64:	9b00      	ldr	r3, [sp, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	bf14      	ite	ne
 800bd6a:	2700      	movne	r7, #0
 800bd6c:	2706      	moveq	r7, #6
 800bd6e:	4638      	mov	r0, r7
 800bd70:	b009      	add	sp, #36	; 0x24
 800bd72:	ecbd 8b02 	vpop	{d8}
 800bd76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd7a:	463e      	mov	r6, r7
 800bd7c:	4625      	mov	r5, r4
 800bd7e:	2401      	movs	r4, #1
 800bd80:	e7ca      	b.n	800bd18 <__gethex+0xd4>
 800bd82:	f04f 0900 	mov.w	r9, #0
 800bd86:	1cb1      	adds	r1, r6, #2
 800bd88:	e7d3      	b.n	800bd32 <__gethex+0xee>
 800bd8a:	f04f 0901 	mov.w	r9, #1
 800bd8e:	e7fa      	b.n	800bd86 <__gethex+0x142>
 800bd90:	230a      	movs	r3, #10
 800bd92:	fb03 0202 	mla	r2, r3, r2, r0
 800bd96:	3a10      	subs	r2, #16
 800bd98:	e7d4      	b.n	800bd44 <__gethex+0x100>
 800bd9a:	4631      	mov	r1, r6
 800bd9c:	e7df      	b.n	800bd5e <__gethex+0x11a>
 800bd9e:	1bf3      	subs	r3, r6, r7
 800bda0:	3b01      	subs	r3, #1
 800bda2:	4621      	mov	r1, r4
 800bda4:	2b07      	cmp	r3, #7
 800bda6:	dc0b      	bgt.n	800bdc0 <__gethex+0x17c>
 800bda8:	ee18 0a10 	vmov	r0, s16
 800bdac:	f000 fa74 	bl	800c298 <_Balloc>
 800bdb0:	4604      	mov	r4, r0
 800bdb2:	b940      	cbnz	r0, 800bdc6 <__gethex+0x182>
 800bdb4:	4b5d      	ldr	r3, [pc, #372]	; (800bf2c <__gethex+0x2e8>)
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	21de      	movs	r1, #222	; 0xde
 800bdba:	485d      	ldr	r0, [pc, #372]	; (800bf30 <__gethex+0x2ec>)
 800bdbc:	f001 fc2c 	bl	800d618 <__assert_func>
 800bdc0:	3101      	adds	r1, #1
 800bdc2:	105b      	asrs	r3, r3, #1
 800bdc4:	e7ee      	b.n	800bda4 <__gethex+0x160>
 800bdc6:	f100 0914 	add.w	r9, r0, #20
 800bdca:	f04f 0b00 	mov.w	fp, #0
 800bdce:	f1ca 0301 	rsb	r3, sl, #1
 800bdd2:	f8cd 9008 	str.w	r9, [sp, #8]
 800bdd6:	f8cd b000 	str.w	fp, [sp]
 800bdda:	9306      	str	r3, [sp, #24]
 800bddc:	42b7      	cmp	r7, r6
 800bdde:	d340      	bcc.n	800be62 <__gethex+0x21e>
 800bde0:	9802      	ldr	r0, [sp, #8]
 800bde2:	9b00      	ldr	r3, [sp, #0]
 800bde4:	f840 3b04 	str.w	r3, [r0], #4
 800bde8:	eba0 0009 	sub.w	r0, r0, r9
 800bdec:	1080      	asrs	r0, r0, #2
 800bdee:	0146      	lsls	r6, r0, #5
 800bdf0:	6120      	str	r0, [r4, #16]
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f000 fb42 	bl	800c47c <__hi0bits>
 800bdf8:	1a30      	subs	r0, r6, r0
 800bdfa:	f8d8 6000 	ldr.w	r6, [r8]
 800bdfe:	42b0      	cmp	r0, r6
 800be00:	dd63      	ble.n	800beca <__gethex+0x286>
 800be02:	1b87      	subs	r7, r0, r6
 800be04:	4639      	mov	r1, r7
 800be06:	4620      	mov	r0, r4
 800be08:	f000 fee6 	bl	800cbd8 <__any_on>
 800be0c:	4682      	mov	sl, r0
 800be0e:	b1a8      	cbz	r0, 800be3c <__gethex+0x1f8>
 800be10:	1e7b      	subs	r3, r7, #1
 800be12:	1159      	asrs	r1, r3, #5
 800be14:	f003 021f 	and.w	r2, r3, #31
 800be18:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800be1c:	f04f 0a01 	mov.w	sl, #1
 800be20:	fa0a f202 	lsl.w	r2, sl, r2
 800be24:	420a      	tst	r2, r1
 800be26:	d009      	beq.n	800be3c <__gethex+0x1f8>
 800be28:	4553      	cmp	r3, sl
 800be2a:	dd05      	ble.n	800be38 <__gethex+0x1f4>
 800be2c:	1eb9      	subs	r1, r7, #2
 800be2e:	4620      	mov	r0, r4
 800be30:	f000 fed2 	bl	800cbd8 <__any_on>
 800be34:	2800      	cmp	r0, #0
 800be36:	d145      	bne.n	800bec4 <__gethex+0x280>
 800be38:	f04f 0a02 	mov.w	sl, #2
 800be3c:	4639      	mov	r1, r7
 800be3e:	4620      	mov	r0, r4
 800be40:	f7ff fe99 	bl	800bb76 <rshift>
 800be44:	443d      	add	r5, r7
 800be46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be4a:	42ab      	cmp	r3, r5
 800be4c:	da4c      	bge.n	800bee8 <__gethex+0x2a4>
 800be4e:	ee18 0a10 	vmov	r0, s16
 800be52:	4621      	mov	r1, r4
 800be54:	f000 fa60 	bl	800c318 <_Bfree>
 800be58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800be5a:	2300      	movs	r3, #0
 800be5c:	6013      	str	r3, [r2, #0]
 800be5e:	27a3      	movs	r7, #163	; 0xa3
 800be60:	e785      	b.n	800bd6e <__gethex+0x12a>
 800be62:	1e73      	subs	r3, r6, #1
 800be64:	9a05      	ldr	r2, [sp, #20]
 800be66:	9303      	str	r3, [sp, #12]
 800be68:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d019      	beq.n	800bea4 <__gethex+0x260>
 800be70:	f1bb 0f20 	cmp.w	fp, #32
 800be74:	d107      	bne.n	800be86 <__gethex+0x242>
 800be76:	9b02      	ldr	r3, [sp, #8]
 800be78:	9a00      	ldr	r2, [sp, #0]
 800be7a:	f843 2b04 	str.w	r2, [r3], #4
 800be7e:	9302      	str	r3, [sp, #8]
 800be80:	2300      	movs	r3, #0
 800be82:	9300      	str	r3, [sp, #0]
 800be84:	469b      	mov	fp, r3
 800be86:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800be8a:	f7ff fec6 	bl	800bc1a <__hexdig_fun>
 800be8e:	9b00      	ldr	r3, [sp, #0]
 800be90:	f000 000f 	and.w	r0, r0, #15
 800be94:	fa00 f00b 	lsl.w	r0, r0, fp
 800be98:	4303      	orrs	r3, r0
 800be9a:	9300      	str	r3, [sp, #0]
 800be9c:	f10b 0b04 	add.w	fp, fp, #4
 800bea0:	9b03      	ldr	r3, [sp, #12]
 800bea2:	e00d      	b.n	800bec0 <__gethex+0x27c>
 800bea4:	9b03      	ldr	r3, [sp, #12]
 800bea6:	9a06      	ldr	r2, [sp, #24]
 800bea8:	4413      	add	r3, r2
 800beaa:	42bb      	cmp	r3, r7
 800beac:	d3e0      	bcc.n	800be70 <__gethex+0x22c>
 800beae:	4618      	mov	r0, r3
 800beb0:	9901      	ldr	r1, [sp, #4]
 800beb2:	9307      	str	r3, [sp, #28]
 800beb4:	4652      	mov	r2, sl
 800beb6:	f001 faba 	bl	800d42e <strncmp>
 800beba:	9b07      	ldr	r3, [sp, #28]
 800bebc:	2800      	cmp	r0, #0
 800bebe:	d1d7      	bne.n	800be70 <__gethex+0x22c>
 800bec0:	461e      	mov	r6, r3
 800bec2:	e78b      	b.n	800bddc <__gethex+0x198>
 800bec4:	f04f 0a03 	mov.w	sl, #3
 800bec8:	e7b8      	b.n	800be3c <__gethex+0x1f8>
 800beca:	da0a      	bge.n	800bee2 <__gethex+0x29e>
 800becc:	1a37      	subs	r7, r6, r0
 800bece:	4621      	mov	r1, r4
 800bed0:	ee18 0a10 	vmov	r0, s16
 800bed4:	463a      	mov	r2, r7
 800bed6:	f000 fc3b 	bl	800c750 <__lshift>
 800beda:	1bed      	subs	r5, r5, r7
 800bedc:	4604      	mov	r4, r0
 800bede:	f100 0914 	add.w	r9, r0, #20
 800bee2:	f04f 0a00 	mov.w	sl, #0
 800bee6:	e7ae      	b.n	800be46 <__gethex+0x202>
 800bee8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800beec:	42a8      	cmp	r0, r5
 800beee:	dd72      	ble.n	800bfd6 <__gethex+0x392>
 800bef0:	1b45      	subs	r5, r0, r5
 800bef2:	42ae      	cmp	r6, r5
 800bef4:	dc36      	bgt.n	800bf64 <__gethex+0x320>
 800bef6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800befa:	2b02      	cmp	r3, #2
 800befc:	d02a      	beq.n	800bf54 <__gethex+0x310>
 800befe:	2b03      	cmp	r3, #3
 800bf00:	d02c      	beq.n	800bf5c <__gethex+0x318>
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d11c      	bne.n	800bf40 <__gethex+0x2fc>
 800bf06:	42ae      	cmp	r6, r5
 800bf08:	d11a      	bne.n	800bf40 <__gethex+0x2fc>
 800bf0a:	2e01      	cmp	r6, #1
 800bf0c:	d112      	bne.n	800bf34 <__gethex+0x2f0>
 800bf0e:	9a04      	ldr	r2, [sp, #16]
 800bf10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bf14:	6013      	str	r3, [r2, #0]
 800bf16:	2301      	movs	r3, #1
 800bf18:	6123      	str	r3, [r4, #16]
 800bf1a:	f8c9 3000 	str.w	r3, [r9]
 800bf1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bf20:	2762      	movs	r7, #98	; 0x62
 800bf22:	601c      	str	r4, [r3, #0]
 800bf24:	e723      	b.n	800bd6e <__gethex+0x12a>
 800bf26:	bf00      	nop
 800bf28:	0800e0cc 	.word	0x0800e0cc
 800bf2c:	0800dff0 	.word	0x0800dff0
 800bf30:	0800e064 	.word	0x0800e064
 800bf34:	1e71      	subs	r1, r6, #1
 800bf36:	4620      	mov	r0, r4
 800bf38:	f000 fe4e 	bl	800cbd8 <__any_on>
 800bf3c:	2800      	cmp	r0, #0
 800bf3e:	d1e6      	bne.n	800bf0e <__gethex+0x2ca>
 800bf40:	ee18 0a10 	vmov	r0, s16
 800bf44:	4621      	mov	r1, r4
 800bf46:	f000 f9e7 	bl	800c318 <_Bfree>
 800bf4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	6013      	str	r3, [r2, #0]
 800bf50:	2750      	movs	r7, #80	; 0x50
 800bf52:	e70c      	b.n	800bd6e <__gethex+0x12a>
 800bf54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d1f2      	bne.n	800bf40 <__gethex+0x2fc>
 800bf5a:	e7d8      	b.n	800bf0e <__gethex+0x2ca>
 800bf5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d1d5      	bne.n	800bf0e <__gethex+0x2ca>
 800bf62:	e7ed      	b.n	800bf40 <__gethex+0x2fc>
 800bf64:	1e6f      	subs	r7, r5, #1
 800bf66:	f1ba 0f00 	cmp.w	sl, #0
 800bf6a:	d131      	bne.n	800bfd0 <__gethex+0x38c>
 800bf6c:	b127      	cbz	r7, 800bf78 <__gethex+0x334>
 800bf6e:	4639      	mov	r1, r7
 800bf70:	4620      	mov	r0, r4
 800bf72:	f000 fe31 	bl	800cbd8 <__any_on>
 800bf76:	4682      	mov	sl, r0
 800bf78:	117b      	asrs	r3, r7, #5
 800bf7a:	2101      	movs	r1, #1
 800bf7c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bf80:	f007 071f 	and.w	r7, r7, #31
 800bf84:	fa01 f707 	lsl.w	r7, r1, r7
 800bf88:	421f      	tst	r7, r3
 800bf8a:	4629      	mov	r1, r5
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	bf18      	it	ne
 800bf90:	f04a 0a02 	orrne.w	sl, sl, #2
 800bf94:	1b76      	subs	r6, r6, r5
 800bf96:	f7ff fdee 	bl	800bb76 <rshift>
 800bf9a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bf9e:	2702      	movs	r7, #2
 800bfa0:	f1ba 0f00 	cmp.w	sl, #0
 800bfa4:	d048      	beq.n	800c038 <__gethex+0x3f4>
 800bfa6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bfaa:	2b02      	cmp	r3, #2
 800bfac:	d015      	beq.n	800bfda <__gethex+0x396>
 800bfae:	2b03      	cmp	r3, #3
 800bfb0:	d017      	beq.n	800bfe2 <__gethex+0x39e>
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d109      	bne.n	800bfca <__gethex+0x386>
 800bfb6:	f01a 0f02 	tst.w	sl, #2
 800bfba:	d006      	beq.n	800bfca <__gethex+0x386>
 800bfbc:	f8d9 0000 	ldr.w	r0, [r9]
 800bfc0:	ea4a 0a00 	orr.w	sl, sl, r0
 800bfc4:	f01a 0f01 	tst.w	sl, #1
 800bfc8:	d10e      	bne.n	800bfe8 <__gethex+0x3a4>
 800bfca:	f047 0710 	orr.w	r7, r7, #16
 800bfce:	e033      	b.n	800c038 <__gethex+0x3f4>
 800bfd0:	f04f 0a01 	mov.w	sl, #1
 800bfd4:	e7d0      	b.n	800bf78 <__gethex+0x334>
 800bfd6:	2701      	movs	r7, #1
 800bfd8:	e7e2      	b.n	800bfa0 <__gethex+0x35c>
 800bfda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bfdc:	f1c3 0301 	rsb	r3, r3, #1
 800bfe0:	9315      	str	r3, [sp, #84]	; 0x54
 800bfe2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d0f0      	beq.n	800bfca <__gethex+0x386>
 800bfe8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bfec:	f104 0314 	add.w	r3, r4, #20
 800bff0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bff4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bff8:	f04f 0c00 	mov.w	ip, #0
 800bffc:	4618      	mov	r0, r3
 800bffe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c002:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c006:	d01c      	beq.n	800c042 <__gethex+0x3fe>
 800c008:	3201      	adds	r2, #1
 800c00a:	6002      	str	r2, [r0, #0]
 800c00c:	2f02      	cmp	r7, #2
 800c00e:	f104 0314 	add.w	r3, r4, #20
 800c012:	d13f      	bne.n	800c094 <__gethex+0x450>
 800c014:	f8d8 2000 	ldr.w	r2, [r8]
 800c018:	3a01      	subs	r2, #1
 800c01a:	42b2      	cmp	r2, r6
 800c01c:	d10a      	bne.n	800c034 <__gethex+0x3f0>
 800c01e:	1171      	asrs	r1, r6, #5
 800c020:	2201      	movs	r2, #1
 800c022:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c026:	f006 061f 	and.w	r6, r6, #31
 800c02a:	fa02 f606 	lsl.w	r6, r2, r6
 800c02e:	421e      	tst	r6, r3
 800c030:	bf18      	it	ne
 800c032:	4617      	movne	r7, r2
 800c034:	f047 0720 	orr.w	r7, r7, #32
 800c038:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c03a:	601c      	str	r4, [r3, #0]
 800c03c:	9b04      	ldr	r3, [sp, #16]
 800c03e:	601d      	str	r5, [r3, #0]
 800c040:	e695      	b.n	800bd6e <__gethex+0x12a>
 800c042:	4299      	cmp	r1, r3
 800c044:	f843 cc04 	str.w	ip, [r3, #-4]
 800c048:	d8d8      	bhi.n	800bffc <__gethex+0x3b8>
 800c04a:	68a3      	ldr	r3, [r4, #8]
 800c04c:	459b      	cmp	fp, r3
 800c04e:	db19      	blt.n	800c084 <__gethex+0x440>
 800c050:	6861      	ldr	r1, [r4, #4]
 800c052:	ee18 0a10 	vmov	r0, s16
 800c056:	3101      	adds	r1, #1
 800c058:	f000 f91e 	bl	800c298 <_Balloc>
 800c05c:	4681      	mov	r9, r0
 800c05e:	b918      	cbnz	r0, 800c068 <__gethex+0x424>
 800c060:	4b1a      	ldr	r3, [pc, #104]	; (800c0cc <__gethex+0x488>)
 800c062:	4602      	mov	r2, r0
 800c064:	2184      	movs	r1, #132	; 0x84
 800c066:	e6a8      	b.n	800bdba <__gethex+0x176>
 800c068:	6922      	ldr	r2, [r4, #16]
 800c06a:	3202      	adds	r2, #2
 800c06c:	f104 010c 	add.w	r1, r4, #12
 800c070:	0092      	lsls	r2, r2, #2
 800c072:	300c      	adds	r0, #12
 800c074:	f7fd f896 	bl	80091a4 <memcpy>
 800c078:	4621      	mov	r1, r4
 800c07a:	ee18 0a10 	vmov	r0, s16
 800c07e:	f000 f94b 	bl	800c318 <_Bfree>
 800c082:	464c      	mov	r4, r9
 800c084:	6923      	ldr	r3, [r4, #16]
 800c086:	1c5a      	adds	r2, r3, #1
 800c088:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c08c:	6122      	str	r2, [r4, #16]
 800c08e:	2201      	movs	r2, #1
 800c090:	615a      	str	r2, [r3, #20]
 800c092:	e7bb      	b.n	800c00c <__gethex+0x3c8>
 800c094:	6922      	ldr	r2, [r4, #16]
 800c096:	455a      	cmp	r2, fp
 800c098:	dd0b      	ble.n	800c0b2 <__gethex+0x46e>
 800c09a:	2101      	movs	r1, #1
 800c09c:	4620      	mov	r0, r4
 800c09e:	f7ff fd6a 	bl	800bb76 <rshift>
 800c0a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c0a6:	3501      	adds	r5, #1
 800c0a8:	42ab      	cmp	r3, r5
 800c0aa:	f6ff aed0 	blt.w	800be4e <__gethex+0x20a>
 800c0ae:	2701      	movs	r7, #1
 800c0b0:	e7c0      	b.n	800c034 <__gethex+0x3f0>
 800c0b2:	f016 061f 	ands.w	r6, r6, #31
 800c0b6:	d0fa      	beq.n	800c0ae <__gethex+0x46a>
 800c0b8:	4453      	add	r3, sl
 800c0ba:	f1c6 0620 	rsb	r6, r6, #32
 800c0be:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c0c2:	f000 f9db 	bl	800c47c <__hi0bits>
 800c0c6:	42b0      	cmp	r0, r6
 800c0c8:	dbe7      	blt.n	800c09a <__gethex+0x456>
 800c0ca:	e7f0      	b.n	800c0ae <__gethex+0x46a>
 800c0cc:	0800dff0 	.word	0x0800dff0

0800c0d0 <L_shift>:
 800c0d0:	f1c2 0208 	rsb	r2, r2, #8
 800c0d4:	0092      	lsls	r2, r2, #2
 800c0d6:	b570      	push	{r4, r5, r6, lr}
 800c0d8:	f1c2 0620 	rsb	r6, r2, #32
 800c0dc:	6843      	ldr	r3, [r0, #4]
 800c0de:	6804      	ldr	r4, [r0, #0]
 800c0e0:	fa03 f506 	lsl.w	r5, r3, r6
 800c0e4:	432c      	orrs	r4, r5
 800c0e6:	40d3      	lsrs	r3, r2
 800c0e8:	6004      	str	r4, [r0, #0]
 800c0ea:	f840 3f04 	str.w	r3, [r0, #4]!
 800c0ee:	4288      	cmp	r0, r1
 800c0f0:	d3f4      	bcc.n	800c0dc <L_shift+0xc>
 800c0f2:	bd70      	pop	{r4, r5, r6, pc}

0800c0f4 <__match>:
 800c0f4:	b530      	push	{r4, r5, lr}
 800c0f6:	6803      	ldr	r3, [r0, #0]
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0fe:	b914      	cbnz	r4, 800c106 <__match+0x12>
 800c100:	6003      	str	r3, [r0, #0]
 800c102:	2001      	movs	r0, #1
 800c104:	bd30      	pop	{r4, r5, pc}
 800c106:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c10a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c10e:	2d19      	cmp	r5, #25
 800c110:	bf98      	it	ls
 800c112:	3220      	addls	r2, #32
 800c114:	42a2      	cmp	r2, r4
 800c116:	d0f0      	beq.n	800c0fa <__match+0x6>
 800c118:	2000      	movs	r0, #0
 800c11a:	e7f3      	b.n	800c104 <__match+0x10>

0800c11c <__hexnan>:
 800c11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c120:	680b      	ldr	r3, [r1, #0]
 800c122:	115e      	asrs	r6, r3, #5
 800c124:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c128:	f013 031f 	ands.w	r3, r3, #31
 800c12c:	b087      	sub	sp, #28
 800c12e:	bf18      	it	ne
 800c130:	3604      	addne	r6, #4
 800c132:	2500      	movs	r5, #0
 800c134:	1f37      	subs	r7, r6, #4
 800c136:	4690      	mov	r8, r2
 800c138:	6802      	ldr	r2, [r0, #0]
 800c13a:	9301      	str	r3, [sp, #4]
 800c13c:	4682      	mov	sl, r0
 800c13e:	f846 5c04 	str.w	r5, [r6, #-4]
 800c142:	46b9      	mov	r9, r7
 800c144:	463c      	mov	r4, r7
 800c146:	9502      	str	r5, [sp, #8]
 800c148:	46ab      	mov	fp, r5
 800c14a:	7851      	ldrb	r1, [r2, #1]
 800c14c:	1c53      	adds	r3, r2, #1
 800c14e:	9303      	str	r3, [sp, #12]
 800c150:	b341      	cbz	r1, 800c1a4 <__hexnan+0x88>
 800c152:	4608      	mov	r0, r1
 800c154:	9205      	str	r2, [sp, #20]
 800c156:	9104      	str	r1, [sp, #16]
 800c158:	f7ff fd5f 	bl	800bc1a <__hexdig_fun>
 800c15c:	2800      	cmp	r0, #0
 800c15e:	d14f      	bne.n	800c200 <__hexnan+0xe4>
 800c160:	9904      	ldr	r1, [sp, #16]
 800c162:	9a05      	ldr	r2, [sp, #20]
 800c164:	2920      	cmp	r1, #32
 800c166:	d818      	bhi.n	800c19a <__hexnan+0x7e>
 800c168:	9b02      	ldr	r3, [sp, #8]
 800c16a:	459b      	cmp	fp, r3
 800c16c:	dd13      	ble.n	800c196 <__hexnan+0x7a>
 800c16e:	454c      	cmp	r4, r9
 800c170:	d206      	bcs.n	800c180 <__hexnan+0x64>
 800c172:	2d07      	cmp	r5, #7
 800c174:	dc04      	bgt.n	800c180 <__hexnan+0x64>
 800c176:	462a      	mov	r2, r5
 800c178:	4649      	mov	r1, r9
 800c17a:	4620      	mov	r0, r4
 800c17c:	f7ff ffa8 	bl	800c0d0 <L_shift>
 800c180:	4544      	cmp	r4, r8
 800c182:	d950      	bls.n	800c226 <__hexnan+0x10a>
 800c184:	2300      	movs	r3, #0
 800c186:	f1a4 0904 	sub.w	r9, r4, #4
 800c18a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c18e:	f8cd b008 	str.w	fp, [sp, #8]
 800c192:	464c      	mov	r4, r9
 800c194:	461d      	mov	r5, r3
 800c196:	9a03      	ldr	r2, [sp, #12]
 800c198:	e7d7      	b.n	800c14a <__hexnan+0x2e>
 800c19a:	2929      	cmp	r1, #41	; 0x29
 800c19c:	d156      	bne.n	800c24c <__hexnan+0x130>
 800c19e:	3202      	adds	r2, #2
 800c1a0:	f8ca 2000 	str.w	r2, [sl]
 800c1a4:	f1bb 0f00 	cmp.w	fp, #0
 800c1a8:	d050      	beq.n	800c24c <__hexnan+0x130>
 800c1aa:	454c      	cmp	r4, r9
 800c1ac:	d206      	bcs.n	800c1bc <__hexnan+0xa0>
 800c1ae:	2d07      	cmp	r5, #7
 800c1b0:	dc04      	bgt.n	800c1bc <__hexnan+0xa0>
 800c1b2:	462a      	mov	r2, r5
 800c1b4:	4649      	mov	r1, r9
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	f7ff ff8a 	bl	800c0d0 <L_shift>
 800c1bc:	4544      	cmp	r4, r8
 800c1be:	d934      	bls.n	800c22a <__hexnan+0x10e>
 800c1c0:	f1a8 0204 	sub.w	r2, r8, #4
 800c1c4:	4623      	mov	r3, r4
 800c1c6:	f853 1b04 	ldr.w	r1, [r3], #4
 800c1ca:	f842 1f04 	str.w	r1, [r2, #4]!
 800c1ce:	429f      	cmp	r7, r3
 800c1d0:	d2f9      	bcs.n	800c1c6 <__hexnan+0xaa>
 800c1d2:	1b3b      	subs	r3, r7, r4
 800c1d4:	f023 0303 	bic.w	r3, r3, #3
 800c1d8:	3304      	adds	r3, #4
 800c1da:	3401      	adds	r4, #1
 800c1dc:	3e03      	subs	r6, #3
 800c1de:	42b4      	cmp	r4, r6
 800c1e0:	bf88      	it	hi
 800c1e2:	2304      	movhi	r3, #4
 800c1e4:	4443      	add	r3, r8
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	f843 2b04 	str.w	r2, [r3], #4
 800c1ec:	429f      	cmp	r7, r3
 800c1ee:	d2fb      	bcs.n	800c1e8 <__hexnan+0xcc>
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	b91b      	cbnz	r3, 800c1fc <__hexnan+0xe0>
 800c1f4:	4547      	cmp	r7, r8
 800c1f6:	d127      	bne.n	800c248 <__hexnan+0x12c>
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	603b      	str	r3, [r7, #0]
 800c1fc:	2005      	movs	r0, #5
 800c1fe:	e026      	b.n	800c24e <__hexnan+0x132>
 800c200:	3501      	adds	r5, #1
 800c202:	2d08      	cmp	r5, #8
 800c204:	f10b 0b01 	add.w	fp, fp, #1
 800c208:	dd06      	ble.n	800c218 <__hexnan+0xfc>
 800c20a:	4544      	cmp	r4, r8
 800c20c:	d9c3      	bls.n	800c196 <__hexnan+0x7a>
 800c20e:	2300      	movs	r3, #0
 800c210:	f844 3c04 	str.w	r3, [r4, #-4]
 800c214:	2501      	movs	r5, #1
 800c216:	3c04      	subs	r4, #4
 800c218:	6822      	ldr	r2, [r4, #0]
 800c21a:	f000 000f 	and.w	r0, r0, #15
 800c21e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c222:	6022      	str	r2, [r4, #0]
 800c224:	e7b7      	b.n	800c196 <__hexnan+0x7a>
 800c226:	2508      	movs	r5, #8
 800c228:	e7b5      	b.n	800c196 <__hexnan+0x7a>
 800c22a:	9b01      	ldr	r3, [sp, #4]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d0df      	beq.n	800c1f0 <__hexnan+0xd4>
 800c230:	f04f 32ff 	mov.w	r2, #4294967295
 800c234:	f1c3 0320 	rsb	r3, r3, #32
 800c238:	fa22 f303 	lsr.w	r3, r2, r3
 800c23c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c240:	401a      	ands	r2, r3
 800c242:	f846 2c04 	str.w	r2, [r6, #-4]
 800c246:	e7d3      	b.n	800c1f0 <__hexnan+0xd4>
 800c248:	3f04      	subs	r7, #4
 800c24a:	e7d1      	b.n	800c1f0 <__hexnan+0xd4>
 800c24c:	2004      	movs	r0, #4
 800c24e:	b007      	add	sp, #28
 800c250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c254 <_localeconv_r>:
 800c254:	4800      	ldr	r0, [pc, #0]	; (800c258 <_localeconv_r+0x4>)
 800c256:	4770      	bx	lr
 800c258:	20000170 	.word	0x20000170

0800c25c <__retarget_lock_init_recursive>:
 800c25c:	4770      	bx	lr

0800c25e <__retarget_lock_acquire_recursive>:
 800c25e:	4770      	bx	lr

0800c260 <__retarget_lock_release_recursive>:
 800c260:	4770      	bx	lr
	...

0800c264 <malloc>:
 800c264:	4b02      	ldr	r3, [pc, #8]	; (800c270 <malloc+0xc>)
 800c266:	4601      	mov	r1, r0
 800c268:	6818      	ldr	r0, [r3, #0]
 800c26a:	f000 bd59 	b.w	800cd20 <_malloc_r>
 800c26e:	bf00      	nop
 800c270:	20000018 	.word	0x20000018

0800c274 <__ascii_mbtowc>:
 800c274:	b082      	sub	sp, #8
 800c276:	b901      	cbnz	r1, 800c27a <__ascii_mbtowc+0x6>
 800c278:	a901      	add	r1, sp, #4
 800c27a:	b142      	cbz	r2, 800c28e <__ascii_mbtowc+0x1a>
 800c27c:	b14b      	cbz	r3, 800c292 <__ascii_mbtowc+0x1e>
 800c27e:	7813      	ldrb	r3, [r2, #0]
 800c280:	600b      	str	r3, [r1, #0]
 800c282:	7812      	ldrb	r2, [r2, #0]
 800c284:	1e10      	subs	r0, r2, #0
 800c286:	bf18      	it	ne
 800c288:	2001      	movne	r0, #1
 800c28a:	b002      	add	sp, #8
 800c28c:	4770      	bx	lr
 800c28e:	4610      	mov	r0, r2
 800c290:	e7fb      	b.n	800c28a <__ascii_mbtowc+0x16>
 800c292:	f06f 0001 	mvn.w	r0, #1
 800c296:	e7f8      	b.n	800c28a <__ascii_mbtowc+0x16>

0800c298 <_Balloc>:
 800c298:	b570      	push	{r4, r5, r6, lr}
 800c29a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c29c:	4604      	mov	r4, r0
 800c29e:	460d      	mov	r5, r1
 800c2a0:	b976      	cbnz	r6, 800c2c0 <_Balloc+0x28>
 800c2a2:	2010      	movs	r0, #16
 800c2a4:	f7ff ffde 	bl	800c264 <malloc>
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	6260      	str	r0, [r4, #36]	; 0x24
 800c2ac:	b920      	cbnz	r0, 800c2b8 <_Balloc+0x20>
 800c2ae:	4b18      	ldr	r3, [pc, #96]	; (800c310 <_Balloc+0x78>)
 800c2b0:	4818      	ldr	r0, [pc, #96]	; (800c314 <_Balloc+0x7c>)
 800c2b2:	2166      	movs	r1, #102	; 0x66
 800c2b4:	f001 f9b0 	bl	800d618 <__assert_func>
 800c2b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2bc:	6006      	str	r6, [r0, #0]
 800c2be:	60c6      	str	r6, [r0, #12]
 800c2c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c2c2:	68f3      	ldr	r3, [r6, #12]
 800c2c4:	b183      	cbz	r3, 800c2e8 <_Balloc+0x50>
 800c2c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c2ce:	b9b8      	cbnz	r0, 800c300 <_Balloc+0x68>
 800c2d0:	2101      	movs	r1, #1
 800c2d2:	fa01 f605 	lsl.w	r6, r1, r5
 800c2d6:	1d72      	adds	r2, r6, #5
 800c2d8:	0092      	lsls	r2, r2, #2
 800c2da:	4620      	mov	r0, r4
 800c2dc:	f000 fc9d 	bl	800cc1a <_calloc_r>
 800c2e0:	b160      	cbz	r0, 800c2fc <_Balloc+0x64>
 800c2e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c2e6:	e00e      	b.n	800c306 <_Balloc+0x6e>
 800c2e8:	2221      	movs	r2, #33	; 0x21
 800c2ea:	2104      	movs	r1, #4
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	f000 fc94 	bl	800cc1a <_calloc_r>
 800c2f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2f4:	60f0      	str	r0, [r6, #12]
 800c2f6:	68db      	ldr	r3, [r3, #12]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d1e4      	bne.n	800c2c6 <_Balloc+0x2e>
 800c2fc:	2000      	movs	r0, #0
 800c2fe:	bd70      	pop	{r4, r5, r6, pc}
 800c300:	6802      	ldr	r2, [r0, #0]
 800c302:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c306:	2300      	movs	r3, #0
 800c308:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c30c:	e7f7      	b.n	800c2fe <_Balloc+0x66>
 800c30e:	bf00      	nop
 800c310:	0800df7e 	.word	0x0800df7e
 800c314:	0800e0e0 	.word	0x0800e0e0

0800c318 <_Bfree>:
 800c318:	b570      	push	{r4, r5, r6, lr}
 800c31a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c31c:	4605      	mov	r5, r0
 800c31e:	460c      	mov	r4, r1
 800c320:	b976      	cbnz	r6, 800c340 <_Bfree+0x28>
 800c322:	2010      	movs	r0, #16
 800c324:	f7ff ff9e 	bl	800c264 <malloc>
 800c328:	4602      	mov	r2, r0
 800c32a:	6268      	str	r0, [r5, #36]	; 0x24
 800c32c:	b920      	cbnz	r0, 800c338 <_Bfree+0x20>
 800c32e:	4b09      	ldr	r3, [pc, #36]	; (800c354 <_Bfree+0x3c>)
 800c330:	4809      	ldr	r0, [pc, #36]	; (800c358 <_Bfree+0x40>)
 800c332:	218a      	movs	r1, #138	; 0x8a
 800c334:	f001 f970 	bl	800d618 <__assert_func>
 800c338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c33c:	6006      	str	r6, [r0, #0]
 800c33e:	60c6      	str	r6, [r0, #12]
 800c340:	b13c      	cbz	r4, 800c352 <_Bfree+0x3a>
 800c342:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c344:	6862      	ldr	r2, [r4, #4]
 800c346:	68db      	ldr	r3, [r3, #12]
 800c348:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c34c:	6021      	str	r1, [r4, #0]
 800c34e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c352:	bd70      	pop	{r4, r5, r6, pc}
 800c354:	0800df7e 	.word	0x0800df7e
 800c358:	0800e0e0 	.word	0x0800e0e0

0800c35c <__multadd>:
 800c35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c360:	690d      	ldr	r5, [r1, #16]
 800c362:	4607      	mov	r7, r0
 800c364:	460c      	mov	r4, r1
 800c366:	461e      	mov	r6, r3
 800c368:	f101 0c14 	add.w	ip, r1, #20
 800c36c:	2000      	movs	r0, #0
 800c36e:	f8dc 3000 	ldr.w	r3, [ip]
 800c372:	b299      	uxth	r1, r3
 800c374:	fb02 6101 	mla	r1, r2, r1, r6
 800c378:	0c1e      	lsrs	r6, r3, #16
 800c37a:	0c0b      	lsrs	r3, r1, #16
 800c37c:	fb02 3306 	mla	r3, r2, r6, r3
 800c380:	b289      	uxth	r1, r1
 800c382:	3001      	adds	r0, #1
 800c384:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c388:	4285      	cmp	r5, r0
 800c38a:	f84c 1b04 	str.w	r1, [ip], #4
 800c38e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c392:	dcec      	bgt.n	800c36e <__multadd+0x12>
 800c394:	b30e      	cbz	r6, 800c3da <__multadd+0x7e>
 800c396:	68a3      	ldr	r3, [r4, #8]
 800c398:	42ab      	cmp	r3, r5
 800c39a:	dc19      	bgt.n	800c3d0 <__multadd+0x74>
 800c39c:	6861      	ldr	r1, [r4, #4]
 800c39e:	4638      	mov	r0, r7
 800c3a0:	3101      	adds	r1, #1
 800c3a2:	f7ff ff79 	bl	800c298 <_Balloc>
 800c3a6:	4680      	mov	r8, r0
 800c3a8:	b928      	cbnz	r0, 800c3b6 <__multadd+0x5a>
 800c3aa:	4602      	mov	r2, r0
 800c3ac:	4b0c      	ldr	r3, [pc, #48]	; (800c3e0 <__multadd+0x84>)
 800c3ae:	480d      	ldr	r0, [pc, #52]	; (800c3e4 <__multadd+0x88>)
 800c3b0:	21b5      	movs	r1, #181	; 0xb5
 800c3b2:	f001 f931 	bl	800d618 <__assert_func>
 800c3b6:	6922      	ldr	r2, [r4, #16]
 800c3b8:	3202      	adds	r2, #2
 800c3ba:	f104 010c 	add.w	r1, r4, #12
 800c3be:	0092      	lsls	r2, r2, #2
 800c3c0:	300c      	adds	r0, #12
 800c3c2:	f7fc feef 	bl	80091a4 <memcpy>
 800c3c6:	4621      	mov	r1, r4
 800c3c8:	4638      	mov	r0, r7
 800c3ca:	f7ff ffa5 	bl	800c318 <_Bfree>
 800c3ce:	4644      	mov	r4, r8
 800c3d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c3d4:	3501      	adds	r5, #1
 800c3d6:	615e      	str	r6, [r3, #20]
 800c3d8:	6125      	str	r5, [r4, #16]
 800c3da:	4620      	mov	r0, r4
 800c3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3e0:	0800dff0 	.word	0x0800dff0
 800c3e4:	0800e0e0 	.word	0x0800e0e0

0800c3e8 <__s2b>:
 800c3e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3ec:	460c      	mov	r4, r1
 800c3ee:	4615      	mov	r5, r2
 800c3f0:	461f      	mov	r7, r3
 800c3f2:	2209      	movs	r2, #9
 800c3f4:	3308      	adds	r3, #8
 800c3f6:	4606      	mov	r6, r0
 800c3f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3fc:	2100      	movs	r1, #0
 800c3fe:	2201      	movs	r2, #1
 800c400:	429a      	cmp	r2, r3
 800c402:	db09      	blt.n	800c418 <__s2b+0x30>
 800c404:	4630      	mov	r0, r6
 800c406:	f7ff ff47 	bl	800c298 <_Balloc>
 800c40a:	b940      	cbnz	r0, 800c41e <__s2b+0x36>
 800c40c:	4602      	mov	r2, r0
 800c40e:	4b19      	ldr	r3, [pc, #100]	; (800c474 <__s2b+0x8c>)
 800c410:	4819      	ldr	r0, [pc, #100]	; (800c478 <__s2b+0x90>)
 800c412:	21ce      	movs	r1, #206	; 0xce
 800c414:	f001 f900 	bl	800d618 <__assert_func>
 800c418:	0052      	lsls	r2, r2, #1
 800c41a:	3101      	adds	r1, #1
 800c41c:	e7f0      	b.n	800c400 <__s2b+0x18>
 800c41e:	9b08      	ldr	r3, [sp, #32]
 800c420:	6143      	str	r3, [r0, #20]
 800c422:	2d09      	cmp	r5, #9
 800c424:	f04f 0301 	mov.w	r3, #1
 800c428:	6103      	str	r3, [r0, #16]
 800c42a:	dd16      	ble.n	800c45a <__s2b+0x72>
 800c42c:	f104 0909 	add.w	r9, r4, #9
 800c430:	46c8      	mov	r8, r9
 800c432:	442c      	add	r4, r5
 800c434:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c438:	4601      	mov	r1, r0
 800c43a:	3b30      	subs	r3, #48	; 0x30
 800c43c:	220a      	movs	r2, #10
 800c43e:	4630      	mov	r0, r6
 800c440:	f7ff ff8c 	bl	800c35c <__multadd>
 800c444:	45a0      	cmp	r8, r4
 800c446:	d1f5      	bne.n	800c434 <__s2b+0x4c>
 800c448:	f1a5 0408 	sub.w	r4, r5, #8
 800c44c:	444c      	add	r4, r9
 800c44e:	1b2d      	subs	r5, r5, r4
 800c450:	1963      	adds	r3, r4, r5
 800c452:	42bb      	cmp	r3, r7
 800c454:	db04      	blt.n	800c460 <__s2b+0x78>
 800c456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c45a:	340a      	adds	r4, #10
 800c45c:	2509      	movs	r5, #9
 800c45e:	e7f6      	b.n	800c44e <__s2b+0x66>
 800c460:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c464:	4601      	mov	r1, r0
 800c466:	3b30      	subs	r3, #48	; 0x30
 800c468:	220a      	movs	r2, #10
 800c46a:	4630      	mov	r0, r6
 800c46c:	f7ff ff76 	bl	800c35c <__multadd>
 800c470:	e7ee      	b.n	800c450 <__s2b+0x68>
 800c472:	bf00      	nop
 800c474:	0800dff0 	.word	0x0800dff0
 800c478:	0800e0e0 	.word	0x0800e0e0

0800c47c <__hi0bits>:
 800c47c:	0c03      	lsrs	r3, r0, #16
 800c47e:	041b      	lsls	r3, r3, #16
 800c480:	b9d3      	cbnz	r3, 800c4b8 <__hi0bits+0x3c>
 800c482:	0400      	lsls	r0, r0, #16
 800c484:	2310      	movs	r3, #16
 800c486:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c48a:	bf04      	itt	eq
 800c48c:	0200      	lsleq	r0, r0, #8
 800c48e:	3308      	addeq	r3, #8
 800c490:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c494:	bf04      	itt	eq
 800c496:	0100      	lsleq	r0, r0, #4
 800c498:	3304      	addeq	r3, #4
 800c49a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c49e:	bf04      	itt	eq
 800c4a0:	0080      	lsleq	r0, r0, #2
 800c4a2:	3302      	addeq	r3, #2
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	db05      	blt.n	800c4b4 <__hi0bits+0x38>
 800c4a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c4ac:	f103 0301 	add.w	r3, r3, #1
 800c4b0:	bf08      	it	eq
 800c4b2:	2320      	moveq	r3, #32
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	4770      	bx	lr
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	e7e4      	b.n	800c486 <__hi0bits+0xa>

0800c4bc <__lo0bits>:
 800c4bc:	6803      	ldr	r3, [r0, #0]
 800c4be:	f013 0207 	ands.w	r2, r3, #7
 800c4c2:	4601      	mov	r1, r0
 800c4c4:	d00b      	beq.n	800c4de <__lo0bits+0x22>
 800c4c6:	07da      	lsls	r2, r3, #31
 800c4c8:	d423      	bmi.n	800c512 <__lo0bits+0x56>
 800c4ca:	0798      	lsls	r0, r3, #30
 800c4cc:	bf49      	itett	mi
 800c4ce:	085b      	lsrmi	r3, r3, #1
 800c4d0:	089b      	lsrpl	r3, r3, #2
 800c4d2:	2001      	movmi	r0, #1
 800c4d4:	600b      	strmi	r3, [r1, #0]
 800c4d6:	bf5c      	itt	pl
 800c4d8:	600b      	strpl	r3, [r1, #0]
 800c4da:	2002      	movpl	r0, #2
 800c4dc:	4770      	bx	lr
 800c4de:	b298      	uxth	r0, r3
 800c4e0:	b9a8      	cbnz	r0, 800c50e <__lo0bits+0x52>
 800c4e2:	0c1b      	lsrs	r3, r3, #16
 800c4e4:	2010      	movs	r0, #16
 800c4e6:	b2da      	uxtb	r2, r3
 800c4e8:	b90a      	cbnz	r2, 800c4ee <__lo0bits+0x32>
 800c4ea:	3008      	adds	r0, #8
 800c4ec:	0a1b      	lsrs	r3, r3, #8
 800c4ee:	071a      	lsls	r2, r3, #28
 800c4f0:	bf04      	itt	eq
 800c4f2:	091b      	lsreq	r3, r3, #4
 800c4f4:	3004      	addeq	r0, #4
 800c4f6:	079a      	lsls	r2, r3, #30
 800c4f8:	bf04      	itt	eq
 800c4fa:	089b      	lsreq	r3, r3, #2
 800c4fc:	3002      	addeq	r0, #2
 800c4fe:	07da      	lsls	r2, r3, #31
 800c500:	d403      	bmi.n	800c50a <__lo0bits+0x4e>
 800c502:	085b      	lsrs	r3, r3, #1
 800c504:	f100 0001 	add.w	r0, r0, #1
 800c508:	d005      	beq.n	800c516 <__lo0bits+0x5a>
 800c50a:	600b      	str	r3, [r1, #0]
 800c50c:	4770      	bx	lr
 800c50e:	4610      	mov	r0, r2
 800c510:	e7e9      	b.n	800c4e6 <__lo0bits+0x2a>
 800c512:	2000      	movs	r0, #0
 800c514:	4770      	bx	lr
 800c516:	2020      	movs	r0, #32
 800c518:	4770      	bx	lr
	...

0800c51c <__i2b>:
 800c51c:	b510      	push	{r4, lr}
 800c51e:	460c      	mov	r4, r1
 800c520:	2101      	movs	r1, #1
 800c522:	f7ff feb9 	bl	800c298 <_Balloc>
 800c526:	4602      	mov	r2, r0
 800c528:	b928      	cbnz	r0, 800c536 <__i2b+0x1a>
 800c52a:	4b05      	ldr	r3, [pc, #20]	; (800c540 <__i2b+0x24>)
 800c52c:	4805      	ldr	r0, [pc, #20]	; (800c544 <__i2b+0x28>)
 800c52e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c532:	f001 f871 	bl	800d618 <__assert_func>
 800c536:	2301      	movs	r3, #1
 800c538:	6144      	str	r4, [r0, #20]
 800c53a:	6103      	str	r3, [r0, #16]
 800c53c:	bd10      	pop	{r4, pc}
 800c53e:	bf00      	nop
 800c540:	0800dff0 	.word	0x0800dff0
 800c544:	0800e0e0 	.word	0x0800e0e0

0800c548 <__multiply>:
 800c548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c54c:	4691      	mov	r9, r2
 800c54e:	690a      	ldr	r2, [r1, #16]
 800c550:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c554:	429a      	cmp	r2, r3
 800c556:	bfb8      	it	lt
 800c558:	460b      	movlt	r3, r1
 800c55a:	460c      	mov	r4, r1
 800c55c:	bfbc      	itt	lt
 800c55e:	464c      	movlt	r4, r9
 800c560:	4699      	movlt	r9, r3
 800c562:	6927      	ldr	r7, [r4, #16]
 800c564:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c568:	68a3      	ldr	r3, [r4, #8]
 800c56a:	6861      	ldr	r1, [r4, #4]
 800c56c:	eb07 060a 	add.w	r6, r7, sl
 800c570:	42b3      	cmp	r3, r6
 800c572:	b085      	sub	sp, #20
 800c574:	bfb8      	it	lt
 800c576:	3101      	addlt	r1, #1
 800c578:	f7ff fe8e 	bl	800c298 <_Balloc>
 800c57c:	b930      	cbnz	r0, 800c58c <__multiply+0x44>
 800c57e:	4602      	mov	r2, r0
 800c580:	4b44      	ldr	r3, [pc, #272]	; (800c694 <__multiply+0x14c>)
 800c582:	4845      	ldr	r0, [pc, #276]	; (800c698 <__multiply+0x150>)
 800c584:	f240 115d 	movw	r1, #349	; 0x15d
 800c588:	f001 f846 	bl	800d618 <__assert_func>
 800c58c:	f100 0514 	add.w	r5, r0, #20
 800c590:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c594:	462b      	mov	r3, r5
 800c596:	2200      	movs	r2, #0
 800c598:	4543      	cmp	r3, r8
 800c59a:	d321      	bcc.n	800c5e0 <__multiply+0x98>
 800c59c:	f104 0314 	add.w	r3, r4, #20
 800c5a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c5a4:	f109 0314 	add.w	r3, r9, #20
 800c5a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c5ac:	9202      	str	r2, [sp, #8]
 800c5ae:	1b3a      	subs	r2, r7, r4
 800c5b0:	3a15      	subs	r2, #21
 800c5b2:	f022 0203 	bic.w	r2, r2, #3
 800c5b6:	3204      	adds	r2, #4
 800c5b8:	f104 0115 	add.w	r1, r4, #21
 800c5bc:	428f      	cmp	r7, r1
 800c5be:	bf38      	it	cc
 800c5c0:	2204      	movcc	r2, #4
 800c5c2:	9201      	str	r2, [sp, #4]
 800c5c4:	9a02      	ldr	r2, [sp, #8]
 800c5c6:	9303      	str	r3, [sp, #12]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d80c      	bhi.n	800c5e6 <__multiply+0x9e>
 800c5cc:	2e00      	cmp	r6, #0
 800c5ce:	dd03      	ble.n	800c5d8 <__multiply+0x90>
 800c5d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d05a      	beq.n	800c68e <__multiply+0x146>
 800c5d8:	6106      	str	r6, [r0, #16]
 800c5da:	b005      	add	sp, #20
 800c5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e0:	f843 2b04 	str.w	r2, [r3], #4
 800c5e4:	e7d8      	b.n	800c598 <__multiply+0x50>
 800c5e6:	f8b3 a000 	ldrh.w	sl, [r3]
 800c5ea:	f1ba 0f00 	cmp.w	sl, #0
 800c5ee:	d024      	beq.n	800c63a <__multiply+0xf2>
 800c5f0:	f104 0e14 	add.w	lr, r4, #20
 800c5f4:	46a9      	mov	r9, r5
 800c5f6:	f04f 0c00 	mov.w	ip, #0
 800c5fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c5fe:	f8d9 1000 	ldr.w	r1, [r9]
 800c602:	fa1f fb82 	uxth.w	fp, r2
 800c606:	b289      	uxth	r1, r1
 800c608:	fb0a 110b 	mla	r1, sl, fp, r1
 800c60c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c610:	f8d9 2000 	ldr.w	r2, [r9]
 800c614:	4461      	add	r1, ip
 800c616:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c61a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c61e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c622:	b289      	uxth	r1, r1
 800c624:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c628:	4577      	cmp	r7, lr
 800c62a:	f849 1b04 	str.w	r1, [r9], #4
 800c62e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c632:	d8e2      	bhi.n	800c5fa <__multiply+0xb2>
 800c634:	9a01      	ldr	r2, [sp, #4]
 800c636:	f845 c002 	str.w	ip, [r5, r2]
 800c63a:	9a03      	ldr	r2, [sp, #12]
 800c63c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c640:	3304      	adds	r3, #4
 800c642:	f1b9 0f00 	cmp.w	r9, #0
 800c646:	d020      	beq.n	800c68a <__multiply+0x142>
 800c648:	6829      	ldr	r1, [r5, #0]
 800c64a:	f104 0c14 	add.w	ip, r4, #20
 800c64e:	46ae      	mov	lr, r5
 800c650:	f04f 0a00 	mov.w	sl, #0
 800c654:	f8bc b000 	ldrh.w	fp, [ip]
 800c658:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c65c:	fb09 220b 	mla	r2, r9, fp, r2
 800c660:	4492      	add	sl, r2
 800c662:	b289      	uxth	r1, r1
 800c664:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c668:	f84e 1b04 	str.w	r1, [lr], #4
 800c66c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c670:	f8be 1000 	ldrh.w	r1, [lr]
 800c674:	0c12      	lsrs	r2, r2, #16
 800c676:	fb09 1102 	mla	r1, r9, r2, r1
 800c67a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c67e:	4567      	cmp	r7, ip
 800c680:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c684:	d8e6      	bhi.n	800c654 <__multiply+0x10c>
 800c686:	9a01      	ldr	r2, [sp, #4]
 800c688:	50a9      	str	r1, [r5, r2]
 800c68a:	3504      	adds	r5, #4
 800c68c:	e79a      	b.n	800c5c4 <__multiply+0x7c>
 800c68e:	3e01      	subs	r6, #1
 800c690:	e79c      	b.n	800c5cc <__multiply+0x84>
 800c692:	bf00      	nop
 800c694:	0800dff0 	.word	0x0800dff0
 800c698:	0800e0e0 	.word	0x0800e0e0

0800c69c <__pow5mult>:
 800c69c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6a0:	4615      	mov	r5, r2
 800c6a2:	f012 0203 	ands.w	r2, r2, #3
 800c6a6:	4606      	mov	r6, r0
 800c6a8:	460f      	mov	r7, r1
 800c6aa:	d007      	beq.n	800c6bc <__pow5mult+0x20>
 800c6ac:	4c25      	ldr	r4, [pc, #148]	; (800c744 <__pow5mult+0xa8>)
 800c6ae:	3a01      	subs	r2, #1
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c6b6:	f7ff fe51 	bl	800c35c <__multadd>
 800c6ba:	4607      	mov	r7, r0
 800c6bc:	10ad      	asrs	r5, r5, #2
 800c6be:	d03d      	beq.n	800c73c <__pow5mult+0xa0>
 800c6c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c6c2:	b97c      	cbnz	r4, 800c6e4 <__pow5mult+0x48>
 800c6c4:	2010      	movs	r0, #16
 800c6c6:	f7ff fdcd 	bl	800c264 <malloc>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	6270      	str	r0, [r6, #36]	; 0x24
 800c6ce:	b928      	cbnz	r0, 800c6dc <__pow5mult+0x40>
 800c6d0:	4b1d      	ldr	r3, [pc, #116]	; (800c748 <__pow5mult+0xac>)
 800c6d2:	481e      	ldr	r0, [pc, #120]	; (800c74c <__pow5mult+0xb0>)
 800c6d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c6d8:	f000 ff9e 	bl	800d618 <__assert_func>
 800c6dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c6e0:	6004      	str	r4, [r0, #0]
 800c6e2:	60c4      	str	r4, [r0, #12]
 800c6e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c6e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c6ec:	b94c      	cbnz	r4, 800c702 <__pow5mult+0x66>
 800c6ee:	f240 2171 	movw	r1, #625	; 0x271
 800c6f2:	4630      	mov	r0, r6
 800c6f4:	f7ff ff12 	bl	800c51c <__i2b>
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800c6fe:	4604      	mov	r4, r0
 800c700:	6003      	str	r3, [r0, #0]
 800c702:	f04f 0900 	mov.w	r9, #0
 800c706:	07eb      	lsls	r3, r5, #31
 800c708:	d50a      	bpl.n	800c720 <__pow5mult+0x84>
 800c70a:	4639      	mov	r1, r7
 800c70c:	4622      	mov	r2, r4
 800c70e:	4630      	mov	r0, r6
 800c710:	f7ff ff1a 	bl	800c548 <__multiply>
 800c714:	4639      	mov	r1, r7
 800c716:	4680      	mov	r8, r0
 800c718:	4630      	mov	r0, r6
 800c71a:	f7ff fdfd 	bl	800c318 <_Bfree>
 800c71e:	4647      	mov	r7, r8
 800c720:	106d      	asrs	r5, r5, #1
 800c722:	d00b      	beq.n	800c73c <__pow5mult+0xa0>
 800c724:	6820      	ldr	r0, [r4, #0]
 800c726:	b938      	cbnz	r0, 800c738 <__pow5mult+0x9c>
 800c728:	4622      	mov	r2, r4
 800c72a:	4621      	mov	r1, r4
 800c72c:	4630      	mov	r0, r6
 800c72e:	f7ff ff0b 	bl	800c548 <__multiply>
 800c732:	6020      	str	r0, [r4, #0]
 800c734:	f8c0 9000 	str.w	r9, [r0]
 800c738:	4604      	mov	r4, r0
 800c73a:	e7e4      	b.n	800c706 <__pow5mult+0x6a>
 800c73c:	4638      	mov	r0, r7
 800c73e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c742:	bf00      	nop
 800c744:	0800e230 	.word	0x0800e230
 800c748:	0800df7e 	.word	0x0800df7e
 800c74c:	0800e0e0 	.word	0x0800e0e0

0800c750 <__lshift>:
 800c750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c754:	460c      	mov	r4, r1
 800c756:	6849      	ldr	r1, [r1, #4]
 800c758:	6923      	ldr	r3, [r4, #16]
 800c75a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c75e:	68a3      	ldr	r3, [r4, #8]
 800c760:	4607      	mov	r7, r0
 800c762:	4691      	mov	r9, r2
 800c764:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c768:	f108 0601 	add.w	r6, r8, #1
 800c76c:	42b3      	cmp	r3, r6
 800c76e:	db0b      	blt.n	800c788 <__lshift+0x38>
 800c770:	4638      	mov	r0, r7
 800c772:	f7ff fd91 	bl	800c298 <_Balloc>
 800c776:	4605      	mov	r5, r0
 800c778:	b948      	cbnz	r0, 800c78e <__lshift+0x3e>
 800c77a:	4602      	mov	r2, r0
 800c77c:	4b2a      	ldr	r3, [pc, #168]	; (800c828 <__lshift+0xd8>)
 800c77e:	482b      	ldr	r0, [pc, #172]	; (800c82c <__lshift+0xdc>)
 800c780:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c784:	f000 ff48 	bl	800d618 <__assert_func>
 800c788:	3101      	adds	r1, #1
 800c78a:	005b      	lsls	r3, r3, #1
 800c78c:	e7ee      	b.n	800c76c <__lshift+0x1c>
 800c78e:	2300      	movs	r3, #0
 800c790:	f100 0114 	add.w	r1, r0, #20
 800c794:	f100 0210 	add.w	r2, r0, #16
 800c798:	4618      	mov	r0, r3
 800c79a:	4553      	cmp	r3, sl
 800c79c:	db37      	blt.n	800c80e <__lshift+0xbe>
 800c79e:	6920      	ldr	r0, [r4, #16]
 800c7a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c7a4:	f104 0314 	add.w	r3, r4, #20
 800c7a8:	f019 091f 	ands.w	r9, r9, #31
 800c7ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c7b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c7b4:	d02f      	beq.n	800c816 <__lshift+0xc6>
 800c7b6:	f1c9 0e20 	rsb	lr, r9, #32
 800c7ba:	468a      	mov	sl, r1
 800c7bc:	f04f 0c00 	mov.w	ip, #0
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	fa02 f209 	lsl.w	r2, r2, r9
 800c7c6:	ea42 020c 	orr.w	r2, r2, ip
 800c7ca:	f84a 2b04 	str.w	r2, [sl], #4
 800c7ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7d2:	4298      	cmp	r0, r3
 800c7d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c7d8:	d8f2      	bhi.n	800c7c0 <__lshift+0x70>
 800c7da:	1b03      	subs	r3, r0, r4
 800c7dc:	3b15      	subs	r3, #21
 800c7de:	f023 0303 	bic.w	r3, r3, #3
 800c7e2:	3304      	adds	r3, #4
 800c7e4:	f104 0215 	add.w	r2, r4, #21
 800c7e8:	4290      	cmp	r0, r2
 800c7ea:	bf38      	it	cc
 800c7ec:	2304      	movcc	r3, #4
 800c7ee:	f841 c003 	str.w	ip, [r1, r3]
 800c7f2:	f1bc 0f00 	cmp.w	ip, #0
 800c7f6:	d001      	beq.n	800c7fc <__lshift+0xac>
 800c7f8:	f108 0602 	add.w	r6, r8, #2
 800c7fc:	3e01      	subs	r6, #1
 800c7fe:	4638      	mov	r0, r7
 800c800:	612e      	str	r6, [r5, #16]
 800c802:	4621      	mov	r1, r4
 800c804:	f7ff fd88 	bl	800c318 <_Bfree>
 800c808:	4628      	mov	r0, r5
 800c80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c80e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c812:	3301      	adds	r3, #1
 800c814:	e7c1      	b.n	800c79a <__lshift+0x4a>
 800c816:	3904      	subs	r1, #4
 800c818:	f853 2b04 	ldr.w	r2, [r3], #4
 800c81c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c820:	4298      	cmp	r0, r3
 800c822:	d8f9      	bhi.n	800c818 <__lshift+0xc8>
 800c824:	e7ea      	b.n	800c7fc <__lshift+0xac>
 800c826:	bf00      	nop
 800c828:	0800dff0 	.word	0x0800dff0
 800c82c:	0800e0e0 	.word	0x0800e0e0

0800c830 <__mcmp>:
 800c830:	b530      	push	{r4, r5, lr}
 800c832:	6902      	ldr	r2, [r0, #16]
 800c834:	690c      	ldr	r4, [r1, #16]
 800c836:	1b12      	subs	r2, r2, r4
 800c838:	d10e      	bne.n	800c858 <__mcmp+0x28>
 800c83a:	f100 0314 	add.w	r3, r0, #20
 800c83e:	3114      	adds	r1, #20
 800c840:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c844:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c848:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c84c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c850:	42a5      	cmp	r5, r4
 800c852:	d003      	beq.n	800c85c <__mcmp+0x2c>
 800c854:	d305      	bcc.n	800c862 <__mcmp+0x32>
 800c856:	2201      	movs	r2, #1
 800c858:	4610      	mov	r0, r2
 800c85a:	bd30      	pop	{r4, r5, pc}
 800c85c:	4283      	cmp	r3, r0
 800c85e:	d3f3      	bcc.n	800c848 <__mcmp+0x18>
 800c860:	e7fa      	b.n	800c858 <__mcmp+0x28>
 800c862:	f04f 32ff 	mov.w	r2, #4294967295
 800c866:	e7f7      	b.n	800c858 <__mcmp+0x28>

0800c868 <__mdiff>:
 800c868:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c86c:	460c      	mov	r4, r1
 800c86e:	4606      	mov	r6, r0
 800c870:	4611      	mov	r1, r2
 800c872:	4620      	mov	r0, r4
 800c874:	4690      	mov	r8, r2
 800c876:	f7ff ffdb 	bl	800c830 <__mcmp>
 800c87a:	1e05      	subs	r5, r0, #0
 800c87c:	d110      	bne.n	800c8a0 <__mdiff+0x38>
 800c87e:	4629      	mov	r1, r5
 800c880:	4630      	mov	r0, r6
 800c882:	f7ff fd09 	bl	800c298 <_Balloc>
 800c886:	b930      	cbnz	r0, 800c896 <__mdiff+0x2e>
 800c888:	4b3a      	ldr	r3, [pc, #232]	; (800c974 <__mdiff+0x10c>)
 800c88a:	4602      	mov	r2, r0
 800c88c:	f240 2132 	movw	r1, #562	; 0x232
 800c890:	4839      	ldr	r0, [pc, #228]	; (800c978 <__mdiff+0x110>)
 800c892:	f000 fec1 	bl	800d618 <__assert_func>
 800c896:	2301      	movs	r3, #1
 800c898:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c89c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a0:	bfa4      	itt	ge
 800c8a2:	4643      	movge	r3, r8
 800c8a4:	46a0      	movge	r8, r4
 800c8a6:	4630      	mov	r0, r6
 800c8a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c8ac:	bfa6      	itte	ge
 800c8ae:	461c      	movge	r4, r3
 800c8b0:	2500      	movge	r5, #0
 800c8b2:	2501      	movlt	r5, #1
 800c8b4:	f7ff fcf0 	bl	800c298 <_Balloc>
 800c8b8:	b920      	cbnz	r0, 800c8c4 <__mdiff+0x5c>
 800c8ba:	4b2e      	ldr	r3, [pc, #184]	; (800c974 <__mdiff+0x10c>)
 800c8bc:	4602      	mov	r2, r0
 800c8be:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c8c2:	e7e5      	b.n	800c890 <__mdiff+0x28>
 800c8c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c8c8:	6926      	ldr	r6, [r4, #16]
 800c8ca:	60c5      	str	r5, [r0, #12]
 800c8cc:	f104 0914 	add.w	r9, r4, #20
 800c8d0:	f108 0514 	add.w	r5, r8, #20
 800c8d4:	f100 0e14 	add.w	lr, r0, #20
 800c8d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c8dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c8e0:	f108 0210 	add.w	r2, r8, #16
 800c8e4:	46f2      	mov	sl, lr
 800c8e6:	2100      	movs	r1, #0
 800c8e8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c8ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c8f0:	fa1f f883 	uxth.w	r8, r3
 800c8f4:	fa11 f18b 	uxtah	r1, r1, fp
 800c8f8:	0c1b      	lsrs	r3, r3, #16
 800c8fa:	eba1 0808 	sub.w	r8, r1, r8
 800c8fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c902:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c906:	fa1f f888 	uxth.w	r8, r8
 800c90a:	1419      	asrs	r1, r3, #16
 800c90c:	454e      	cmp	r6, r9
 800c90e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c912:	f84a 3b04 	str.w	r3, [sl], #4
 800c916:	d8e7      	bhi.n	800c8e8 <__mdiff+0x80>
 800c918:	1b33      	subs	r3, r6, r4
 800c91a:	3b15      	subs	r3, #21
 800c91c:	f023 0303 	bic.w	r3, r3, #3
 800c920:	3304      	adds	r3, #4
 800c922:	3415      	adds	r4, #21
 800c924:	42a6      	cmp	r6, r4
 800c926:	bf38      	it	cc
 800c928:	2304      	movcc	r3, #4
 800c92a:	441d      	add	r5, r3
 800c92c:	4473      	add	r3, lr
 800c92e:	469e      	mov	lr, r3
 800c930:	462e      	mov	r6, r5
 800c932:	4566      	cmp	r6, ip
 800c934:	d30e      	bcc.n	800c954 <__mdiff+0xec>
 800c936:	f10c 0203 	add.w	r2, ip, #3
 800c93a:	1b52      	subs	r2, r2, r5
 800c93c:	f022 0203 	bic.w	r2, r2, #3
 800c940:	3d03      	subs	r5, #3
 800c942:	45ac      	cmp	ip, r5
 800c944:	bf38      	it	cc
 800c946:	2200      	movcc	r2, #0
 800c948:	441a      	add	r2, r3
 800c94a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c94e:	b17b      	cbz	r3, 800c970 <__mdiff+0x108>
 800c950:	6107      	str	r7, [r0, #16]
 800c952:	e7a3      	b.n	800c89c <__mdiff+0x34>
 800c954:	f856 8b04 	ldr.w	r8, [r6], #4
 800c958:	fa11 f288 	uxtah	r2, r1, r8
 800c95c:	1414      	asrs	r4, r2, #16
 800c95e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c962:	b292      	uxth	r2, r2
 800c964:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c968:	f84e 2b04 	str.w	r2, [lr], #4
 800c96c:	1421      	asrs	r1, r4, #16
 800c96e:	e7e0      	b.n	800c932 <__mdiff+0xca>
 800c970:	3f01      	subs	r7, #1
 800c972:	e7ea      	b.n	800c94a <__mdiff+0xe2>
 800c974:	0800dff0 	.word	0x0800dff0
 800c978:	0800e0e0 	.word	0x0800e0e0

0800c97c <__ulp>:
 800c97c:	b082      	sub	sp, #8
 800c97e:	ed8d 0b00 	vstr	d0, [sp]
 800c982:	9b01      	ldr	r3, [sp, #4]
 800c984:	4912      	ldr	r1, [pc, #72]	; (800c9d0 <__ulp+0x54>)
 800c986:	4019      	ands	r1, r3
 800c988:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c98c:	2900      	cmp	r1, #0
 800c98e:	dd05      	ble.n	800c99c <__ulp+0x20>
 800c990:	2200      	movs	r2, #0
 800c992:	460b      	mov	r3, r1
 800c994:	ec43 2b10 	vmov	d0, r2, r3
 800c998:	b002      	add	sp, #8
 800c99a:	4770      	bx	lr
 800c99c:	4249      	negs	r1, r1
 800c99e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c9a2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c9a6:	f04f 0200 	mov.w	r2, #0
 800c9aa:	f04f 0300 	mov.w	r3, #0
 800c9ae:	da04      	bge.n	800c9ba <__ulp+0x3e>
 800c9b0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c9b4:	fa41 f300 	asr.w	r3, r1, r0
 800c9b8:	e7ec      	b.n	800c994 <__ulp+0x18>
 800c9ba:	f1a0 0114 	sub.w	r1, r0, #20
 800c9be:	291e      	cmp	r1, #30
 800c9c0:	bfda      	itte	le
 800c9c2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c9c6:	fa20 f101 	lsrle.w	r1, r0, r1
 800c9ca:	2101      	movgt	r1, #1
 800c9cc:	460a      	mov	r2, r1
 800c9ce:	e7e1      	b.n	800c994 <__ulp+0x18>
 800c9d0:	7ff00000 	.word	0x7ff00000

0800c9d4 <__b2d>:
 800c9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9d6:	6905      	ldr	r5, [r0, #16]
 800c9d8:	f100 0714 	add.w	r7, r0, #20
 800c9dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c9e0:	1f2e      	subs	r6, r5, #4
 800c9e2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f7ff fd48 	bl	800c47c <__hi0bits>
 800c9ec:	f1c0 0320 	rsb	r3, r0, #32
 800c9f0:	280a      	cmp	r0, #10
 800c9f2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ca70 <__b2d+0x9c>
 800c9f6:	600b      	str	r3, [r1, #0]
 800c9f8:	dc14      	bgt.n	800ca24 <__b2d+0x50>
 800c9fa:	f1c0 0e0b 	rsb	lr, r0, #11
 800c9fe:	fa24 f10e 	lsr.w	r1, r4, lr
 800ca02:	42b7      	cmp	r7, r6
 800ca04:	ea41 030c 	orr.w	r3, r1, ip
 800ca08:	bf34      	ite	cc
 800ca0a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ca0e:	2100      	movcs	r1, #0
 800ca10:	3015      	adds	r0, #21
 800ca12:	fa04 f000 	lsl.w	r0, r4, r0
 800ca16:	fa21 f10e 	lsr.w	r1, r1, lr
 800ca1a:	ea40 0201 	orr.w	r2, r0, r1
 800ca1e:	ec43 2b10 	vmov	d0, r2, r3
 800ca22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca24:	42b7      	cmp	r7, r6
 800ca26:	bf3a      	itte	cc
 800ca28:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ca2c:	f1a5 0608 	subcc.w	r6, r5, #8
 800ca30:	2100      	movcs	r1, #0
 800ca32:	380b      	subs	r0, #11
 800ca34:	d017      	beq.n	800ca66 <__b2d+0x92>
 800ca36:	f1c0 0c20 	rsb	ip, r0, #32
 800ca3a:	fa04 f500 	lsl.w	r5, r4, r0
 800ca3e:	42be      	cmp	r6, r7
 800ca40:	fa21 f40c 	lsr.w	r4, r1, ip
 800ca44:	ea45 0504 	orr.w	r5, r5, r4
 800ca48:	bf8c      	ite	hi
 800ca4a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ca4e:	2400      	movls	r4, #0
 800ca50:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ca54:	fa01 f000 	lsl.w	r0, r1, r0
 800ca58:	fa24 f40c 	lsr.w	r4, r4, ip
 800ca5c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ca60:	ea40 0204 	orr.w	r2, r0, r4
 800ca64:	e7db      	b.n	800ca1e <__b2d+0x4a>
 800ca66:	ea44 030c 	orr.w	r3, r4, ip
 800ca6a:	460a      	mov	r2, r1
 800ca6c:	e7d7      	b.n	800ca1e <__b2d+0x4a>
 800ca6e:	bf00      	nop
 800ca70:	3ff00000 	.word	0x3ff00000

0800ca74 <__d2b>:
 800ca74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca78:	4689      	mov	r9, r1
 800ca7a:	2101      	movs	r1, #1
 800ca7c:	ec57 6b10 	vmov	r6, r7, d0
 800ca80:	4690      	mov	r8, r2
 800ca82:	f7ff fc09 	bl	800c298 <_Balloc>
 800ca86:	4604      	mov	r4, r0
 800ca88:	b930      	cbnz	r0, 800ca98 <__d2b+0x24>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	4b25      	ldr	r3, [pc, #148]	; (800cb24 <__d2b+0xb0>)
 800ca8e:	4826      	ldr	r0, [pc, #152]	; (800cb28 <__d2b+0xb4>)
 800ca90:	f240 310a 	movw	r1, #778	; 0x30a
 800ca94:	f000 fdc0 	bl	800d618 <__assert_func>
 800ca98:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ca9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800caa0:	bb35      	cbnz	r5, 800caf0 <__d2b+0x7c>
 800caa2:	2e00      	cmp	r6, #0
 800caa4:	9301      	str	r3, [sp, #4]
 800caa6:	d028      	beq.n	800cafa <__d2b+0x86>
 800caa8:	4668      	mov	r0, sp
 800caaa:	9600      	str	r6, [sp, #0]
 800caac:	f7ff fd06 	bl	800c4bc <__lo0bits>
 800cab0:	9900      	ldr	r1, [sp, #0]
 800cab2:	b300      	cbz	r0, 800caf6 <__d2b+0x82>
 800cab4:	9a01      	ldr	r2, [sp, #4]
 800cab6:	f1c0 0320 	rsb	r3, r0, #32
 800caba:	fa02 f303 	lsl.w	r3, r2, r3
 800cabe:	430b      	orrs	r3, r1
 800cac0:	40c2      	lsrs	r2, r0
 800cac2:	6163      	str	r3, [r4, #20]
 800cac4:	9201      	str	r2, [sp, #4]
 800cac6:	9b01      	ldr	r3, [sp, #4]
 800cac8:	61a3      	str	r3, [r4, #24]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	bf14      	ite	ne
 800cace:	2202      	movne	r2, #2
 800cad0:	2201      	moveq	r2, #1
 800cad2:	6122      	str	r2, [r4, #16]
 800cad4:	b1d5      	cbz	r5, 800cb0c <__d2b+0x98>
 800cad6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cada:	4405      	add	r5, r0
 800cadc:	f8c9 5000 	str.w	r5, [r9]
 800cae0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cae4:	f8c8 0000 	str.w	r0, [r8]
 800cae8:	4620      	mov	r0, r4
 800caea:	b003      	add	sp, #12
 800caec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800caf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800caf4:	e7d5      	b.n	800caa2 <__d2b+0x2e>
 800caf6:	6161      	str	r1, [r4, #20]
 800caf8:	e7e5      	b.n	800cac6 <__d2b+0x52>
 800cafa:	a801      	add	r0, sp, #4
 800cafc:	f7ff fcde 	bl	800c4bc <__lo0bits>
 800cb00:	9b01      	ldr	r3, [sp, #4]
 800cb02:	6163      	str	r3, [r4, #20]
 800cb04:	2201      	movs	r2, #1
 800cb06:	6122      	str	r2, [r4, #16]
 800cb08:	3020      	adds	r0, #32
 800cb0a:	e7e3      	b.n	800cad4 <__d2b+0x60>
 800cb0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb14:	f8c9 0000 	str.w	r0, [r9]
 800cb18:	6918      	ldr	r0, [r3, #16]
 800cb1a:	f7ff fcaf 	bl	800c47c <__hi0bits>
 800cb1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb22:	e7df      	b.n	800cae4 <__d2b+0x70>
 800cb24:	0800dff0 	.word	0x0800dff0
 800cb28:	0800e0e0 	.word	0x0800e0e0

0800cb2c <__ratio>:
 800cb2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb30:	4688      	mov	r8, r1
 800cb32:	4669      	mov	r1, sp
 800cb34:	4681      	mov	r9, r0
 800cb36:	f7ff ff4d 	bl	800c9d4 <__b2d>
 800cb3a:	a901      	add	r1, sp, #4
 800cb3c:	4640      	mov	r0, r8
 800cb3e:	ec55 4b10 	vmov	r4, r5, d0
 800cb42:	f7ff ff47 	bl	800c9d4 <__b2d>
 800cb46:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cb4a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cb4e:	eba3 0c02 	sub.w	ip, r3, r2
 800cb52:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cb56:	1a9b      	subs	r3, r3, r2
 800cb58:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cb5c:	ec51 0b10 	vmov	r0, r1, d0
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	bfd6      	itet	le
 800cb64:	460a      	movle	r2, r1
 800cb66:	462a      	movgt	r2, r5
 800cb68:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cb6c:	468b      	mov	fp, r1
 800cb6e:	462f      	mov	r7, r5
 800cb70:	bfd4      	ite	le
 800cb72:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cb76:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	ee10 2a10 	vmov	r2, s0
 800cb80:	465b      	mov	r3, fp
 800cb82:	4639      	mov	r1, r7
 800cb84:	f7f3 fe7a 	bl	800087c <__aeabi_ddiv>
 800cb88:	ec41 0b10 	vmov	d0, r0, r1
 800cb8c:	b003      	add	sp, #12
 800cb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb92 <__copybits>:
 800cb92:	3901      	subs	r1, #1
 800cb94:	b570      	push	{r4, r5, r6, lr}
 800cb96:	1149      	asrs	r1, r1, #5
 800cb98:	6914      	ldr	r4, [r2, #16]
 800cb9a:	3101      	adds	r1, #1
 800cb9c:	f102 0314 	add.w	r3, r2, #20
 800cba0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cba4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cba8:	1f05      	subs	r5, r0, #4
 800cbaa:	42a3      	cmp	r3, r4
 800cbac:	d30c      	bcc.n	800cbc8 <__copybits+0x36>
 800cbae:	1aa3      	subs	r3, r4, r2
 800cbb0:	3b11      	subs	r3, #17
 800cbb2:	f023 0303 	bic.w	r3, r3, #3
 800cbb6:	3211      	adds	r2, #17
 800cbb8:	42a2      	cmp	r2, r4
 800cbba:	bf88      	it	hi
 800cbbc:	2300      	movhi	r3, #0
 800cbbe:	4418      	add	r0, r3
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	4288      	cmp	r0, r1
 800cbc4:	d305      	bcc.n	800cbd2 <__copybits+0x40>
 800cbc6:	bd70      	pop	{r4, r5, r6, pc}
 800cbc8:	f853 6b04 	ldr.w	r6, [r3], #4
 800cbcc:	f845 6f04 	str.w	r6, [r5, #4]!
 800cbd0:	e7eb      	b.n	800cbaa <__copybits+0x18>
 800cbd2:	f840 3b04 	str.w	r3, [r0], #4
 800cbd6:	e7f4      	b.n	800cbc2 <__copybits+0x30>

0800cbd8 <__any_on>:
 800cbd8:	f100 0214 	add.w	r2, r0, #20
 800cbdc:	6900      	ldr	r0, [r0, #16]
 800cbde:	114b      	asrs	r3, r1, #5
 800cbe0:	4298      	cmp	r0, r3
 800cbe2:	b510      	push	{r4, lr}
 800cbe4:	db11      	blt.n	800cc0a <__any_on+0x32>
 800cbe6:	dd0a      	ble.n	800cbfe <__any_on+0x26>
 800cbe8:	f011 011f 	ands.w	r1, r1, #31
 800cbec:	d007      	beq.n	800cbfe <__any_on+0x26>
 800cbee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cbf2:	fa24 f001 	lsr.w	r0, r4, r1
 800cbf6:	fa00 f101 	lsl.w	r1, r0, r1
 800cbfa:	428c      	cmp	r4, r1
 800cbfc:	d10b      	bne.n	800cc16 <__any_on+0x3e>
 800cbfe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d803      	bhi.n	800cc0e <__any_on+0x36>
 800cc06:	2000      	movs	r0, #0
 800cc08:	bd10      	pop	{r4, pc}
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	e7f7      	b.n	800cbfe <__any_on+0x26>
 800cc0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc12:	2900      	cmp	r1, #0
 800cc14:	d0f5      	beq.n	800cc02 <__any_on+0x2a>
 800cc16:	2001      	movs	r0, #1
 800cc18:	e7f6      	b.n	800cc08 <__any_on+0x30>

0800cc1a <_calloc_r>:
 800cc1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc1c:	fba1 2402 	umull	r2, r4, r1, r2
 800cc20:	b94c      	cbnz	r4, 800cc36 <_calloc_r+0x1c>
 800cc22:	4611      	mov	r1, r2
 800cc24:	9201      	str	r2, [sp, #4]
 800cc26:	f000 f87b 	bl	800cd20 <_malloc_r>
 800cc2a:	9a01      	ldr	r2, [sp, #4]
 800cc2c:	4605      	mov	r5, r0
 800cc2e:	b930      	cbnz	r0, 800cc3e <_calloc_r+0x24>
 800cc30:	4628      	mov	r0, r5
 800cc32:	b003      	add	sp, #12
 800cc34:	bd30      	pop	{r4, r5, pc}
 800cc36:	220c      	movs	r2, #12
 800cc38:	6002      	str	r2, [r0, #0]
 800cc3a:	2500      	movs	r5, #0
 800cc3c:	e7f8      	b.n	800cc30 <_calloc_r+0x16>
 800cc3e:	4621      	mov	r1, r4
 800cc40:	f7fc fabe 	bl	80091c0 <memset>
 800cc44:	e7f4      	b.n	800cc30 <_calloc_r+0x16>
	...

0800cc48 <_free_r>:
 800cc48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc4a:	2900      	cmp	r1, #0
 800cc4c:	d044      	beq.n	800ccd8 <_free_r+0x90>
 800cc4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc52:	9001      	str	r0, [sp, #4]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	f1a1 0404 	sub.w	r4, r1, #4
 800cc5a:	bfb8      	it	lt
 800cc5c:	18e4      	addlt	r4, r4, r3
 800cc5e:	f000 fe6f 	bl	800d940 <__malloc_lock>
 800cc62:	4a1e      	ldr	r2, [pc, #120]	; (800ccdc <_free_r+0x94>)
 800cc64:	9801      	ldr	r0, [sp, #4]
 800cc66:	6813      	ldr	r3, [r2, #0]
 800cc68:	b933      	cbnz	r3, 800cc78 <_free_r+0x30>
 800cc6a:	6063      	str	r3, [r4, #4]
 800cc6c:	6014      	str	r4, [r2, #0]
 800cc6e:	b003      	add	sp, #12
 800cc70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc74:	f000 be6a 	b.w	800d94c <__malloc_unlock>
 800cc78:	42a3      	cmp	r3, r4
 800cc7a:	d908      	bls.n	800cc8e <_free_r+0x46>
 800cc7c:	6825      	ldr	r5, [r4, #0]
 800cc7e:	1961      	adds	r1, r4, r5
 800cc80:	428b      	cmp	r3, r1
 800cc82:	bf01      	itttt	eq
 800cc84:	6819      	ldreq	r1, [r3, #0]
 800cc86:	685b      	ldreq	r3, [r3, #4]
 800cc88:	1949      	addeq	r1, r1, r5
 800cc8a:	6021      	streq	r1, [r4, #0]
 800cc8c:	e7ed      	b.n	800cc6a <_free_r+0x22>
 800cc8e:	461a      	mov	r2, r3
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	b10b      	cbz	r3, 800cc98 <_free_r+0x50>
 800cc94:	42a3      	cmp	r3, r4
 800cc96:	d9fa      	bls.n	800cc8e <_free_r+0x46>
 800cc98:	6811      	ldr	r1, [r2, #0]
 800cc9a:	1855      	adds	r5, r2, r1
 800cc9c:	42a5      	cmp	r5, r4
 800cc9e:	d10b      	bne.n	800ccb8 <_free_r+0x70>
 800cca0:	6824      	ldr	r4, [r4, #0]
 800cca2:	4421      	add	r1, r4
 800cca4:	1854      	adds	r4, r2, r1
 800cca6:	42a3      	cmp	r3, r4
 800cca8:	6011      	str	r1, [r2, #0]
 800ccaa:	d1e0      	bne.n	800cc6e <_free_r+0x26>
 800ccac:	681c      	ldr	r4, [r3, #0]
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	6053      	str	r3, [r2, #4]
 800ccb2:	4421      	add	r1, r4
 800ccb4:	6011      	str	r1, [r2, #0]
 800ccb6:	e7da      	b.n	800cc6e <_free_r+0x26>
 800ccb8:	d902      	bls.n	800ccc0 <_free_r+0x78>
 800ccba:	230c      	movs	r3, #12
 800ccbc:	6003      	str	r3, [r0, #0]
 800ccbe:	e7d6      	b.n	800cc6e <_free_r+0x26>
 800ccc0:	6825      	ldr	r5, [r4, #0]
 800ccc2:	1961      	adds	r1, r4, r5
 800ccc4:	428b      	cmp	r3, r1
 800ccc6:	bf04      	itt	eq
 800ccc8:	6819      	ldreq	r1, [r3, #0]
 800ccca:	685b      	ldreq	r3, [r3, #4]
 800cccc:	6063      	str	r3, [r4, #4]
 800ccce:	bf04      	itt	eq
 800ccd0:	1949      	addeq	r1, r1, r5
 800ccd2:	6021      	streq	r1, [r4, #0]
 800ccd4:	6054      	str	r4, [r2, #4]
 800ccd6:	e7ca      	b.n	800cc6e <_free_r+0x26>
 800ccd8:	b003      	add	sp, #12
 800ccda:	bd30      	pop	{r4, r5, pc}
 800ccdc:	20001b84 	.word	0x20001b84

0800cce0 <sbrk_aligned>:
 800cce0:	b570      	push	{r4, r5, r6, lr}
 800cce2:	4e0e      	ldr	r6, [pc, #56]	; (800cd1c <sbrk_aligned+0x3c>)
 800cce4:	460c      	mov	r4, r1
 800cce6:	6831      	ldr	r1, [r6, #0]
 800cce8:	4605      	mov	r5, r0
 800ccea:	b911      	cbnz	r1, 800ccf2 <sbrk_aligned+0x12>
 800ccec:	f000 fb4c 	bl	800d388 <_sbrk_r>
 800ccf0:	6030      	str	r0, [r6, #0]
 800ccf2:	4621      	mov	r1, r4
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	f000 fb47 	bl	800d388 <_sbrk_r>
 800ccfa:	1c43      	adds	r3, r0, #1
 800ccfc:	d00a      	beq.n	800cd14 <sbrk_aligned+0x34>
 800ccfe:	1cc4      	adds	r4, r0, #3
 800cd00:	f024 0403 	bic.w	r4, r4, #3
 800cd04:	42a0      	cmp	r0, r4
 800cd06:	d007      	beq.n	800cd18 <sbrk_aligned+0x38>
 800cd08:	1a21      	subs	r1, r4, r0
 800cd0a:	4628      	mov	r0, r5
 800cd0c:	f000 fb3c 	bl	800d388 <_sbrk_r>
 800cd10:	3001      	adds	r0, #1
 800cd12:	d101      	bne.n	800cd18 <sbrk_aligned+0x38>
 800cd14:	f04f 34ff 	mov.w	r4, #4294967295
 800cd18:	4620      	mov	r0, r4
 800cd1a:	bd70      	pop	{r4, r5, r6, pc}
 800cd1c:	20001b88 	.word	0x20001b88

0800cd20 <_malloc_r>:
 800cd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd24:	1ccd      	adds	r5, r1, #3
 800cd26:	f025 0503 	bic.w	r5, r5, #3
 800cd2a:	3508      	adds	r5, #8
 800cd2c:	2d0c      	cmp	r5, #12
 800cd2e:	bf38      	it	cc
 800cd30:	250c      	movcc	r5, #12
 800cd32:	2d00      	cmp	r5, #0
 800cd34:	4607      	mov	r7, r0
 800cd36:	db01      	blt.n	800cd3c <_malloc_r+0x1c>
 800cd38:	42a9      	cmp	r1, r5
 800cd3a:	d905      	bls.n	800cd48 <_malloc_r+0x28>
 800cd3c:	230c      	movs	r3, #12
 800cd3e:	603b      	str	r3, [r7, #0]
 800cd40:	2600      	movs	r6, #0
 800cd42:	4630      	mov	r0, r6
 800cd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd48:	4e2e      	ldr	r6, [pc, #184]	; (800ce04 <_malloc_r+0xe4>)
 800cd4a:	f000 fdf9 	bl	800d940 <__malloc_lock>
 800cd4e:	6833      	ldr	r3, [r6, #0]
 800cd50:	461c      	mov	r4, r3
 800cd52:	bb34      	cbnz	r4, 800cda2 <_malloc_r+0x82>
 800cd54:	4629      	mov	r1, r5
 800cd56:	4638      	mov	r0, r7
 800cd58:	f7ff ffc2 	bl	800cce0 <sbrk_aligned>
 800cd5c:	1c43      	adds	r3, r0, #1
 800cd5e:	4604      	mov	r4, r0
 800cd60:	d14d      	bne.n	800cdfe <_malloc_r+0xde>
 800cd62:	6834      	ldr	r4, [r6, #0]
 800cd64:	4626      	mov	r6, r4
 800cd66:	2e00      	cmp	r6, #0
 800cd68:	d140      	bne.n	800cdec <_malloc_r+0xcc>
 800cd6a:	6823      	ldr	r3, [r4, #0]
 800cd6c:	4631      	mov	r1, r6
 800cd6e:	4638      	mov	r0, r7
 800cd70:	eb04 0803 	add.w	r8, r4, r3
 800cd74:	f000 fb08 	bl	800d388 <_sbrk_r>
 800cd78:	4580      	cmp	r8, r0
 800cd7a:	d13a      	bne.n	800cdf2 <_malloc_r+0xd2>
 800cd7c:	6821      	ldr	r1, [r4, #0]
 800cd7e:	3503      	adds	r5, #3
 800cd80:	1a6d      	subs	r5, r5, r1
 800cd82:	f025 0503 	bic.w	r5, r5, #3
 800cd86:	3508      	adds	r5, #8
 800cd88:	2d0c      	cmp	r5, #12
 800cd8a:	bf38      	it	cc
 800cd8c:	250c      	movcc	r5, #12
 800cd8e:	4629      	mov	r1, r5
 800cd90:	4638      	mov	r0, r7
 800cd92:	f7ff ffa5 	bl	800cce0 <sbrk_aligned>
 800cd96:	3001      	adds	r0, #1
 800cd98:	d02b      	beq.n	800cdf2 <_malloc_r+0xd2>
 800cd9a:	6823      	ldr	r3, [r4, #0]
 800cd9c:	442b      	add	r3, r5
 800cd9e:	6023      	str	r3, [r4, #0]
 800cda0:	e00e      	b.n	800cdc0 <_malloc_r+0xa0>
 800cda2:	6822      	ldr	r2, [r4, #0]
 800cda4:	1b52      	subs	r2, r2, r5
 800cda6:	d41e      	bmi.n	800cde6 <_malloc_r+0xc6>
 800cda8:	2a0b      	cmp	r2, #11
 800cdaa:	d916      	bls.n	800cdda <_malloc_r+0xba>
 800cdac:	1961      	adds	r1, r4, r5
 800cdae:	42a3      	cmp	r3, r4
 800cdb0:	6025      	str	r5, [r4, #0]
 800cdb2:	bf18      	it	ne
 800cdb4:	6059      	strne	r1, [r3, #4]
 800cdb6:	6863      	ldr	r3, [r4, #4]
 800cdb8:	bf08      	it	eq
 800cdba:	6031      	streq	r1, [r6, #0]
 800cdbc:	5162      	str	r2, [r4, r5]
 800cdbe:	604b      	str	r3, [r1, #4]
 800cdc0:	4638      	mov	r0, r7
 800cdc2:	f104 060b 	add.w	r6, r4, #11
 800cdc6:	f000 fdc1 	bl	800d94c <__malloc_unlock>
 800cdca:	f026 0607 	bic.w	r6, r6, #7
 800cdce:	1d23      	adds	r3, r4, #4
 800cdd0:	1af2      	subs	r2, r6, r3
 800cdd2:	d0b6      	beq.n	800cd42 <_malloc_r+0x22>
 800cdd4:	1b9b      	subs	r3, r3, r6
 800cdd6:	50a3      	str	r3, [r4, r2]
 800cdd8:	e7b3      	b.n	800cd42 <_malloc_r+0x22>
 800cdda:	6862      	ldr	r2, [r4, #4]
 800cddc:	42a3      	cmp	r3, r4
 800cdde:	bf0c      	ite	eq
 800cde0:	6032      	streq	r2, [r6, #0]
 800cde2:	605a      	strne	r2, [r3, #4]
 800cde4:	e7ec      	b.n	800cdc0 <_malloc_r+0xa0>
 800cde6:	4623      	mov	r3, r4
 800cde8:	6864      	ldr	r4, [r4, #4]
 800cdea:	e7b2      	b.n	800cd52 <_malloc_r+0x32>
 800cdec:	4634      	mov	r4, r6
 800cdee:	6876      	ldr	r6, [r6, #4]
 800cdf0:	e7b9      	b.n	800cd66 <_malloc_r+0x46>
 800cdf2:	230c      	movs	r3, #12
 800cdf4:	603b      	str	r3, [r7, #0]
 800cdf6:	4638      	mov	r0, r7
 800cdf8:	f000 fda8 	bl	800d94c <__malloc_unlock>
 800cdfc:	e7a1      	b.n	800cd42 <_malloc_r+0x22>
 800cdfe:	6025      	str	r5, [r4, #0]
 800ce00:	e7de      	b.n	800cdc0 <_malloc_r+0xa0>
 800ce02:	bf00      	nop
 800ce04:	20001b84 	.word	0x20001b84

0800ce08 <__ssputs_r>:
 800ce08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce0c:	688e      	ldr	r6, [r1, #8]
 800ce0e:	429e      	cmp	r6, r3
 800ce10:	4682      	mov	sl, r0
 800ce12:	460c      	mov	r4, r1
 800ce14:	4690      	mov	r8, r2
 800ce16:	461f      	mov	r7, r3
 800ce18:	d838      	bhi.n	800ce8c <__ssputs_r+0x84>
 800ce1a:	898a      	ldrh	r2, [r1, #12]
 800ce1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce20:	d032      	beq.n	800ce88 <__ssputs_r+0x80>
 800ce22:	6825      	ldr	r5, [r4, #0]
 800ce24:	6909      	ldr	r1, [r1, #16]
 800ce26:	eba5 0901 	sub.w	r9, r5, r1
 800ce2a:	6965      	ldr	r5, [r4, #20]
 800ce2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce34:	3301      	adds	r3, #1
 800ce36:	444b      	add	r3, r9
 800ce38:	106d      	asrs	r5, r5, #1
 800ce3a:	429d      	cmp	r5, r3
 800ce3c:	bf38      	it	cc
 800ce3e:	461d      	movcc	r5, r3
 800ce40:	0553      	lsls	r3, r2, #21
 800ce42:	d531      	bpl.n	800cea8 <__ssputs_r+0xa0>
 800ce44:	4629      	mov	r1, r5
 800ce46:	f7ff ff6b 	bl	800cd20 <_malloc_r>
 800ce4a:	4606      	mov	r6, r0
 800ce4c:	b950      	cbnz	r0, 800ce64 <__ssputs_r+0x5c>
 800ce4e:	230c      	movs	r3, #12
 800ce50:	f8ca 3000 	str.w	r3, [sl]
 800ce54:	89a3      	ldrh	r3, [r4, #12]
 800ce56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce5a:	81a3      	strh	r3, [r4, #12]
 800ce5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce64:	6921      	ldr	r1, [r4, #16]
 800ce66:	464a      	mov	r2, r9
 800ce68:	f7fc f99c 	bl	80091a4 <memcpy>
 800ce6c:	89a3      	ldrh	r3, [r4, #12]
 800ce6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce76:	81a3      	strh	r3, [r4, #12]
 800ce78:	6126      	str	r6, [r4, #16]
 800ce7a:	6165      	str	r5, [r4, #20]
 800ce7c:	444e      	add	r6, r9
 800ce7e:	eba5 0509 	sub.w	r5, r5, r9
 800ce82:	6026      	str	r6, [r4, #0]
 800ce84:	60a5      	str	r5, [r4, #8]
 800ce86:	463e      	mov	r6, r7
 800ce88:	42be      	cmp	r6, r7
 800ce8a:	d900      	bls.n	800ce8e <__ssputs_r+0x86>
 800ce8c:	463e      	mov	r6, r7
 800ce8e:	6820      	ldr	r0, [r4, #0]
 800ce90:	4632      	mov	r2, r6
 800ce92:	4641      	mov	r1, r8
 800ce94:	f000 fd3a 	bl	800d90c <memmove>
 800ce98:	68a3      	ldr	r3, [r4, #8]
 800ce9a:	1b9b      	subs	r3, r3, r6
 800ce9c:	60a3      	str	r3, [r4, #8]
 800ce9e:	6823      	ldr	r3, [r4, #0]
 800cea0:	4433      	add	r3, r6
 800cea2:	6023      	str	r3, [r4, #0]
 800cea4:	2000      	movs	r0, #0
 800cea6:	e7db      	b.n	800ce60 <__ssputs_r+0x58>
 800cea8:	462a      	mov	r2, r5
 800ceaa:	f000 fd55 	bl	800d958 <_realloc_r>
 800ceae:	4606      	mov	r6, r0
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	d1e1      	bne.n	800ce78 <__ssputs_r+0x70>
 800ceb4:	6921      	ldr	r1, [r4, #16]
 800ceb6:	4650      	mov	r0, sl
 800ceb8:	f7ff fec6 	bl	800cc48 <_free_r>
 800cebc:	e7c7      	b.n	800ce4e <__ssputs_r+0x46>
	...

0800cec0 <_svfiprintf_r>:
 800cec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cec4:	4698      	mov	r8, r3
 800cec6:	898b      	ldrh	r3, [r1, #12]
 800cec8:	061b      	lsls	r3, r3, #24
 800ceca:	b09d      	sub	sp, #116	; 0x74
 800cecc:	4607      	mov	r7, r0
 800cece:	460d      	mov	r5, r1
 800ced0:	4614      	mov	r4, r2
 800ced2:	d50e      	bpl.n	800cef2 <_svfiprintf_r+0x32>
 800ced4:	690b      	ldr	r3, [r1, #16]
 800ced6:	b963      	cbnz	r3, 800cef2 <_svfiprintf_r+0x32>
 800ced8:	2140      	movs	r1, #64	; 0x40
 800ceda:	f7ff ff21 	bl	800cd20 <_malloc_r>
 800cede:	6028      	str	r0, [r5, #0]
 800cee0:	6128      	str	r0, [r5, #16]
 800cee2:	b920      	cbnz	r0, 800ceee <_svfiprintf_r+0x2e>
 800cee4:	230c      	movs	r3, #12
 800cee6:	603b      	str	r3, [r7, #0]
 800cee8:	f04f 30ff 	mov.w	r0, #4294967295
 800ceec:	e0d1      	b.n	800d092 <_svfiprintf_r+0x1d2>
 800ceee:	2340      	movs	r3, #64	; 0x40
 800cef0:	616b      	str	r3, [r5, #20]
 800cef2:	2300      	movs	r3, #0
 800cef4:	9309      	str	r3, [sp, #36]	; 0x24
 800cef6:	2320      	movs	r3, #32
 800cef8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cefc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf00:	2330      	movs	r3, #48	; 0x30
 800cf02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d0ac <_svfiprintf_r+0x1ec>
 800cf06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf0a:	f04f 0901 	mov.w	r9, #1
 800cf0e:	4623      	mov	r3, r4
 800cf10:	469a      	mov	sl, r3
 800cf12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf16:	b10a      	cbz	r2, 800cf1c <_svfiprintf_r+0x5c>
 800cf18:	2a25      	cmp	r2, #37	; 0x25
 800cf1a:	d1f9      	bne.n	800cf10 <_svfiprintf_r+0x50>
 800cf1c:	ebba 0b04 	subs.w	fp, sl, r4
 800cf20:	d00b      	beq.n	800cf3a <_svfiprintf_r+0x7a>
 800cf22:	465b      	mov	r3, fp
 800cf24:	4622      	mov	r2, r4
 800cf26:	4629      	mov	r1, r5
 800cf28:	4638      	mov	r0, r7
 800cf2a:	f7ff ff6d 	bl	800ce08 <__ssputs_r>
 800cf2e:	3001      	adds	r0, #1
 800cf30:	f000 80aa 	beq.w	800d088 <_svfiprintf_r+0x1c8>
 800cf34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf36:	445a      	add	r2, fp
 800cf38:	9209      	str	r2, [sp, #36]	; 0x24
 800cf3a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	f000 80a2 	beq.w	800d088 <_svfiprintf_r+0x1c8>
 800cf44:	2300      	movs	r3, #0
 800cf46:	f04f 32ff 	mov.w	r2, #4294967295
 800cf4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf4e:	f10a 0a01 	add.w	sl, sl, #1
 800cf52:	9304      	str	r3, [sp, #16]
 800cf54:	9307      	str	r3, [sp, #28]
 800cf56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf5a:	931a      	str	r3, [sp, #104]	; 0x68
 800cf5c:	4654      	mov	r4, sl
 800cf5e:	2205      	movs	r2, #5
 800cf60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf64:	4851      	ldr	r0, [pc, #324]	; (800d0ac <_svfiprintf_r+0x1ec>)
 800cf66:	f7f3 f953 	bl	8000210 <memchr>
 800cf6a:	9a04      	ldr	r2, [sp, #16]
 800cf6c:	b9d8      	cbnz	r0, 800cfa6 <_svfiprintf_r+0xe6>
 800cf6e:	06d0      	lsls	r0, r2, #27
 800cf70:	bf44      	itt	mi
 800cf72:	2320      	movmi	r3, #32
 800cf74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf78:	0711      	lsls	r1, r2, #28
 800cf7a:	bf44      	itt	mi
 800cf7c:	232b      	movmi	r3, #43	; 0x2b
 800cf7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf82:	f89a 3000 	ldrb.w	r3, [sl]
 800cf86:	2b2a      	cmp	r3, #42	; 0x2a
 800cf88:	d015      	beq.n	800cfb6 <_svfiprintf_r+0xf6>
 800cf8a:	9a07      	ldr	r2, [sp, #28]
 800cf8c:	4654      	mov	r4, sl
 800cf8e:	2000      	movs	r0, #0
 800cf90:	f04f 0c0a 	mov.w	ip, #10
 800cf94:	4621      	mov	r1, r4
 800cf96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf9a:	3b30      	subs	r3, #48	; 0x30
 800cf9c:	2b09      	cmp	r3, #9
 800cf9e:	d94e      	bls.n	800d03e <_svfiprintf_r+0x17e>
 800cfa0:	b1b0      	cbz	r0, 800cfd0 <_svfiprintf_r+0x110>
 800cfa2:	9207      	str	r2, [sp, #28]
 800cfa4:	e014      	b.n	800cfd0 <_svfiprintf_r+0x110>
 800cfa6:	eba0 0308 	sub.w	r3, r0, r8
 800cfaa:	fa09 f303 	lsl.w	r3, r9, r3
 800cfae:	4313      	orrs	r3, r2
 800cfb0:	9304      	str	r3, [sp, #16]
 800cfb2:	46a2      	mov	sl, r4
 800cfb4:	e7d2      	b.n	800cf5c <_svfiprintf_r+0x9c>
 800cfb6:	9b03      	ldr	r3, [sp, #12]
 800cfb8:	1d19      	adds	r1, r3, #4
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	9103      	str	r1, [sp, #12]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	bfbb      	ittet	lt
 800cfc2:	425b      	neglt	r3, r3
 800cfc4:	f042 0202 	orrlt.w	r2, r2, #2
 800cfc8:	9307      	strge	r3, [sp, #28]
 800cfca:	9307      	strlt	r3, [sp, #28]
 800cfcc:	bfb8      	it	lt
 800cfce:	9204      	strlt	r2, [sp, #16]
 800cfd0:	7823      	ldrb	r3, [r4, #0]
 800cfd2:	2b2e      	cmp	r3, #46	; 0x2e
 800cfd4:	d10c      	bne.n	800cff0 <_svfiprintf_r+0x130>
 800cfd6:	7863      	ldrb	r3, [r4, #1]
 800cfd8:	2b2a      	cmp	r3, #42	; 0x2a
 800cfda:	d135      	bne.n	800d048 <_svfiprintf_r+0x188>
 800cfdc:	9b03      	ldr	r3, [sp, #12]
 800cfde:	1d1a      	adds	r2, r3, #4
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	9203      	str	r2, [sp, #12]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	bfb8      	it	lt
 800cfe8:	f04f 33ff 	movlt.w	r3, #4294967295
 800cfec:	3402      	adds	r4, #2
 800cfee:	9305      	str	r3, [sp, #20]
 800cff0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d0bc <_svfiprintf_r+0x1fc>
 800cff4:	7821      	ldrb	r1, [r4, #0]
 800cff6:	2203      	movs	r2, #3
 800cff8:	4650      	mov	r0, sl
 800cffa:	f7f3 f909 	bl	8000210 <memchr>
 800cffe:	b140      	cbz	r0, 800d012 <_svfiprintf_r+0x152>
 800d000:	2340      	movs	r3, #64	; 0x40
 800d002:	eba0 000a 	sub.w	r0, r0, sl
 800d006:	fa03 f000 	lsl.w	r0, r3, r0
 800d00a:	9b04      	ldr	r3, [sp, #16]
 800d00c:	4303      	orrs	r3, r0
 800d00e:	3401      	adds	r4, #1
 800d010:	9304      	str	r3, [sp, #16]
 800d012:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d016:	4826      	ldr	r0, [pc, #152]	; (800d0b0 <_svfiprintf_r+0x1f0>)
 800d018:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d01c:	2206      	movs	r2, #6
 800d01e:	f7f3 f8f7 	bl	8000210 <memchr>
 800d022:	2800      	cmp	r0, #0
 800d024:	d038      	beq.n	800d098 <_svfiprintf_r+0x1d8>
 800d026:	4b23      	ldr	r3, [pc, #140]	; (800d0b4 <_svfiprintf_r+0x1f4>)
 800d028:	bb1b      	cbnz	r3, 800d072 <_svfiprintf_r+0x1b2>
 800d02a:	9b03      	ldr	r3, [sp, #12]
 800d02c:	3307      	adds	r3, #7
 800d02e:	f023 0307 	bic.w	r3, r3, #7
 800d032:	3308      	adds	r3, #8
 800d034:	9303      	str	r3, [sp, #12]
 800d036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d038:	4433      	add	r3, r6
 800d03a:	9309      	str	r3, [sp, #36]	; 0x24
 800d03c:	e767      	b.n	800cf0e <_svfiprintf_r+0x4e>
 800d03e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d042:	460c      	mov	r4, r1
 800d044:	2001      	movs	r0, #1
 800d046:	e7a5      	b.n	800cf94 <_svfiprintf_r+0xd4>
 800d048:	2300      	movs	r3, #0
 800d04a:	3401      	adds	r4, #1
 800d04c:	9305      	str	r3, [sp, #20]
 800d04e:	4619      	mov	r1, r3
 800d050:	f04f 0c0a 	mov.w	ip, #10
 800d054:	4620      	mov	r0, r4
 800d056:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d05a:	3a30      	subs	r2, #48	; 0x30
 800d05c:	2a09      	cmp	r2, #9
 800d05e:	d903      	bls.n	800d068 <_svfiprintf_r+0x1a8>
 800d060:	2b00      	cmp	r3, #0
 800d062:	d0c5      	beq.n	800cff0 <_svfiprintf_r+0x130>
 800d064:	9105      	str	r1, [sp, #20]
 800d066:	e7c3      	b.n	800cff0 <_svfiprintf_r+0x130>
 800d068:	fb0c 2101 	mla	r1, ip, r1, r2
 800d06c:	4604      	mov	r4, r0
 800d06e:	2301      	movs	r3, #1
 800d070:	e7f0      	b.n	800d054 <_svfiprintf_r+0x194>
 800d072:	ab03      	add	r3, sp, #12
 800d074:	9300      	str	r3, [sp, #0]
 800d076:	462a      	mov	r2, r5
 800d078:	4b0f      	ldr	r3, [pc, #60]	; (800d0b8 <_svfiprintf_r+0x1f8>)
 800d07a:	a904      	add	r1, sp, #16
 800d07c:	4638      	mov	r0, r7
 800d07e:	f7fc f947 	bl	8009310 <_printf_float>
 800d082:	1c42      	adds	r2, r0, #1
 800d084:	4606      	mov	r6, r0
 800d086:	d1d6      	bne.n	800d036 <_svfiprintf_r+0x176>
 800d088:	89ab      	ldrh	r3, [r5, #12]
 800d08a:	065b      	lsls	r3, r3, #25
 800d08c:	f53f af2c 	bmi.w	800cee8 <_svfiprintf_r+0x28>
 800d090:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d092:	b01d      	add	sp, #116	; 0x74
 800d094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d098:	ab03      	add	r3, sp, #12
 800d09a:	9300      	str	r3, [sp, #0]
 800d09c:	462a      	mov	r2, r5
 800d09e:	4b06      	ldr	r3, [pc, #24]	; (800d0b8 <_svfiprintf_r+0x1f8>)
 800d0a0:	a904      	add	r1, sp, #16
 800d0a2:	4638      	mov	r0, r7
 800d0a4:	f7fc fbd8 	bl	8009858 <_printf_i>
 800d0a8:	e7eb      	b.n	800d082 <_svfiprintf_r+0x1c2>
 800d0aa:	bf00      	nop
 800d0ac:	0800e23c 	.word	0x0800e23c
 800d0b0:	0800e246 	.word	0x0800e246
 800d0b4:	08009311 	.word	0x08009311
 800d0b8:	0800ce09 	.word	0x0800ce09
 800d0bc:	0800e242 	.word	0x0800e242

0800d0c0 <__sfputc_r>:
 800d0c0:	6893      	ldr	r3, [r2, #8]
 800d0c2:	3b01      	subs	r3, #1
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	b410      	push	{r4}
 800d0c8:	6093      	str	r3, [r2, #8]
 800d0ca:	da08      	bge.n	800d0de <__sfputc_r+0x1e>
 800d0cc:	6994      	ldr	r4, [r2, #24]
 800d0ce:	42a3      	cmp	r3, r4
 800d0d0:	db01      	blt.n	800d0d6 <__sfputc_r+0x16>
 800d0d2:	290a      	cmp	r1, #10
 800d0d4:	d103      	bne.n	800d0de <__sfputc_r+0x1e>
 800d0d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0da:	f000 b9bd 	b.w	800d458 <__swbuf_r>
 800d0de:	6813      	ldr	r3, [r2, #0]
 800d0e0:	1c58      	adds	r0, r3, #1
 800d0e2:	6010      	str	r0, [r2, #0]
 800d0e4:	7019      	strb	r1, [r3, #0]
 800d0e6:	4608      	mov	r0, r1
 800d0e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0ec:	4770      	bx	lr

0800d0ee <__sfputs_r>:
 800d0ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0f0:	4606      	mov	r6, r0
 800d0f2:	460f      	mov	r7, r1
 800d0f4:	4614      	mov	r4, r2
 800d0f6:	18d5      	adds	r5, r2, r3
 800d0f8:	42ac      	cmp	r4, r5
 800d0fa:	d101      	bne.n	800d100 <__sfputs_r+0x12>
 800d0fc:	2000      	movs	r0, #0
 800d0fe:	e007      	b.n	800d110 <__sfputs_r+0x22>
 800d100:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d104:	463a      	mov	r2, r7
 800d106:	4630      	mov	r0, r6
 800d108:	f7ff ffda 	bl	800d0c0 <__sfputc_r>
 800d10c:	1c43      	adds	r3, r0, #1
 800d10e:	d1f3      	bne.n	800d0f8 <__sfputs_r+0xa>
 800d110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d114 <_vfiprintf_r>:
 800d114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d118:	460d      	mov	r5, r1
 800d11a:	b09d      	sub	sp, #116	; 0x74
 800d11c:	4614      	mov	r4, r2
 800d11e:	4698      	mov	r8, r3
 800d120:	4606      	mov	r6, r0
 800d122:	b118      	cbz	r0, 800d12c <_vfiprintf_r+0x18>
 800d124:	6983      	ldr	r3, [r0, #24]
 800d126:	b90b      	cbnz	r3, 800d12c <_vfiprintf_r+0x18>
 800d128:	f7fe fc88 	bl	800ba3c <__sinit>
 800d12c:	4b89      	ldr	r3, [pc, #548]	; (800d354 <_vfiprintf_r+0x240>)
 800d12e:	429d      	cmp	r5, r3
 800d130:	d11b      	bne.n	800d16a <_vfiprintf_r+0x56>
 800d132:	6875      	ldr	r5, [r6, #4]
 800d134:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d136:	07d9      	lsls	r1, r3, #31
 800d138:	d405      	bmi.n	800d146 <_vfiprintf_r+0x32>
 800d13a:	89ab      	ldrh	r3, [r5, #12]
 800d13c:	059a      	lsls	r2, r3, #22
 800d13e:	d402      	bmi.n	800d146 <_vfiprintf_r+0x32>
 800d140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d142:	f7ff f88c 	bl	800c25e <__retarget_lock_acquire_recursive>
 800d146:	89ab      	ldrh	r3, [r5, #12]
 800d148:	071b      	lsls	r3, r3, #28
 800d14a:	d501      	bpl.n	800d150 <_vfiprintf_r+0x3c>
 800d14c:	692b      	ldr	r3, [r5, #16]
 800d14e:	b9eb      	cbnz	r3, 800d18c <_vfiprintf_r+0x78>
 800d150:	4629      	mov	r1, r5
 800d152:	4630      	mov	r0, r6
 800d154:	f000 f9f2 	bl	800d53c <__swsetup_r>
 800d158:	b1c0      	cbz	r0, 800d18c <_vfiprintf_r+0x78>
 800d15a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d15c:	07dc      	lsls	r4, r3, #31
 800d15e:	d50e      	bpl.n	800d17e <_vfiprintf_r+0x6a>
 800d160:	f04f 30ff 	mov.w	r0, #4294967295
 800d164:	b01d      	add	sp, #116	; 0x74
 800d166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d16a:	4b7b      	ldr	r3, [pc, #492]	; (800d358 <_vfiprintf_r+0x244>)
 800d16c:	429d      	cmp	r5, r3
 800d16e:	d101      	bne.n	800d174 <_vfiprintf_r+0x60>
 800d170:	68b5      	ldr	r5, [r6, #8]
 800d172:	e7df      	b.n	800d134 <_vfiprintf_r+0x20>
 800d174:	4b79      	ldr	r3, [pc, #484]	; (800d35c <_vfiprintf_r+0x248>)
 800d176:	429d      	cmp	r5, r3
 800d178:	bf08      	it	eq
 800d17a:	68f5      	ldreq	r5, [r6, #12]
 800d17c:	e7da      	b.n	800d134 <_vfiprintf_r+0x20>
 800d17e:	89ab      	ldrh	r3, [r5, #12]
 800d180:	0598      	lsls	r0, r3, #22
 800d182:	d4ed      	bmi.n	800d160 <_vfiprintf_r+0x4c>
 800d184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d186:	f7ff f86b 	bl	800c260 <__retarget_lock_release_recursive>
 800d18a:	e7e9      	b.n	800d160 <_vfiprintf_r+0x4c>
 800d18c:	2300      	movs	r3, #0
 800d18e:	9309      	str	r3, [sp, #36]	; 0x24
 800d190:	2320      	movs	r3, #32
 800d192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d196:	f8cd 800c 	str.w	r8, [sp, #12]
 800d19a:	2330      	movs	r3, #48	; 0x30
 800d19c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d360 <_vfiprintf_r+0x24c>
 800d1a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1a4:	f04f 0901 	mov.w	r9, #1
 800d1a8:	4623      	mov	r3, r4
 800d1aa:	469a      	mov	sl, r3
 800d1ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1b0:	b10a      	cbz	r2, 800d1b6 <_vfiprintf_r+0xa2>
 800d1b2:	2a25      	cmp	r2, #37	; 0x25
 800d1b4:	d1f9      	bne.n	800d1aa <_vfiprintf_r+0x96>
 800d1b6:	ebba 0b04 	subs.w	fp, sl, r4
 800d1ba:	d00b      	beq.n	800d1d4 <_vfiprintf_r+0xc0>
 800d1bc:	465b      	mov	r3, fp
 800d1be:	4622      	mov	r2, r4
 800d1c0:	4629      	mov	r1, r5
 800d1c2:	4630      	mov	r0, r6
 800d1c4:	f7ff ff93 	bl	800d0ee <__sfputs_r>
 800d1c8:	3001      	adds	r0, #1
 800d1ca:	f000 80aa 	beq.w	800d322 <_vfiprintf_r+0x20e>
 800d1ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1d0:	445a      	add	r2, fp
 800d1d2:	9209      	str	r2, [sp, #36]	; 0x24
 800d1d4:	f89a 3000 	ldrb.w	r3, [sl]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	f000 80a2 	beq.w	800d322 <_vfiprintf_r+0x20e>
 800d1de:	2300      	movs	r3, #0
 800d1e0:	f04f 32ff 	mov.w	r2, #4294967295
 800d1e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1e8:	f10a 0a01 	add.w	sl, sl, #1
 800d1ec:	9304      	str	r3, [sp, #16]
 800d1ee:	9307      	str	r3, [sp, #28]
 800d1f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1f4:	931a      	str	r3, [sp, #104]	; 0x68
 800d1f6:	4654      	mov	r4, sl
 800d1f8:	2205      	movs	r2, #5
 800d1fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1fe:	4858      	ldr	r0, [pc, #352]	; (800d360 <_vfiprintf_r+0x24c>)
 800d200:	f7f3 f806 	bl	8000210 <memchr>
 800d204:	9a04      	ldr	r2, [sp, #16]
 800d206:	b9d8      	cbnz	r0, 800d240 <_vfiprintf_r+0x12c>
 800d208:	06d1      	lsls	r1, r2, #27
 800d20a:	bf44      	itt	mi
 800d20c:	2320      	movmi	r3, #32
 800d20e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d212:	0713      	lsls	r3, r2, #28
 800d214:	bf44      	itt	mi
 800d216:	232b      	movmi	r3, #43	; 0x2b
 800d218:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d21c:	f89a 3000 	ldrb.w	r3, [sl]
 800d220:	2b2a      	cmp	r3, #42	; 0x2a
 800d222:	d015      	beq.n	800d250 <_vfiprintf_r+0x13c>
 800d224:	9a07      	ldr	r2, [sp, #28]
 800d226:	4654      	mov	r4, sl
 800d228:	2000      	movs	r0, #0
 800d22a:	f04f 0c0a 	mov.w	ip, #10
 800d22e:	4621      	mov	r1, r4
 800d230:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d234:	3b30      	subs	r3, #48	; 0x30
 800d236:	2b09      	cmp	r3, #9
 800d238:	d94e      	bls.n	800d2d8 <_vfiprintf_r+0x1c4>
 800d23a:	b1b0      	cbz	r0, 800d26a <_vfiprintf_r+0x156>
 800d23c:	9207      	str	r2, [sp, #28]
 800d23e:	e014      	b.n	800d26a <_vfiprintf_r+0x156>
 800d240:	eba0 0308 	sub.w	r3, r0, r8
 800d244:	fa09 f303 	lsl.w	r3, r9, r3
 800d248:	4313      	orrs	r3, r2
 800d24a:	9304      	str	r3, [sp, #16]
 800d24c:	46a2      	mov	sl, r4
 800d24e:	e7d2      	b.n	800d1f6 <_vfiprintf_r+0xe2>
 800d250:	9b03      	ldr	r3, [sp, #12]
 800d252:	1d19      	adds	r1, r3, #4
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	9103      	str	r1, [sp, #12]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	bfbb      	ittet	lt
 800d25c:	425b      	neglt	r3, r3
 800d25e:	f042 0202 	orrlt.w	r2, r2, #2
 800d262:	9307      	strge	r3, [sp, #28]
 800d264:	9307      	strlt	r3, [sp, #28]
 800d266:	bfb8      	it	lt
 800d268:	9204      	strlt	r2, [sp, #16]
 800d26a:	7823      	ldrb	r3, [r4, #0]
 800d26c:	2b2e      	cmp	r3, #46	; 0x2e
 800d26e:	d10c      	bne.n	800d28a <_vfiprintf_r+0x176>
 800d270:	7863      	ldrb	r3, [r4, #1]
 800d272:	2b2a      	cmp	r3, #42	; 0x2a
 800d274:	d135      	bne.n	800d2e2 <_vfiprintf_r+0x1ce>
 800d276:	9b03      	ldr	r3, [sp, #12]
 800d278:	1d1a      	adds	r2, r3, #4
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	9203      	str	r2, [sp, #12]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	bfb8      	it	lt
 800d282:	f04f 33ff 	movlt.w	r3, #4294967295
 800d286:	3402      	adds	r4, #2
 800d288:	9305      	str	r3, [sp, #20]
 800d28a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d370 <_vfiprintf_r+0x25c>
 800d28e:	7821      	ldrb	r1, [r4, #0]
 800d290:	2203      	movs	r2, #3
 800d292:	4650      	mov	r0, sl
 800d294:	f7f2 ffbc 	bl	8000210 <memchr>
 800d298:	b140      	cbz	r0, 800d2ac <_vfiprintf_r+0x198>
 800d29a:	2340      	movs	r3, #64	; 0x40
 800d29c:	eba0 000a 	sub.w	r0, r0, sl
 800d2a0:	fa03 f000 	lsl.w	r0, r3, r0
 800d2a4:	9b04      	ldr	r3, [sp, #16]
 800d2a6:	4303      	orrs	r3, r0
 800d2a8:	3401      	adds	r4, #1
 800d2aa:	9304      	str	r3, [sp, #16]
 800d2ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2b0:	482c      	ldr	r0, [pc, #176]	; (800d364 <_vfiprintf_r+0x250>)
 800d2b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2b6:	2206      	movs	r2, #6
 800d2b8:	f7f2 ffaa 	bl	8000210 <memchr>
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	d03f      	beq.n	800d340 <_vfiprintf_r+0x22c>
 800d2c0:	4b29      	ldr	r3, [pc, #164]	; (800d368 <_vfiprintf_r+0x254>)
 800d2c2:	bb1b      	cbnz	r3, 800d30c <_vfiprintf_r+0x1f8>
 800d2c4:	9b03      	ldr	r3, [sp, #12]
 800d2c6:	3307      	adds	r3, #7
 800d2c8:	f023 0307 	bic.w	r3, r3, #7
 800d2cc:	3308      	adds	r3, #8
 800d2ce:	9303      	str	r3, [sp, #12]
 800d2d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2d2:	443b      	add	r3, r7
 800d2d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d2d6:	e767      	b.n	800d1a8 <_vfiprintf_r+0x94>
 800d2d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2dc:	460c      	mov	r4, r1
 800d2de:	2001      	movs	r0, #1
 800d2e0:	e7a5      	b.n	800d22e <_vfiprintf_r+0x11a>
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	3401      	adds	r4, #1
 800d2e6:	9305      	str	r3, [sp, #20]
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	f04f 0c0a 	mov.w	ip, #10
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2f4:	3a30      	subs	r2, #48	; 0x30
 800d2f6:	2a09      	cmp	r2, #9
 800d2f8:	d903      	bls.n	800d302 <_vfiprintf_r+0x1ee>
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d0c5      	beq.n	800d28a <_vfiprintf_r+0x176>
 800d2fe:	9105      	str	r1, [sp, #20]
 800d300:	e7c3      	b.n	800d28a <_vfiprintf_r+0x176>
 800d302:	fb0c 2101 	mla	r1, ip, r1, r2
 800d306:	4604      	mov	r4, r0
 800d308:	2301      	movs	r3, #1
 800d30a:	e7f0      	b.n	800d2ee <_vfiprintf_r+0x1da>
 800d30c:	ab03      	add	r3, sp, #12
 800d30e:	9300      	str	r3, [sp, #0]
 800d310:	462a      	mov	r2, r5
 800d312:	4b16      	ldr	r3, [pc, #88]	; (800d36c <_vfiprintf_r+0x258>)
 800d314:	a904      	add	r1, sp, #16
 800d316:	4630      	mov	r0, r6
 800d318:	f7fb fffa 	bl	8009310 <_printf_float>
 800d31c:	4607      	mov	r7, r0
 800d31e:	1c78      	adds	r0, r7, #1
 800d320:	d1d6      	bne.n	800d2d0 <_vfiprintf_r+0x1bc>
 800d322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d324:	07d9      	lsls	r1, r3, #31
 800d326:	d405      	bmi.n	800d334 <_vfiprintf_r+0x220>
 800d328:	89ab      	ldrh	r3, [r5, #12]
 800d32a:	059a      	lsls	r2, r3, #22
 800d32c:	d402      	bmi.n	800d334 <_vfiprintf_r+0x220>
 800d32e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d330:	f7fe ff96 	bl	800c260 <__retarget_lock_release_recursive>
 800d334:	89ab      	ldrh	r3, [r5, #12]
 800d336:	065b      	lsls	r3, r3, #25
 800d338:	f53f af12 	bmi.w	800d160 <_vfiprintf_r+0x4c>
 800d33c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d33e:	e711      	b.n	800d164 <_vfiprintf_r+0x50>
 800d340:	ab03      	add	r3, sp, #12
 800d342:	9300      	str	r3, [sp, #0]
 800d344:	462a      	mov	r2, r5
 800d346:	4b09      	ldr	r3, [pc, #36]	; (800d36c <_vfiprintf_r+0x258>)
 800d348:	a904      	add	r1, sp, #16
 800d34a:	4630      	mov	r0, r6
 800d34c:	f7fc fa84 	bl	8009858 <_printf_i>
 800d350:	e7e4      	b.n	800d31c <_vfiprintf_r+0x208>
 800d352:	bf00      	nop
 800d354:	0800e024 	.word	0x0800e024
 800d358:	0800e044 	.word	0x0800e044
 800d35c:	0800e004 	.word	0x0800e004
 800d360:	0800e23c 	.word	0x0800e23c
 800d364:	0800e246 	.word	0x0800e246
 800d368:	08009311 	.word	0x08009311
 800d36c:	0800d0ef 	.word	0x0800d0ef
 800d370:	0800e242 	.word	0x0800e242
 800d374:	00000000 	.word	0x00000000

0800d378 <nan>:
 800d378:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d380 <nan+0x8>
 800d37c:	4770      	bx	lr
 800d37e:	bf00      	nop
 800d380:	00000000 	.word	0x00000000
 800d384:	7ff80000 	.word	0x7ff80000

0800d388 <_sbrk_r>:
 800d388:	b538      	push	{r3, r4, r5, lr}
 800d38a:	4d06      	ldr	r5, [pc, #24]	; (800d3a4 <_sbrk_r+0x1c>)
 800d38c:	2300      	movs	r3, #0
 800d38e:	4604      	mov	r4, r0
 800d390:	4608      	mov	r0, r1
 800d392:	602b      	str	r3, [r5, #0]
 800d394:	f7f4 ff24 	bl	80021e0 <_sbrk>
 800d398:	1c43      	adds	r3, r0, #1
 800d39a:	d102      	bne.n	800d3a2 <_sbrk_r+0x1a>
 800d39c:	682b      	ldr	r3, [r5, #0]
 800d39e:	b103      	cbz	r3, 800d3a2 <_sbrk_r+0x1a>
 800d3a0:	6023      	str	r3, [r4, #0]
 800d3a2:	bd38      	pop	{r3, r4, r5, pc}
 800d3a4:	20001b8c 	.word	0x20001b8c

0800d3a8 <__sread>:
 800d3a8:	b510      	push	{r4, lr}
 800d3aa:	460c      	mov	r4, r1
 800d3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3b0:	f000 fb02 	bl	800d9b8 <_read_r>
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	bfab      	itete	ge
 800d3b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d3ba:	89a3      	ldrhlt	r3, [r4, #12]
 800d3bc:	181b      	addge	r3, r3, r0
 800d3be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d3c2:	bfac      	ite	ge
 800d3c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d3c6:	81a3      	strhlt	r3, [r4, #12]
 800d3c8:	bd10      	pop	{r4, pc}

0800d3ca <__swrite>:
 800d3ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3ce:	461f      	mov	r7, r3
 800d3d0:	898b      	ldrh	r3, [r1, #12]
 800d3d2:	05db      	lsls	r3, r3, #23
 800d3d4:	4605      	mov	r5, r0
 800d3d6:	460c      	mov	r4, r1
 800d3d8:	4616      	mov	r6, r2
 800d3da:	d505      	bpl.n	800d3e8 <__swrite+0x1e>
 800d3dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3e0:	2302      	movs	r3, #2
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	f000 fa1a 	bl	800d81c <_lseek_r>
 800d3e8:	89a3      	ldrh	r3, [r4, #12]
 800d3ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3f2:	81a3      	strh	r3, [r4, #12]
 800d3f4:	4632      	mov	r2, r6
 800d3f6:	463b      	mov	r3, r7
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3fe:	f000 b88b 	b.w	800d518 <_write_r>

0800d402 <__sseek>:
 800d402:	b510      	push	{r4, lr}
 800d404:	460c      	mov	r4, r1
 800d406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d40a:	f000 fa07 	bl	800d81c <_lseek_r>
 800d40e:	1c43      	adds	r3, r0, #1
 800d410:	89a3      	ldrh	r3, [r4, #12]
 800d412:	bf15      	itete	ne
 800d414:	6560      	strne	r0, [r4, #84]	; 0x54
 800d416:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d41a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d41e:	81a3      	strheq	r3, [r4, #12]
 800d420:	bf18      	it	ne
 800d422:	81a3      	strhne	r3, [r4, #12]
 800d424:	bd10      	pop	{r4, pc}

0800d426 <__sclose>:
 800d426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d42a:	f000 b913 	b.w	800d654 <_close_r>

0800d42e <strncmp>:
 800d42e:	b510      	push	{r4, lr}
 800d430:	b17a      	cbz	r2, 800d452 <strncmp+0x24>
 800d432:	4603      	mov	r3, r0
 800d434:	3901      	subs	r1, #1
 800d436:	1884      	adds	r4, r0, r2
 800d438:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d43c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d440:	4290      	cmp	r0, r2
 800d442:	d101      	bne.n	800d448 <strncmp+0x1a>
 800d444:	42a3      	cmp	r3, r4
 800d446:	d101      	bne.n	800d44c <strncmp+0x1e>
 800d448:	1a80      	subs	r0, r0, r2
 800d44a:	bd10      	pop	{r4, pc}
 800d44c:	2800      	cmp	r0, #0
 800d44e:	d1f3      	bne.n	800d438 <strncmp+0xa>
 800d450:	e7fa      	b.n	800d448 <strncmp+0x1a>
 800d452:	4610      	mov	r0, r2
 800d454:	e7f9      	b.n	800d44a <strncmp+0x1c>
	...

0800d458 <__swbuf_r>:
 800d458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d45a:	460e      	mov	r6, r1
 800d45c:	4614      	mov	r4, r2
 800d45e:	4605      	mov	r5, r0
 800d460:	b118      	cbz	r0, 800d46a <__swbuf_r+0x12>
 800d462:	6983      	ldr	r3, [r0, #24]
 800d464:	b90b      	cbnz	r3, 800d46a <__swbuf_r+0x12>
 800d466:	f7fe fae9 	bl	800ba3c <__sinit>
 800d46a:	4b21      	ldr	r3, [pc, #132]	; (800d4f0 <__swbuf_r+0x98>)
 800d46c:	429c      	cmp	r4, r3
 800d46e:	d12b      	bne.n	800d4c8 <__swbuf_r+0x70>
 800d470:	686c      	ldr	r4, [r5, #4]
 800d472:	69a3      	ldr	r3, [r4, #24]
 800d474:	60a3      	str	r3, [r4, #8]
 800d476:	89a3      	ldrh	r3, [r4, #12]
 800d478:	071a      	lsls	r2, r3, #28
 800d47a:	d52f      	bpl.n	800d4dc <__swbuf_r+0x84>
 800d47c:	6923      	ldr	r3, [r4, #16]
 800d47e:	b36b      	cbz	r3, 800d4dc <__swbuf_r+0x84>
 800d480:	6923      	ldr	r3, [r4, #16]
 800d482:	6820      	ldr	r0, [r4, #0]
 800d484:	1ac0      	subs	r0, r0, r3
 800d486:	6963      	ldr	r3, [r4, #20]
 800d488:	b2f6      	uxtb	r6, r6
 800d48a:	4283      	cmp	r3, r0
 800d48c:	4637      	mov	r7, r6
 800d48e:	dc04      	bgt.n	800d49a <__swbuf_r+0x42>
 800d490:	4621      	mov	r1, r4
 800d492:	4628      	mov	r0, r5
 800d494:	f000 f974 	bl	800d780 <_fflush_r>
 800d498:	bb30      	cbnz	r0, 800d4e8 <__swbuf_r+0x90>
 800d49a:	68a3      	ldr	r3, [r4, #8]
 800d49c:	3b01      	subs	r3, #1
 800d49e:	60a3      	str	r3, [r4, #8]
 800d4a0:	6823      	ldr	r3, [r4, #0]
 800d4a2:	1c5a      	adds	r2, r3, #1
 800d4a4:	6022      	str	r2, [r4, #0]
 800d4a6:	701e      	strb	r6, [r3, #0]
 800d4a8:	6963      	ldr	r3, [r4, #20]
 800d4aa:	3001      	adds	r0, #1
 800d4ac:	4283      	cmp	r3, r0
 800d4ae:	d004      	beq.n	800d4ba <__swbuf_r+0x62>
 800d4b0:	89a3      	ldrh	r3, [r4, #12]
 800d4b2:	07db      	lsls	r3, r3, #31
 800d4b4:	d506      	bpl.n	800d4c4 <__swbuf_r+0x6c>
 800d4b6:	2e0a      	cmp	r6, #10
 800d4b8:	d104      	bne.n	800d4c4 <__swbuf_r+0x6c>
 800d4ba:	4621      	mov	r1, r4
 800d4bc:	4628      	mov	r0, r5
 800d4be:	f000 f95f 	bl	800d780 <_fflush_r>
 800d4c2:	b988      	cbnz	r0, 800d4e8 <__swbuf_r+0x90>
 800d4c4:	4638      	mov	r0, r7
 800d4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4c8:	4b0a      	ldr	r3, [pc, #40]	; (800d4f4 <__swbuf_r+0x9c>)
 800d4ca:	429c      	cmp	r4, r3
 800d4cc:	d101      	bne.n	800d4d2 <__swbuf_r+0x7a>
 800d4ce:	68ac      	ldr	r4, [r5, #8]
 800d4d0:	e7cf      	b.n	800d472 <__swbuf_r+0x1a>
 800d4d2:	4b09      	ldr	r3, [pc, #36]	; (800d4f8 <__swbuf_r+0xa0>)
 800d4d4:	429c      	cmp	r4, r3
 800d4d6:	bf08      	it	eq
 800d4d8:	68ec      	ldreq	r4, [r5, #12]
 800d4da:	e7ca      	b.n	800d472 <__swbuf_r+0x1a>
 800d4dc:	4621      	mov	r1, r4
 800d4de:	4628      	mov	r0, r5
 800d4e0:	f000 f82c 	bl	800d53c <__swsetup_r>
 800d4e4:	2800      	cmp	r0, #0
 800d4e6:	d0cb      	beq.n	800d480 <__swbuf_r+0x28>
 800d4e8:	f04f 37ff 	mov.w	r7, #4294967295
 800d4ec:	e7ea      	b.n	800d4c4 <__swbuf_r+0x6c>
 800d4ee:	bf00      	nop
 800d4f0:	0800e024 	.word	0x0800e024
 800d4f4:	0800e044 	.word	0x0800e044
 800d4f8:	0800e004 	.word	0x0800e004

0800d4fc <__ascii_wctomb>:
 800d4fc:	b149      	cbz	r1, 800d512 <__ascii_wctomb+0x16>
 800d4fe:	2aff      	cmp	r2, #255	; 0xff
 800d500:	bf85      	ittet	hi
 800d502:	238a      	movhi	r3, #138	; 0x8a
 800d504:	6003      	strhi	r3, [r0, #0]
 800d506:	700a      	strbls	r2, [r1, #0]
 800d508:	f04f 30ff 	movhi.w	r0, #4294967295
 800d50c:	bf98      	it	ls
 800d50e:	2001      	movls	r0, #1
 800d510:	4770      	bx	lr
 800d512:	4608      	mov	r0, r1
 800d514:	4770      	bx	lr
	...

0800d518 <_write_r>:
 800d518:	b538      	push	{r3, r4, r5, lr}
 800d51a:	4d07      	ldr	r5, [pc, #28]	; (800d538 <_write_r+0x20>)
 800d51c:	4604      	mov	r4, r0
 800d51e:	4608      	mov	r0, r1
 800d520:	4611      	mov	r1, r2
 800d522:	2200      	movs	r2, #0
 800d524:	602a      	str	r2, [r5, #0]
 800d526:	461a      	mov	r2, r3
 800d528:	f7f4 fe09 	bl	800213e <_write>
 800d52c:	1c43      	adds	r3, r0, #1
 800d52e:	d102      	bne.n	800d536 <_write_r+0x1e>
 800d530:	682b      	ldr	r3, [r5, #0]
 800d532:	b103      	cbz	r3, 800d536 <_write_r+0x1e>
 800d534:	6023      	str	r3, [r4, #0]
 800d536:	bd38      	pop	{r3, r4, r5, pc}
 800d538:	20001b8c 	.word	0x20001b8c

0800d53c <__swsetup_r>:
 800d53c:	4b32      	ldr	r3, [pc, #200]	; (800d608 <__swsetup_r+0xcc>)
 800d53e:	b570      	push	{r4, r5, r6, lr}
 800d540:	681d      	ldr	r5, [r3, #0]
 800d542:	4606      	mov	r6, r0
 800d544:	460c      	mov	r4, r1
 800d546:	b125      	cbz	r5, 800d552 <__swsetup_r+0x16>
 800d548:	69ab      	ldr	r3, [r5, #24]
 800d54a:	b913      	cbnz	r3, 800d552 <__swsetup_r+0x16>
 800d54c:	4628      	mov	r0, r5
 800d54e:	f7fe fa75 	bl	800ba3c <__sinit>
 800d552:	4b2e      	ldr	r3, [pc, #184]	; (800d60c <__swsetup_r+0xd0>)
 800d554:	429c      	cmp	r4, r3
 800d556:	d10f      	bne.n	800d578 <__swsetup_r+0x3c>
 800d558:	686c      	ldr	r4, [r5, #4]
 800d55a:	89a3      	ldrh	r3, [r4, #12]
 800d55c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d560:	0719      	lsls	r1, r3, #28
 800d562:	d42c      	bmi.n	800d5be <__swsetup_r+0x82>
 800d564:	06dd      	lsls	r5, r3, #27
 800d566:	d411      	bmi.n	800d58c <__swsetup_r+0x50>
 800d568:	2309      	movs	r3, #9
 800d56a:	6033      	str	r3, [r6, #0]
 800d56c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d570:	81a3      	strh	r3, [r4, #12]
 800d572:	f04f 30ff 	mov.w	r0, #4294967295
 800d576:	e03e      	b.n	800d5f6 <__swsetup_r+0xba>
 800d578:	4b25      	ldr	r3, [pc, #148]	; (800d610 <__swsetup_r+0xd4>)
 800d57a:	429c      	cmp	r4, r3
 800d57c:	d101      	bne.n	800d582 <__swsetup_r+0x46>
 800d57e:	68ac      	ldr	r4, [r5, #8]
 800d580:	e7eb      	b.n	800d55a <__swsetup_r+0x1e>
 800d582:	4b24      	ldr	r3, [pc, #144]	; (800d614 <__swsetup_r+0xd8>)
 800d584:	429c      	cmp	r4, r3
 800d586:	bf08      	it	eq
 800d588:	68ec      	ldreq	r4, [r5, #12]
 800d58a:	e7e6      	b.n	800d55a <__swsetup_r+0x1e>
 800d58c:	0758      	lsls	r0, r3, #29
 800d58e:	d512      	bpl.n	800d5b6 <__swsetup_r+0x7a>
 800d590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d592:	b141      	cbz	r1, 800d5a6 <__swsetup_r+0x6a>
 800d594:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d598:	4299      	cmp	r1, r3
 800d59a:	d002      	beq.n	800d5a2 <__swsetup_r+0x66>
 800d59c:	4630      	mov	r0, r6
 800d59e:	f7ff fb53 	bl	800cc48 <_free_r>
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	6363      	str	r3, [r4, #52]	; 0x34
 800d5a6:	89a3      	ldrh	r3, [r4, #12]
 800d5a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d5ac:	81a3      	strh	r3, [r4, #12]
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	6063      	str	r3, [r4, #4]
 800d5b2:	6923      	ldr	r3, [r4, #16]
 800d5b4:	6023      	str	r3, [r4, #0]
 800d5b6:	89a3      	ldrh	r3, [r4, #12]
 800d5b8:	f043 0308 	orr.w	r3, r3, #8
 800d5bc:	81a3      	strh	r3, [r4, #12]
 800d5be:	6923      	ldr	r3, [r4, #16]
 800d5c0:	b94b      	cbnz	r3, 800d5d6 <__swsetup_r+0x9a>
 800d5c2:	89a3      	ldrh	r3, [r4, #12]
 800d5c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d5c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5cc:	d003      	beq.n	800d5d6 <__swsetup_r+0x9a>
 800d5ce:	4621      	mov	r1, r4
 800d5d0:	4630      	mov	r0, r6
 800d5d2:	f000 f95b 	bl	800d88c <__smakebuf_r>
 800d5d6:	89a0      	ldrh	r0, [r4, #12]
 800d5d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5dc:	f010 0301 	ands.w	r3, r0, #1
 800d5e0:	d00a      	beq.n	800d5f8 <__swsetup_r+0xbc>
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	60a3      	str	r3, [r4, #8]
 800d5e6:	6963      	ldr	r3, [r4, #20]
 800d5e8:	425b      	negs	r3, r3
 800d5ea:	61a3      	str	r3, [r4, #24]
 800d5ec:	6923      	ldr	r3, [r4, #16]
 800d5ee:	b943      	cbnz	r3, 800d602 <__swsetup_r+0xc6>
 800d5f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d5f4:	d1ba      	bne.n	800d56c <__swsetup_r+0x30>
 800d5f6:	bd70      	pop	{r4, r5, r6, pc}
 800d5f8:	0781      	lsls	r1, r0, #30
 800d5fa:	bf58      	it	pl
 800d5fc:	6963      	ldrpl	r3, [r4, #20]
 800d5fe:	60a3      	str	r3, [r4, #8]
 800d600:	e7f4      	b.n	800d5ec <__swsetup_r+0xb0>
 800d602:	2000      	movs	r0, #0
 800d604:	e7f7      	b.n	800d5f6 <__swsetup_r+0xba>
 800d606:	bf00      	nop
 800d608:	20000018 	.word	0x20000018
 800d60c:	0800e024 	.word	0x0800e024
 800d610:	0800e044 	.word	0x0800e044
 800d614:	0800e004 	.word	0x0800e004

0800d618 <__assert_func>:
 800d618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d61a:	4614      	mov	r4, r2
 800d61c:	461a      	mov	r2, r3
 800d61e:	4b09      	ldr	r3, [pc, #36]	; (800d644 <__assert_func+0x2c>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	4605      	mov	r5, r0
 800d624:	68d8      	ldr	r0, [r3, #12]
 800d626:	b14c      	cbz	r4, 800d63c <__assert_func+0x24>
 800d628:	4b07      	ldr	r3, [pc, #28]	; (800d648 <__assert_func+0x30>)
 800d62a:	9100      	str	r1, [sp, #0]
 800d62c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d630:	4906      	ldr	r1, [pc, #24]	; (800d64c <__assert_func+0x34>)
 800d632:	462b      	mov	r3, r5
 800d634:	f000 f8e0 	bl	800d7f8 <fiprintf>
 800d638:	f000 f9d0 	bl	800d9dc <abort>
 800d63c:	4b04      	ldr	r3, [pc, #16]	; (800d650 <__assert_func+0x38>)
 800d63e:	461c      	mov	r4, r3
 800d640:	e7f3      	b.n	800d62a <__assert_func+0x12>
 800d642:	bf00      	nop
 800d644:	20000018 	.word	0x20000018
 800d648:	0800e24d 	.word	0x0800e24d
 800d64c:	0800e25a 	.word	0x0800e25a
 800d650:	0800e288 	.word	0x0800e288

0800d654 <_close_r>:
 800d654:	b538      	push	{r3, r4, r5, lr}
 800d656:	4d06      	ldr	r5, [pc, #24]	; (800d670 <_close_r+0x1c>)
 800d658:	2300      	movs	r3, #0
 800d65a:	4604      	mov	r4, r0
 800d65c:	4608      	mov	r0, r1
 800d65e:	602b      	str	r3, [r5, #0]
 800d660:	f7f4 fd89 	bl	8002176 <_close>
 800d664:	1c43      	adds	r3, r0, #1
 800d666:	d102      	bne.n	800d66e <_close_r+0x1a>
 800d668:	682b      	ldr	r3, [r5, #0]
 800d66a:	b103      	cbz	r3, 800d66e <_close_r+0x1a>
 800d66c:	6023      	str	r3, [r4, #0]
 800d66e:	bd38      	pop	{r3, r4, r5, pc}
 800d670:	20001b8c 	.word	0x20001b8c

0800d674 <__sflush_r>:
 800d674:	898a      	ldrh	r2, [r1, #12]
 800d676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d67a:	4605      	mov	r5, r0
 800d67c:	0710      	lsls	r0, r2, #28
 800d67e:	460c      	mov	r4, r1
 800d680:	d458      	bmi.n	800d734 <__sflush_r+0xc0>
 800d682:	684b      	ldr	r3, [r1, #4]
 800d684:	2b00      	cmp	r3, #0
 800d686:	dc05      	bgt.n	800d694 <__sflush_r+0x20>
 800d688:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	dc02      	bgt.n	800d694 <__sflush_r+0x20>
 800d68e:	2000      	movs	r0, #0
 800d690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d696:	2e00      	cmp	r6, #0
 800d698:	d0f9      	beq.n	800d68e <__sflush_r+0x1a>
 800d69a:	2300      	movs	r3, #0
 800d69c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d6a0:	682f      	ldr	r7, [r5, #0]
 800d6a2:	602b      	str	r3, [r5, #0]
 800d6a4:	d032      	beq.n	800d70c <__sflush_r+0x98>
 800d6a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d6a8:	89a3      	ldrh	r3, [r4, #12]
 800d6aa:	075a      	lsls	r2, r3, #29
 800d6ac:	d505      	bpl.n	800d6ba <__sflush_r+0x46>
 800d6ae:	6863      	ldr	r3, [r4, #4]
 800d6b0:	1ac0      	subs	r0, r0, r3
 800d6b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d6b4:	b10b      	cbz	r3, 800d6ba <__sflush_r+0x46>
 800d6b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6b8:	1ac0      	subs	r0, r0, r3
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	4602      	mov	r2, r0
 800d6be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6c0:	6a21      	ldr	r1, [r4, #32]
 800d6c2:	4628      	mov	r0, r5
 800d6c4:	47b0      	blx	r6
 800d6c6:	1c43      	adds	r3, r0, #1
 800d6c8:	89a3      	ldrh	r3, [r4, #12]
 800d6ca:	d106      	bne.n	800d6da <__sflush_r+0x66>
 800d6cc:	6829      	ldr	r1, [r5, #0]
 800d6ce:	291d      	cmp	r1, #29
 800d6d0:	d82c      	bhi.n	800d72c <__sflush_r+0xb8>
 800d6d2:	4a2a      	ldr	r2, [pc, #168]	; (800d77c <__sflush_r+0x108>)
 800d6d4:	40ca      	lsrs	r2, r1
 800d6d6:	07d6      	lsls	r6, r2, #31
 800d6d8:	d528      	bpl.n	800d72c <__sflush_r+0xb8>
 800d6da:	2200      	movs	r2, #0
 800d6dc:	6062      	str	r2, [r4, #4]
 800d6de:	04d9      	lsls	r1, r3, #19
 800d6e0:	6922      	ldr	r2, [r4, #16]
 800d6e2:	6022      	str	r2, [r4, #0]
 800d6e4:	d504      	bpl.n	800d6f0 <__sflush_r+0x7c>
 800d6e6:	1c42      	adds	r2, r0, #1
 800d6e8:	d101      	bne.n	800d6ee <__sflush_r+0x7a>
 800d6ea:	682b      	ldr	r3, [r5, #0]
 800d6ec:	b903      	cbnz	r3, 800d6f0 <__sflush_r+0x7c>
 800d6ee:	6560      	str	r0, [r4, #84]	; 0x54
 800d6f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6f2:	602f      	str	r7, [r5, #0]
 800d6f4:	2900      	cmp	r1, #0
 800d6f6:	d0ca      	beq.n	800d68e <__sflush_r+0x1a>
 800d6f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6fc:	4299      	cmp	r1, r3
 800d6fe:	d002      	beq.n	800d706 <__sflush_r+0x92>
 800d700:	4628      	mov	r0, r5
 800d702:	f7ff faa1 	bl	800cc48 <_free_r>
 800d706:	2000      	movs	r0, #0
 800d708:	6360      	str	r0, [r4, #52]	; 0x34
 800d70a:	e7c1      	b.n	800d690 <__sflush_r+0x1c>
 800d70c:	6a21      	ldr	r1, [r4, #32]
 800d70e:	2301      	movs	r3, #1
 800d710:	4628      	mov	r0, r5
 800d712:	47b0      	blx	r6
 800d714:	1c41      	adds	r1, r0, #1
 800d716:	d1c7      	bne.n	800d6a8 <__sflush_r+0x34>
 800d718:	682b      	ldr	r3, [r5, #0]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d0c4      	beq.n	800d6a8 <__sflush_r+0x34>
 800d71e:	2b1d      	cmp	r3, #29
 800d720:	d001      	beq.n	800d726 <__sflush_r+0xb2>
 800d722:	2b16      	cmp	r3, #22
 800d724:	d101      	bne.n	800d72a <__sflush_r+0xb6>
 800d726:	602f      	str	r7, [r5, #0]
 800d728:	e7b1      	b.n	800d68e <__sflush_r+0x1a>
 800d72a:	89a3      	ldrh	r3, [r4, #12]
 800d72c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d730:	81a3      	strh	r3, [r4, #12]
 800d732:	e7ad      	b.n	800d690 <__sflush_r+0x1c>
 800d734:	690f      	ldr	r7, [r1, #16]
 800d736:	2f00      	cmp	r7, #0
 800d738:	d0a9      	beq.n	800d68e <__sflush_r+0x1a>
 800d73a:	0793      	lsls	r3, r2, #30
 800d73c:	680e      	ldr	r6, [r1, #0]
 800d73e:	bf08      	it	eq
 800d740:	694b      	ldreq	r3, [r1, #20]
 800d742:	600f      	str	r7, [r1, #0]
 800d744:	bf18      	it	ne
 800d746:	2300      	movne	r3, #0
 800d748:	eba6 0807 	sub.w	r8, r6, r7
 800d74c:	608b      	str	r3, [r1, #8]
 800d74e:	f1b8 0f00 	cmp.w	r8, #0
 800d752:	dd9c      	ble.n	800d68e <__sflush_r+0x1a>
 800d754:	6a21      	ldr	r1, [r4, #32]
 800d756:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d758:	4643      	mov	r3, r8
 800d75a:	463a      	mov	r2, r7
 800d75c:	4628      	mov	r0, r5
 800d75e:	47b0      	blx	r6
 800d760:	2800      	cmp	r0, #0
 800d762:	dc06      	bgt.n	800d772 <__sflush_r+0xfe>
 800d764:	89a3      	ldrh	r3, [r4, #12]
 800d766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d76a:	81a3      	strh	r3, [r4, #12]
 800d76c:	f04f 30ff 	mov.w	r0, #4294967295
 800d770:	e78e      	b.n	800d690 <__sflush_r+0x1c>
 800d772:	4407      	add	r7, r0
 800d774:	eba8 0800 	sub.w	r8, r8, r0
 800d778:	e7e9      	b.n	800d74e <__sflush_r+0xda>
 800d77a:	bf00      	nop
 800d77c:	20400001 	.word	0x20400001

0800d780 <_fflush_r>:
 800d780:	b538      	push	{r3, r4, r5, lr}
 800d782:	690b      	ldr	r3, [r1, #16]
 800d784:	4605      	mov	r5, r0
 800d786:	460c      	mov	r4, r1
 800d788:	b913      	cbnz	r3, 800d790 <_fflush_r+0x10>
 800d78a:	2500      	movs	r5, #0
 800d78c:	4628      	mov	r0, r5
 800d78e:	bd38      	pop	{r3, r4, r5, pc}
 800d790:	b118      	cbz	r0, 800d79a <_fflush_r+0x1a>
 800d792:	6983      	ldr	r3, [r0, #24]
 800d794:	b90b      	cbnz	r3, 800d79a <_fflush_r+0x1a>
 800d796:	f7fe f951 	bl	800ba3c <__sinit>
 800d79a:	4b14      	ldr	r3, [pc, #80]	; (800d7ec <_fflush_r+0x6c>)
 800d79c:	429c      	cmp	r4, r3
 800d79e:	d11b      	bne.n	800d7d8 <_fflush_r+0x58>
 800d7a0:	686c      	ldr	r4, [r5, #4]
 800d7a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d0ef      	beq.n	800d78a <_fflush_r+0xa>
 800d7aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d7ac:	07d0      	lsls	r0, r2, #31
 800d7ae:	d404      	bmi.n	800d7ba <_fflush_r+0x3a>
 800d7b0:	0599      	lsls	r1, r3, #22
 800d7b2:	d402      	bmi.n	800d7ba <_fflush_r+0x3a>
 800d7b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7b6:	f7fe fd52 	bl	800c25e <__retarget_lock_acquire_recursive>
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	4621      	mov	r1, r4
 800d7be:	f7ff ff59 	bl	800d674 <__sflush_r>
 800d7c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7c4:	07da      	lsls	r2, r3, #31
 800d7c6:	4605      	mov	r5, r0
 800d7c8:	d4e0      	bmi.n	800d78c <_fflush_r+0xc>
 800d7ca:	89a3      	ldrh	r3, [r4, #12]
 800d7cc:	059b      	lsls	r3, r3, #22
 800d7ce:	d4dd      	bmi.n	800d78c <_fflush_r+0xc>
 800d7d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7d2:	f7fe fd45 	bl	800c260 <__retarget_lock_release_recursive>
 800d7d6:	e7d9      	b.n	800d78c <_fflush_r+0xc>
 800d7d8:	4b05      	ldr	r3, [pc, #20]	; (800d7f0 <_fflush_r+0x70>)
 800d7da:	429c      	cmp	r4, r3
 800d7dc:	d101      	bne.n	800d7e2 <_fflush_r+0x62>
 800d7de:	68ac      	ldr	r4, [r5, #8]
 800d7e0:	e7df      	b.n	800d7a2 <_fflush_r+0x22>
 800d7e2:	4b04      	ldr	r3, [pc, #16]	; (800d7f4 <_fflush_r+0x74>)
 800d7e4:	429c      	cmp	r4, r3
 800d7e6:	bf08      	it	eq
 800d7e8:	68ec      	ldreq	r4, [r5, #12]
 800d7ea:	e7da      	b.n	800d7a2 <_fflush_r+0x22>
 800d7ec:	0800e024 	.word	0x0800e024
 800d7f0:	0800e044 	.word	0x0800e044
 800d7f4:	0800e004 	.word	0x0800e004

0800d7f8 <fiprintf>:
 800d7f8:	b40e      	push	{r1, r2, r3}
 800d7fa:	b503      	push	{r0, r1, lr}
 800d7fc:	4601      	mov	r1, r0
 800d7fe:	ab03      	add	r3, sp, #12
 800d800:	4805      	ldr	r0, [pc, #20]	; (800d818 <fiprintf+0x20>)
 800d802:	f853 2b04 	ldr.w	r2, [r3], #4
 800d806:	6800      	ldr	r0, [r0, #0]
 800d808:	9301      	str	r3, [sp, #4]
 800d80a:	f7ff fc83 	bl	800d114 <_vfiprintf_r>
 800d80e:	b002      	add	sp, #8
 800d810:	f85d eb04 	ldr.w	lr, [sp], #4
 800d814:	b003      	add	sp, #12
 800d816:	4770      	bx	lr
 800d818:	20000018 	.word	0x20000018

0800d81c <_lseek_r>:
 800d81c:	b538      	push	{r3, r4, r5, lr}
 800d81e:	4d07      	ldr	r5, [pc, #28]	; (800d83c <_lseek_r+0x20>)
 800d820:	4604      	mov	r4, r0
 800d822:	4608      	mov	r0, r1
 800d824:	4611      	mov	r1, r2
 800d826:	2200      	movs	r2, #0
 800d828:	602a      	str	r2, [r5, #0]
 800d82a:	461a      	mov	r2, r3
 800d82c:	f7f4 fcca 	bl	80021c4 <_lseek>
 800d830:	1c43      	adds	r3, r0, #1
 800d832:	d102      	bne.n	800d83a <_lseek_r+0x1e>
 800d834:	682b      	ldr	r3, [r5, #0]
 800d836:	b103      	cbz	r3, 800d83a <_lseek_r+0x1e>
 800d838:	6023      	str	r3, [r4, #0]
 800d83a:	bd38      	pop	{r3, r4, r5, pc}
 800d83c:	20001b8c 	.word	0x20001b8c

0800d840 <__swhatbuf_r>:
 800d840:	b570      	push	{r4, r5, r6, lr}
 800d842:	460e      	mov	r6, r1
 800d844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d848:	2900      	cmp	r1, #0
 800d84a:	b096      	sub	sp, #88	; 0x58
 800d84c:	4614      	mov	r4, r2
 800d84e:	461d      	mov	r5, r3
 800d850:	da08      	bge.n	800d864 <__swhatbuf_r+0x24>
 800d852:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d856:	2200      	movs	r2, #0
 800d858:	602a      	str	r2, [r5, #0]
 800d85a:	061a      	lsls	r2, r3, #24
 800d85c:	d410      	bmi.n	800d880 <__swhatbuf_r+0x40>
 800d85e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d862:	e00e      	b.n	800d882 <__swhatbuf_r+0x42>
 800d864:	466a      	mov	r2, sp
 800d866:	f000 f8c1 	bl	800d9ec <_fstat_r>
 800d86a:	2800      	cmp	r0, #0
 800d86c:	dbf1      	blt.n	800d852 <__swhatbuf_r+0x12>
 800d86e:	9a01      	ldr	r2, [sp, #4]
 800d870:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d874:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d878:	425a      	negs	r2, r3
 800d87a:	415a      	adcs	r2, r3
 800d87c:	602a      	str	r2, [r5, #0]
 800d87e:	e7ee      	b.n	800d85e <__swhatbuf_r+0x1e>
 800d880:	2340      	movs	r3, #64	; 0x40
 800d882:	2000      	movs	r0, #0
 800d884:	6023      	str	r3, [r4, #0]
 800d886:	b016      	add	sp, #88	; 0x58
 800d888:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d88c <__smakebuf_r>:
 800d88c:	898b      	ldrh	r3, [r1, #12]
 800d88e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d890:	079d      	lsls	r5, r3, #30
 800d892:	4606      	mov	r6, r0
 800d894:	460c      	mov	r4, r1
 800d896:	d507      	bpl.n	800d8a8 <__smakebuf_r+0x1c>
 800d898:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d89c:	6023      	str	r3, [r4, #0]
 800d89e:	6123      	str	r3, [r4, #16]
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	6163      	str	r3, [r4, #20]
 800d8a4:	b002      	add	sp, #8
 800d8a6:	bd70      	pop	{r4, r5, r6, pc}
 800d8a8:	ab01      	add	r3, sp, #4
 800d8aa:	466a      	mov	r2, sp
 800d8ac:	f7ff ffc8 	bl	800d840 <__swhatbuf_r>
 800d8b0:	9900      	ldr	r1, [sp, #0]
 800d8b2:	4605      	mov	r5, r0
 800d8b4:	4630      	mov	r0, r6
 800d8b6:	f7ff fa33 	bl	800cd20 <_malloc_r>
 800d8ba:	b948      	cbnz	r0, 800d8d0 <__smakebuf_r+0x44>
 800d8bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8c0:	059a      	lsls	r2, r3, #22
 800d8c2:	d4ef      	bmi.n	800d8a4 <__smakebuf_r+0x18>
 800d8c4:	f023 0303 	bic.w	r3, r3, #3
 800d8c8:	f043 0302 	orr.w	r3, r3, #2
 800d8cc:	81a3      	strh	r3, [r4, #12]
 800d8ce:	e7e3      	b.n	800d898 <__smakebuf_r+0xc>
 800d8d0:	4b0d      	ldr	r3, [pc, #52]	; (800d908 <__smakebuf_r+0x7c>)
 800d8d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800d8d4:	89a3      	ldrh	r3, [r4, #12]
 800d8d6:	6020      	str	r0, [r4, #0]
 800d8d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8dc:	81a3      	strh	r3, [r4, #12]
 800d8de:	9b00      	ldr	r3, [sp, #0]
 800d8e0:	6163      	str	r3, [r4, #20]
 800d8e2:	9b01      	ldr	r3, [sp, #4]
 800d8e4:	6120      	str	r0, [r4, #16]
 800d8e6:	b15b      	cbz	r3, 800d900 <__smakebuf_r+0x74>
 800d8e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8ec:	4630      	mov	r0, r6
 800d8ee:	f000 f88f 	bl	800da10 <_isatty_r>
 800d8f2:	b128      	cbz	r0, 800d900 <__smakebuf_r+0x74>
 800d8f4:	89a3      	ldrh	r3, [r4, #12]
 800d8f6:	f023 0303 	bic.w	r3, r3, #3
 800d8fa:	f043 0301 	orr.w	r3, r3, #1
 800d8fe:	81a3      	strh	r3, [r4, #12]
 800d900:	89a0      	ldrh	r0, [r4, #12]
 800d902:	4305      	orrs	r5, r0
 800d904:	81a5      	strh	r5, [r4, #12]
 800d906:	e7cd      	b.n	800d8a4 <__smakebuf_r+0x18>
 800d908:	0800b9d5 	.word	0x0800b9d5

0800d90c <memmove>:
 800d90c:	4288      	cmp	r0, r1
 800d90e:	b510      	push	{r4, lr}
 800d910:	eb01 0402 	add.w	r4, r1, r2
 800d914:	d902      	bls.n	800d91c <memmove+0x10>
 800d916:	4284      	cmp	r4, r0
 800d918:	4623      	mov	r3, r4
 800d91a:	d807      	bhi.n	800d92c <memmove+0x20>
 800d91c:	1e43      	subs	r3, r0, #1
 800d91e:	42a1      	cmp	r1, r4
 800d920:	d008      	beq.n	800d934 <memmove+0x28>
 800d922:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d926:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d92a:	e7f8      	b.n	800d91e <memmove+0x12>
 800d92c:	4402      	add	r2, r0
 800d92e:	4601      	mov	r1, r0
 800d930:	428a      	cmp	r2, r1
 800d932:	d100      	bne.n	800d936 <memmove+0x2a>
 800d934:	bd10      	pop	{r4, pc}
 800d936:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d93a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d93e:	e7f7      	b.n	800d930 <memmove+0x24>

0800d940 <__malloc_lock>:
 800d940:	4801      	ldr	r0, [pc, #4]	; (800d948 <__malloc_lock+0x8>)
 800d942:	f7fe bc8c 	b.w	800c25e <__retarget_lock_acquire_recursive>
 800d946:	bf00      	nop
 800d948:	20001b80 	.word	0x20001b80

0800d94c <__malloc_unlock>:
 800d94c:	4801      	ldr	r0, [pc, #4]	; (800d954 <__malloc_unlock+0x8>)
 800d94e:	f7fe bc87 	b.w	800c260 <__retarget_lock_release_recursive>
 800d952:	bf00      	nop
 800d954:	20001b80 	.word	0x20001b80

0800d958 <_realloc_r>:
 800d958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d95c:	4680      	mov	r8, r0
 800d95e:	4614      	mov	r4, r2
 800d960:	460e      	mov	r6, r1
 800d962:	b921      	cbnz	r1, 800d96e <_realloc_r+0x16>
 800d964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d968:	4611      	mov	r1, r2
 800d96a:	f7ff b9d9 	b.w	800cd20 <_malloc_r>
 800d96e:	b92a      	cbnz	r2, 800d97c <_realloc_r+0x24>
 800d970:	f7ff f96a 	bl	800cc48 <_free_r>
 800d974:	4625      	mov	r5, r4
 800d976:	4628      	mov	r0, r5
 800d978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d97c:	f000 f858 	bl	800da30 <_malloc_usable_size_r>
 800d980:	4284      	cmp	r4, r0
 800d982:	4607      	mov	r7, r0
 800d984:	d802      	bhi.n	800d98c <_realloc_r+0x34>
 800d986:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d98a:	d812      	bhi.n	800d9b2 <_realloc_r+0x5a>
 800d98c:	4621      	mov	r1, r4
 800d98e:	4640      	mov	r0, r8
 800d990:	f7ff f9c6 	bl	800cd20 <_malloc_r>
 800d994:	4605      	mov	r5, r0
 800d996:	2800      	cmp	r0, #0
 800d998:	d0ed      	beq.n	800d976 <_realloc_r+0x1e>
 800d99a:	42bc      	cmp	r4, r7
 800d99c:	4622      	mov	r2, r4
 800d99e:	4631      	mov	r1, r6
 800d9a0:	bf28      	it	cs
 800d9a2:	463a      	movcs	r2, r7
 800d9a4:	f7fb fbfe 	bl	80091a4 <memcpy>
 800d9a8:	4631      	mov	r1, r6
 800d9aa:	4640      	mov	r0, r8
 800d9ac:	f7ff f94c 	bl	800cc48 <_free_r>
 800d9b0:	e7e1      	b.n	800d976 <_realloc_r+0x1e>
 800d9b2:	4635      	mov	r5, r6
 800d9b4:	e7df      	b.n	800d976 <_realloc_r+0x1e>
	...

0800d9b8 <_read_r>:
 800d9b8:	b538      	push	{r3, r4, r5, lr}
 800d9ba:	4d07      	ldr	r5, [pc, #28]	; (800d9d8 <_read_r+0x20>)
 800d9bc:	4604      	mov	r4, r0
 800d9be:	4608      	mov	r0, r1
 800d9c0:	4611      	mov	r1, r2
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	602a      	str	r2, [r5, #0]
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	f7f4 fb9c 	bl	8002104 <_read>
 800d9cc:	1c43      	adds	r3, r0, #1
 800d9ce:	d102      	bne.n	800d9d6 <_read_r+0x1e>
 800d9d0:	682b      	ldr	r3, [r5, #0]
 800d9d2:	b103      	cbz	r3, 800d9d6 <_read_r+0x1e>
 800d9d4:	6023      	str	r3, [r4, #0]
 800d9d6:	bd38      	pop	{r3, r4, r5, pc}
 800d9d8:	20001b8c 	.word	0x20001b8c

0800d9dc <abort>:
 800d9dc:	b508      	push	{r3, lr}
 800d9de:	2006      	movs	r0, #6
 800d9e0:	f000 f856 	bl	800da90 <raise>
 800d9e4:	2001      	movs	r0, #1
 800d9e6:	f7f4 fb83 	bl	80020f0 <_exit>
	...

0800d9ec <_fstat_r>:
 800d9ec:	b538      	push	{r3, r4, r5, lr}
 800d9ee:	4d07      	ldr	r5, [pc, #28]	; (800da0c <_fstat_r+0x20>)
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	4608      	mov	r0, r1
 800d9f6:	4611      	mov	r1, r2
 800d9f8:	602b      	str	r3, [r5, #0]
 800d9fa:	f7f4 fbc8 	bl	800218e <_fstat>
 800d9fe:	1c43      	adds	r3, r0, #1
 800da00:	d102      	bne.n	800da08 <_fstat_r+0x1c>
 800da02:	682b      	ldr	r3, [r5, #0]
 800da04:	b103      	cbz	r3, 800da08 <_fstat_r+0x1c>
 800da06:	6023      	str	r3, [r4, #0]
 800da08:	bd38      	pop	{r3, r4, r5, pc}
 800da0a:	bf00      	nop
 800da0c:	20001b8c 	.word	0x20001b8c

0800da10 <_isatty_r>:
 800da10:	b538      	push	{r3, r4, r5, lr}
 800da12:	4d06      	ldr	r5, [pc, #24]	; (800da2c <_isatty_r+0x1c>)
 800da14:	2300      	movs	r3, #0
 800da16:	4604      	mov	r4, r0
 800da18:	4608      	mov	r0, r1
 800da1a:	602b      	str	r3, [r5, #0]
 800da1c:	f7f4 fbc7 	bl	80021ae <_isatty>
 800da20:	1c43      	adds	r3, r0, #1
 800da22:	d102      	bne.n	800da2a <_isatty_r+0x1a>
 800da24:	682b      	ldr	r3, [r5, #0]
 800da26:	b103      	cbz	r3, 800da2a <_isatty_r+0x1a>
 800da28:	6023      	str	r3, [r4, #0]
 800da2a:	bd38      	pop	{r3, r4, r5, pc}
 800da2c:	20001b8c 	.word	0x20001b8c

0800da30 <_malloc_usable_size_r>:
 800da30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da34:	1f18      	subs	r0, r3, #4
 800da36:	2b00      	cmp	r3, #0
 800da38:	bfbc      	itt	lt
 800da3a:	580b      	ldrlt	r3, [r1, r0]
 800da3c:	18c0      	addlt	r0, r0, r3
 800da3e:	4770      	bx	lr

0800da40 <_raise_r>:
 800da40:	291f      	cmp	r1, #31
 800da42:	b538      	push	{r3, r4, r5, lr}
 800da44:	4604      	mov	r4, r0
 800da46:	460d      	mov	r5, r1
 800da48:	d904      	bls.n	800da54 <_raise_r+0x14>
 800da4a:	2316      	movs	r3, #22
 800da4c:	6003      	str	r3, [r0, #0]
 800da4e:	f04f 30ff 	mov.w	r0, #4294967295
 800da52:	bd38      	pop	{r3, r4, r5, pc}
 800da54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da56:	b112      	cbz	r2, 800da5e <_raise_r+0x1e>
 800da58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da5c:	b94b      	cbnz	r3, 800da72 <_raise_r+0x32>
 800da5e:	4620      	mov	r0, r4
 800da60:	f000 f830 	bl	800dac4 <_getpid_r>
 800da64:	462a      	mov	r2, r5
 800da66:	4601      	mov	r1, r0
 800da68:	4620      	mov	r0, r4
 800da6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da6e:	f000 b817 	b.w	800daa0 <_kill_r>
 800da72:	2b01      	cmp	r3, #1
 800da74:	d00a      	beq.n	800da8c <_raise_r+0x4c>
 800da76:	1c59      	adds	r1, r3, #1
 800da78:	d103      	bne.n	800da82 <_raise_r+0x42>
 800da7a:	2316      	movs	r3, #22
 800da7c:	6003      	str	r3, [r0, #0]
 800da7e:	2001      	movs	r0, #1
 800da80:	e7e7      	b.n	800da52 <_raise_r+0x12>
 800da82:	2400      	movs	r4, #0
 800da84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da88:	4628      	mov	r0, r5
 800da8a:	4798      	blx	r3
 800da8c:	2000      	movs	r0, #0
 800da8e:	e7e0      	b.n	800da52 <_raise_r+0x12>

0800da90 <raise>:
 800da90:	4b02      	ldr	r3, [pc, #8]	; (800da9c <raise+0xc>)
 800da92:	4601      	mov	r1, r0
 800da94:	6818      	ldr	r0, [r3, #0]
 800da96:	f7ff bfd3 	b.w	800da40 <_raise_r>
 800da9a:	bf00      	nop
 800da9c:	20000018 	.word	0x20000018

0800daa0 <_kill_r>:
 800daa0:	b538      	push	{r3, r4, r5, lr}
 800daa2:	4d07      	ldr	r5, [pc, #28]	; (800dac0 <_kill_r+0x20>)
 800daa4:	2300      	movs	r3, #0
 800daa6:	4604      	mov	r4, r0
 800daa8:	4608      	mov	r0, r1
 800daaa:	4611      	mov	r1, r2
 800daac:	602b      	str	r3, [r5, #0]
 800daae:	f7f4 fb0f 	bl	80020d0 <_kill>
 800dab2:	1c43      	adds	r3, r0, #1
 800dab4:	d102      	bne.n	800dabc <_kill_r+0x1c>
 800dab6:	682b      	ldr	r3, [r5, #0]
 800dab8:	b103      	cbz	r3, 800dabc <_kill_r+0x1c>
 800daba:	6023      	str	r3, [r4, #0]
 800dabc:	bd38      	pop	{r3, r4, r5, pc}
 800dabe:	bf00      	nop
 800dac0:	20001b8c 	.word	0x20001b8c

0800dac4 <_getpid_r>:
 800dac4:	f7f4 bafc 	b.w	80020c0 <_getpid>

0800dac8 <fmax>:
 800dac8:	b508      	push	{r3, lr}
 800daca:	ed2d 8b04 	vpush	{d8-d9}
 800dace:	eeb0 8a40 	vmov.f32	s16, s0
 800dad2:	eef0 8a60 	vmov.f32	s17, s1
 800dad6:	eeb0 9a41 	vmov.f32	s18, s2
 800dada:	eef0 9a61 	vmov.f32	s19, s3
 800dade:	f000 f81b 	bl	800db18 <__fpclassifyd>
 800dae2:	b168      	cbz	r0, 800db00 <fmax+0x38>
 800dae4:	eeb0 0a49 	vmov.f32	s0, s18
 800dae8:	eef0 0a69 	vmov.f32	s1, s19
 800daec:	f000 f814 	bl	800db18 <__fpclassifyd>
 800daf0:	b150      	cbz	r0, 800db08 <fmax+0x40>
 800daf2:	ec53 2b19 	vmov	r2, r3, d9
 800daf6:	ec51 0b18 	vmov	r0, r1, d8
 800dafa:	f7f3 f825 	bl	8000b48 <__aeabi_dcmpgt>
 800dafe:	b918      	cbnz	r0, 800db08 <fmax+0x40>
 800db00:	eeb0 8a49 	vmov.f32	s16, s18
 800db04:	eef0 8a69 	vmov.f32	s17, s19
 800db08:	eeb0 0a48 	vmov.f32	s0, s16
 800db0c:	eef0 0a68 	vmov.f32	s1, s17
 800db10:	ecbd 8b04 	vpop	{d8-d9}
 800db14:	bd08      	pop	{r3, pc}
	...

0800db18 <__fpclassifyd>:
 800db18:	ec51 0b10 	vmov	r0, r1, d0
 800db1c:	b510      	push	{r4, lr}
 800db1e:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800db22:	460b      	mov	r3, r1
 800db24:	d019      	beq.n	800db5a <__fpclassifyd+0x42>
 800db26:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 800db2a:	490e      	ldr	r1, [pc, #56]	; (800db64 <__fpclassifyd+0x4c>)
 800db2c:	428a      	cmp	r2, r1
 800db2e:	d90e      	bls.n	800db4e <__fpclassifyd+0x36>
 800db30:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 800db34:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800db38:	428a      	cmp	r2, r1
 800db3a:	d908      	bls.n	800db4e <__fpclassifyd+0x36>
 800db3c:	4a0a      	ldr	r2, [pc, #40]	; (800db68 <__fpclassifyd+0x50>)
 800db3e:	4213      	tst	r3, r2
 800db40:	d007      	beq.n	800db52 <__fpclassifyd+0x3a>
 800db42:	4294      	cmp	r4, r2
 800db44:	d107      	bne.n	800db56 <__fpclassifyd+0x3e>
 800db46:	fab0 f080 	clz	r0, r0
 800db4a:	0940      	lsrs	r0, r0, #5
 800db4c:	bd10      	pop	{r4, pc}
 800db4e:	2004      	movs	r0, #4
 800db50:	e7fc      	b.n	800db4c <__fpclassifyd+0x34>
 800db52:	2003      	movs	r0, #3
 800db54:	e7fa      	b.n	800db4c <__fpclassifyd+0x34>
 800db56:	2000      	movs	r0, #0
 800db58:	e7f8      	b.n	800db4c <__fpclassifyd+0x34>
 800db5a:	2800      	cmp	r0, #0
 800db5c:	d1ee      	bne.n	800db3c <__fpclassifyd+0x24>
 800db5e:	2002      	movs	r0, #2
 800db60:	e7f4      	b.n	800db4c <__fpclassifyd+0x34>
 800db62:	bf00      	nop
 800db64:	7fdfffff 	.word	0x7fdfffff
 800db68:	7ff00000 	.word	0x7ff00000

0800db6c <fmaxf>:
 800db6c:	b508      	push	{r3, lr}
 800db6e:	ed2d 8b02 	vpush	{d8}
 800db72:	eeb0 8a40 	vmov.f32	s16, s0
 800db76:	eef0 8a60 	vmov.f32	s17, s1
 800db7a:	f000 f82d 	bl	800dbd8 <__fpclassifyf>
 800db7e:	b148      	cbz	r0, 800db94 <fmaxf+0x28>
 800db80:	eeb0 0a68 	vmov.f32	s0, s17
 800db84:	f000 f828 	bl	800dbd8 <__fpclassifyf>
 800db88:	b130      	cbz	r0, 800db98 <fmaxf+0x2c>
 800db8a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800db8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db92:	dc01      	bgt.n	800db98 <fmaxf+0x2c>
 800db94:	eeb0 8a68 	vmov.f32	s16, s17
 800db98:	eeb0 0a48 	vmov.f32	s0, s16
 800db9c:	ecbd 8b02 	vpop	{d8}
 800dba0:	bd08      	pop	{r3, pc}

0800dba2 <fminf>:
 800dba2:	b508      	push	{r3, lr}
 800dba4:	ed2d 8b02 	vpush	{d8}
 800dba8:	eeb0 8a40 	vmov.f32	s16, s0
 800dbac:	eef0 8a60 	vmov.f32	s17, s1
 800dbb0:	f000 f812 	bl	800dbd8 <__fpclassifyf>
 800dbb4:	b148      	cbz	r0, 800dbca <fminf+0x28>
 800dbb6:	eeb0 0a68 	vmov.f32	s0, s17
 800dbba:	f000 f80d 	bl	800dbd8 <__fpclassifyf>
 800dbbe:	b130      	cbz	r0, 800dbce <fminf+0x2c>
 800dbc0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800dbc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbc8:	d401      	bmi.n	800dbce <fminf+0x2c>
 800dbca:	eeb0 8a68 	vmov.f32	s16, s17
 800dbce:	eeb0 0a48 	vmov.f32	s0, s16
 800dbd2:	ecbd 8b02 	vpop	{d8}
 800dbd6:	bd08      	pop	{r3, pc}

0800dbd8 <__fpclassifyf>:
 800dbd8:	ee10 3a10 	vmov	r3, s0
 800dbdc:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800dbe0:	d00d      	beq.n	800dbfe <__fpclassifyf+0x26>
 800dbe2:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800dbe6:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800dbea:	d30a      	bcc.n	800dc02 <__fpclassifyf+0x2a>
 800dbec:	4b07      	ldr	r3, [pc, #28]	; (800dc0c <__fpclassifyf+0x34>)
 800dbee:	1e42      	subs	r2, r0, #1
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d908      	bls.n	800dc06 <__fpclassifyf+0x2e>
 800dbf4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800dbf8:	4258      	negs	r0, r3
 800dbfa:	4158      	adcs	r0, r3
 800dbfc:	4770      	bx	lr
 800dbfe:	2002      	movs	r0, #2
 800dc00:	4770      	bx	lr
 800dc02:	2004      	movs	r0, #4
 800dc04:	4770      	bx	lr
 800dc06:	2003      	movs	r0, #3
 800dc08:	4770      	bx	lr
 800dc0a:	bf00      	nop
 800dc0c:	007ffffe 	.word	0x007ffffe

0800dc10 <sqrtf>:
 800dc10:	b508      	push	{r3, lr}
 800dc12:	ed2d 8b02 	vpush	{d8}
 800dc16:	eeb0 8a40 	vmov.f32	s16, s0
 800dc1a:	f000 f817 	bl	800dc4c <__ieee754_sqrtf>
 800dc1e:	eeb4 8a48 	vcmp.f32	s16, s16
 800dc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc26:	d60c      	bvs.n	800dc42 <sqrtf+0x32>
 800dc28:	eddf 8a07 	vldr	s17, [pc, #28]	; 800dc48 <sqrtf+0x38>
 800dc2c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800dc30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc34:	d505      	bpl.n	800dc42 <sqrtf+0x32>
 800dc36:	f7fb fa8b 	bl	8009150 <__errno>
 800dc3a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800dc3e:	2321      	movs	r3, #33	; 0x21
 800dc40:	6003      	str	r3, [r0, #0]
 800dc42:	ecbd 8b02 	vpop	{d8}
 800dc46:	bd08      	pop	{r3, pc}
 800dc48:	00000000 	.word	0x00000000

0800dc4c <__ieee754_sqrtf>:
 800dc4c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800dc50:	4770      	bx	lr
	...

0800dc54 <_init>:
 800dc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc56:	bf00      	nop
 800dc58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc5a:	bc08      	pop	{r3}
 800dc5c:	469e      	mov	lr, r3
 800dc5e:	4770      	bx	lr

0800dc60 <_fini>:
 800dc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc62:	bf00      	nop
 800dc64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc66:	bc08      	pop	{r3}
 800dc68:	469e      	mov	lr, r3
 800dc6a:	4770      	bx	lr
