
Ejemplo5_UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f18  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080040e0  080040e0  000140e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004100  08004100  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004100  08004100  00014100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004108  08004108  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004108  08004108  00014108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800410c  0800410c  0001410c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000014  08004124  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08004124  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b301  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001930  00000000  00000000  0002b345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  0002cc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000750  00000000  00000000  0002d460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000242ed  00000000  00000000  0002dbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a49b  00000000  00000000  00051e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2291  00000000  00000000  0005c338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013e5c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f00  00000000  00000000  0013e61c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000014 	.word	0x20000014
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080040c8 	.word	0x080040c8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000018 	.word	0x20000018
 8000204:	080040c8 	.word	0x080040c8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fad7 	bl	8000ac2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f810 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f8cc 	bl	80006b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800051c:	f000 f8a4 	bl	8000668 <MX_DMA_Init>
  MX_UART7_Init();
 8000520:	f000 f872 	bl	8000608 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart7, Rx, sizeof(Rx));
 8000524:	2201      	movs	r2, #1
 8000526:	4902      	ldr	r1, [pc, #8]	; (8000530 <main+0x24>)
 8000528:	4802      	ldr	r0, [pc, #8]	; (8000534 <main+0x28>)
 800052a:	f002 fb9d 	bl	8002c68 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052e:	e7fe      	b.n	800052e <main+0x22>
 8000530:	20000178 	.word	0x20000178
 8000534:	20000030 	.word	0x20000030

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f003 fdb6 	bl	80040b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800055c:	f001 f9f0 	bl	8001940 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	4b27      	ldr	r3, [pc, #156]	; (8000600 <SystemClock_Config+0xc8>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	4a26      	ldr	r2, [pc, #152]	; (8000600 <SystemClock_Config+0xc8>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	; 0x40
 800056c:	4b24      	ldr	r3, [pc, #144]	; (8000600 <SystemClock_Config+0xc8>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <SystemClock_Config+0xcc>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000580:	4a20      	ldr	r2, [pc, #128]	; (8000604 <SystemClock_Config+0xcc>)
 8000582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <SystemClock_Config+0xcc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000594:	2302      	movs	r3, #2
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000598:	2301      	movs	r3, #1
 800059a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059c:	2310      	movs	r3, #16
 800059e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a0:	2302      	movs	r3, #2
 80005a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a4:	2300      	movs	r3, #0
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a8:	2308      	movs	r3, #8
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80005ac:	2350      	movs	r3, #80	; 0x50
 80005ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 f9cf 	bl	8001960 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c8:	f000 f902 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	2302      	movs	r3, #2
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2102      	movs	r1, #2
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fc5d 	bl	8001ea8 <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005f4:	f000 f8ec 	bl	80007d0 <Error_Handler>
  }
}
 80005f8:	bf00      	nop
 80005fa:	3750      	adds	r7, #80	; 0x50
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800060c:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_UART7_Init+0x58>)
 800060e:	4a15      	ldr	r2, [pc, #84]	; (8000664 <MX_UART7_Init+0x5c>)
 8000610:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000612:	4b13      	ldr	r3, [pc, #76]	; (8000660 <MX_UART7_Init+0x58>)
 8000614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000618:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_UART7_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_UART7_Init+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_UART7_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_UART7_Init+0x58>)
 800062e:	220c      	movs	r2, #12
 8000630:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <MX_UART7_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_UART7_Init+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <MX_UART7_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_UART7_Init+0x58>)
 8000646:	2200      	movs	r2, #0
 8000648:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_UART7_Init+0x58>)
 800064c:	f002 fa42 	bl	8002ad4 <HAL_UART_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000656:	f000 f8bb 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000030 	.word	0x20000030
 8000664:	40007800 	.word	0x40007800

08000668 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_DMA_Init+0x48>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <MX_DMA_Init+0x48>)
 8000674:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <MX_DMA_Init+0x48>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	200c      	movs	r0, #12
 800068c:	f000 fb51 	bl	8000d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000690:	200c      	movs	r0, #12
 8000692:	f000 fb6a 	bl	8000d6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	2100      	movs	r1, #0
 800069a:	200e      	movs	r0, #14
 800069c:	f000 fb49 	bl	8000d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80006a0:	200e      	movs	r0, #14
 80006a2:	f000 fb62 	bl	8000d6a <HAL_NVIC_EnableIRQ>

}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	4b24      	ldr	r3, [pc, #144]	; (800075c <MX_GPIO_Init+0xa8>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a23      	ldr	r2, [pc, #140]	; (800075c <MX_GPIO_Init+0xa8>)
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b21      	ldr	r3, [pc, #132]	; (800075c <MX_GPIO_Init+0xa8>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006e2:	4b1e      	ldr	r3, [pc, #120]	; (800075c <MX_GPIO_Init+0xa8>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a1d      	ldr	r2, [pc, #116]	; (800075c <MX_GPIO_Init+0xa8>)
 80006e8:	f043 0320 	orr.w	r3, r3, #32
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_GPIO_Init+0xa8>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0320 	and.w	r3, r3, #32
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_GPIO_Init+0xa8>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a17      	ldr	r2, [pc, #92]	; (800075c <MX_GPIO_Init+0xa8>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_GPIO_Init+0xa8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_GPIO_Init+0xa8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a11      	ldr	r2, [pc, #68]	; (800075c <MX_GPIO_Init+0xa8>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_GPIO_Init+0xa8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000730:	480b      	ldr	r0, [pc, #44]	; (8000760 <MX_GPIO_Init+0xac>)
 8000732:	f001 f8eb 	bl	800190c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000736:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_GPIO_Init+0xac>)
 8000750:	f000 ff30 	bl	80015b4 <HAL_GPIO_Init>

}
 8000754:	bf00      	nop
 8000756:	3728      	adds	r7, #40	; 0x28
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800
 8000760:	40020800 	.word	0x40020800

08000764 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART7){
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a12      	ldr	r2, [pc, #72]	; (80007bc <HAL_UART_RxCpltCallback+0x58>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d104      	bne.n	8000780 <HAL_UART_RxCpltCallback+0x1c>
				HAL_UART_Transmit_DMA(&huart7, Tx_ACK, sizeof(Tx_ACK));
 8000776:	2207      	movs	r2, #7
 8000778:	4911      	ldr	r1, [pc, #68]	; (80007c0 <HAL_UART_RxCpltCallback+0x5c>)
 800077a:	4812      	ldr	r0, [pc, #72]	; (80007c4 <HAL_UART_RxCpltCallback+0x60>)
 800077c:	f002 f9f8 	bl	8002b70 <HAL_UART_Transmit_DMA>
			}
				switch (Rx[0]) {
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <HAL_UART_RxCpltCallback+0x64>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b30      	cmp	r3, #48	; 0x30
 8000786:	d008      	beq.n	800079a <HAL_UART_RxCpltCallback+0x36>
 8000788:	2b31      	cmp	r3, #49	; 0x31
 800078a:	d10d      	bne.n	80007a8 <HAL_UART_RxCpltCallback+0x44>
				case '1':
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000792:	480e      	ldr	r0, [pc, #56]	; (80007cc <HAL_UART_RxCpltCallback+0x68>)
 8000794:	f001 f8ba 	bl	800190c <HAL_GPIO_WritePin>
					break;
 8000798:	e007      	b.n	80007aa <HAL_UART_RxCpltCallback+0x46>
				case '0':
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007a0:	480a      	ldr	r0, [pc, #40]	; (80007cc <HAL_UART_RxCpltCallback+0x68>)
 80007a2:	f001 f8b3 	bl	800190c <HAL_GPIO_WritePin>
				    break;
 80007a6:	e000      	b.n	80007aa <HAL_UART_RxCpltCallback+0x46>
				default:
					break;
 80007a8:	bf00      	nop
				}
	     HAL_UART_Receive_DMA(&huart7, Rx, sizeof(Rx));
 80007aa:	2201      	movs	r2, #1
 80007ac:	4906      	ldr	r1, [pc, #24]	; (80007c8 <HAL_UART_RxCpltCallback+0x64>)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <HAL_UART_RxCpltCallback+0x60>)
 80007b0:	f002 fa5a 	bl	8002c68 <HAL_UART_Receive_DMA>


}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40007800 	.word	0x40007800
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000030 	.word	0x20000030
 80007c8:	20000178 	.word	0x20000178
 80007cc:	40020800 	.word	0x40020800

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <Error_Handler+0x8>
	...

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <HAL_MspInit+0x44>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <HAL_MspInit+0x44>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ec:	6413      	str	r3, [r2, #64]	; 0x40
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <HAL_MspInit+0x44>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <HAL_MspInit+0x44>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <HAL_MspInit+0x44>)
 8000800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000804:	6453      	str	r3, [r2, #68]	; 0x44
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_MspInit+0x44>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b0aa      	sub	sp, #168	; 0xa8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	2284      	movs	r2, #132	; 0x84
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f003 fc37 	bl	80040b8 <memset>
  if(huart->Instance==UART7)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a54      	ldr	r2, [pc, #336]	; (80009a0 <HAL_UART_MspInit+0x17c>)
 8000850:	4293      	cmp	r3, r2
 8000852:	f040 80a0 	bne.w	8000996 <HAL_UART_MspInit+0x172>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8000856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800085c:	2300      	movs	r3, #0
 800085e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	4618      	mov	r0, r3
 8000866:	f001 fd45 	bl	80022f4 <HAL_RCCEx_PeriphCLKConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000870:	f7ff ffae 	bl	80007d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000874:	4b4b      	ldr	r3, [pc, #300]	; (80009a4 <HAL_UART_MspInit+0x180>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	4a4a      	ldr	r2, [pc, #296]	; (80009a4 <HAL_UART_MspInit+0x180>)
 800087a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800087e:	6413      	str	r3, [r2, #64]	; 0x40
 8000880:	4b48      	ldr	r3, [pc, #288]	; (80009a4 <HAL_UART_MspInit+0x180>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800088c:	4b45      	ldr	r3, [pc, #276]	; (80009a4 <HAL_UART_MspInit+0x180>)
 800088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000890:	4a44      	ldr	r2, [pc, #272]	; (80009a4 <HAL_UART_MspInit+0x180>)
 8000892:	f043 0320 	orr.w	r3, r3, #32
 8000896:	6313      	str	r3, [r2, #48]	; 0x30
 8000898:	4b42      	ldr	r3, [pc, #264]	; (80009a4 <HAL_UART_MspInit+0x180>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	f003 0320 	and.w	r3, r3, #32
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008a4:	23c0      	movs	r3, #192	; 0xc0
 80008a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80008bc:	2308      	movs	r3, #8
 80008be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008c2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80008c6:	4619      	mov	r1, r3
 80008c8:	4837      	ldr	r0, [pc, #220]	; (80009a8 <HAL_UART_MspInit+0x184>)
 80008ca:	f000 fe73 	bl	80015b4 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 80008ce:	4b37      	ldr	r3, [pc, #220]	; (80009ac <HAL_UART_MspInit+0x188>)
 80008d0:	4a37      	ldr	r2, [pc, #220]	; (80009b0 <HAL_UART_MspInit+0x18c>)
 80008d2:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 80008d4:	4b35      	ldr	r3, [pc, #212]	; (80009ac <HAL_UART_MspInit+0x188>)
 80008d6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80008da:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008dc:	4b33      	ldr	r3, [pc, #204]	; (80009ac <HAL_UART_MspInit+0x188>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008e2:	4b32      	ldr	r3, [pc, #200]	; (80009ac <HAL_UART_MspInit+0x188>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008e8:	4b30      	ldr	r3, [pc, #192]	; (80009ac <HAL_UART_MspInit+0x188>)
 80008ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008ee:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008f0:	4b2e      	ldr	r3, [pc, #184]	; (80009ac <HAL_UART_MspInit+0x188>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008f6:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <HAL_UART_MspInit+0x188>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 80008fc:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <HAL_UART_MspInit+0x188>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000902:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <HAL_UART_MspInit+0x188>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000908:	4b28      	ldr	r3, [pc, #160]	; (80009ac <HAL_UART_MspInit+0x188>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800090e:	4827      	ldr	r0, [pc, #156]	; (80009ac <HAL_UART_MspInit+0x188>)
 8000910:	f000 fa46 	bl	8000da0 <HAL_DMA_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 800091a:	f7ff ff59 	bl	80007d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a22      	ldr	r2, [pc, #136]	; (80009ac <HAL_UART_MspInit+0x188>)
 8000922:	675a      	str	r2, [r3, #116]	; 0x74
 8000924:	4a21      	ldr	r2, [pc, #132]	; (80009ac <HAL_UART_MspInit+0x188>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7_TX Init */
    hdma_uart7_tx.Instance = DMA1_Stream1;
 800092a:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <HAL_UART_MspInit+0x190>)
 800092c:	4a22      	ldr	r2, [pc, #136]	; (80009b8 <HAL_UART_MspInit+0x194>)
 800092e:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Channel = DMA_CHANNEL_5;
 8000930:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <HAL_UART_MspInit+0x190>)
 8000932:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000936:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <HAL_UART_MspInit+0x190>)
 800093a:	2240      	movs	r2, #64	; 0x40
 800093c:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <HAL_UART_MspInit+0x190>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <HAL_UART_MspInit+0x190>)
 8000946:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800094a:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <HAL_UART_MspInit+0x190>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <HAL_UART_MspInit+0x190>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <HAL_UART_MspInit+0x190>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <HAL_UART_MspInit+0x190>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <HAL_UART_MspInit+0x190>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 800096a:	4812      	ldr	r0, [pc, #72]	; (80009b4 <HAL_UART_MspInit+0x190>)
 800096c:	f000 fa18 	bl	8000da0 <HAL_DMA_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8000976:	f7ff ff2b 	bl	80007d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <HAL_UART_MspInit+0x190>)
 800097e:	671a      	str	r2, [r3, #112]	; 0x70
 8000980:	4a0c      	ldr	r2, [pc, #48]	; (80009b4 <HAL_UART_MspInit+0x190>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	2052      	movs	r0, #82	; 0x52
 800098c:	f000 f9d1 	bl	8000d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8000990:	2052      	movs	r0, #82	; 0x52
 8000992:	f000 f9ea 	bl	8000d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8000996:	bf00      	nop
 8000998:	37a8      	adds	r7, #168	; 0xa8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40007800 	.word	0x40007800
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40021400 	.word	0x40021400
 80009ac:	200000b8 	.word	0x200000b8
 80009b0:	40026058 	.word	0x40026058
 80009b4:	20000118 	.word	0x20000118
 80009b8:	40026028 	.word	0x40026028

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a08:	f000 f898 	bl	8000b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <DMA1_Stream1_IRQHandler+0x10>)
 8000a16:	f000 fb63 	bl	80010e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000118 	.word	0x20000118

08000a24 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <DMA1_Stream3_IRQHandler+0x10>)
 8000a2a:	f000 fb59 	bl	80010e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200000b8 	.word	0x200000b8

08000a38 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <UART7_IRQHandler+0x10>)
 8000a3e:	f002 f957 	bl	8002cf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000030 	.word	0x20000030

08000a4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <SystemInit+0x20>)
 8000a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <SystemInit+0x20>)
 8000a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a74:	480d      	ldr	r0, [pc, #52]	; (8000aac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a76:	490e      	ldr	r1, [pc, #56]	; (8000ab0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a78:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a8c:	4c0b      	ldr	r4, [pc, #44]	; (8000abc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a9a:	f7ff ffd7 	bl	8000a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a9e:	f003 fae7 	bl	8004070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa2:	f7ff fd33 	bl	800050c <main>
  bx  lr    
 8000aa6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000aa8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ab4:	08004110 	.word	0x08004110
  ldr r2, =_sbss
 8000ab8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000abc:	20000180 	.word	0x20000180

08000ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC_IRQHandler>

08000ac2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac6:	2003      	movs	r0, #3
 8000ac8:	f000 f928 	bl	8000d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000acc:	2000      	movs	r0, #0
 8000ace:	f000 f805 	bl	8000adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad2:	f7ff fe83 	bl	80007dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	bd80      	pop	{r7, pc}

08000adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x54>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x58>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 f943 	bl	8000d86 <HAL_SYSTICK_Config>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00e      	b.n	8000b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d80a      	bhi.n	8000b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f000 f90b 	bl	8000d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b1c:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <HAL_InitTick+0x5c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e000      	b.n	8000b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000008 	.word	0x20000008
 8000b34:	20000010 	.word	0x20000010
 8000b38:	2000000c 	.word	0x2000000c

08000b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x20>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x24>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <HAL_IncTick+0x24>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000010 	.word	0x20000010
 8000b60:	2000017c 	.word	0x2000017c

08000b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <HAL_GetTick+0x14>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	2000017c 	.word	0x2000017c

08000b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <__NVIC_SetPriorityGrouping+0x40>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <__NVIC_SetPriorityGrouping+0x40>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00
 8000bc0:	05fa0000 	.word	0x05fa0000

08000bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <__NVIC_GetPriorityGrouping+0x18>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	f003 0307 	and.w	r3, r3, #7
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	db0b      	blt.n	8000c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	f003 021f 	and.w	r2, r3, #31
 8000bf8:	4907      	ldr	r1, [pc, #28]	; (8000c18 <__NVIC_EnableIRQ+0x38>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	095b      	lsrs	r3, r3, #5
 8000c00:	2001      	movs	r0, #1
 8000c02:	fa00 f202 	lsl.w	r2, r0, r2
 8000c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000e100 	.word	0xe000e100

08000c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	db0a      	blt.n	8000c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	490c      	ldr	r1, [pc, #48]	; (8000c68 <__NVIC_SetPriority+0x4c>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c44:	e00a      	b.n	8000c5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4908      	ldr	r1, [pc, #32]	; (8000c6c <__NVIC_SetPriority+0x50>)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	3b04      	subs	r3, #4
 8000c54:	0112      	lsls	r2, r2, #4
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	440b      	add	r3, r1
 8000c5a:	761a      	strb	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f1c3 0307 	rsb	r3, r3, #7
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	bf28      	it	cs
 8000c8e:	2304      	movcs	r3, #4
 8000c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d902      	bls.n	8000ca0 <NVIC_EncodePriority+0x30>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	e000      	b.n	8000ca2 <NVIC_EncodePriority+0x32>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43d9      	mvns	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	; 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce8:	d301      	bcc.n	8000cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00f      	b.n	8000d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <SysTick_Config+0x40>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf6:	210f      	movs	r1, #15
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfc:	f7ff ff8e 	bl	8000c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <SysTick_Config+0x40>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d06:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <SysTick_Config+0x40>)
 8000d08:	2207      	movs	r2, #7
 8000d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	e000e010 	.word	0xe000e010

08000d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff ff29 	bl	8000b7c <__NVIC_SetPriorityGrouping>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b086      	sub	sp, #24
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
 8000d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d44:	f7ff ff3e 	bl	8000bc4 <__NVIC_GetPriorityGrouping>
 8000d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	6978      	ldr	r0, [r7, #20]
 8000d50:	f7ff ff8e 	bl	8000c70 <NVIC_EncodePriority>
 8000d54:	4602      	mov	r2, r0
 8000d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff5d 	bl	8000c1c <__NVIC_SetPriority>
}
 8000d62:	bf00      	nop
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff31 	bl	8000be0 <__NVIC_EnableIRQ>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffa2 	bl	8000cd8 <SysTick_Config>
 8000d94:	4603      	mov	r3, r0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000dac:	f7ff feda 	bl	8000b64 <HAL_GetTick>
 8000db0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e099      	b.n	8000ef0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f022 0201 	bic.w	r2, r2, #1
 8000dda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ddc:	e00f      	b.n	8000dfe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000dde:	f7ff fec1 	bl	8000b64 <HAL_GetTick>
 8000de2:	4602      	mov	r2, r0
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	2b05      	cmp	r3, #5
 8000dea:	d908      	bls.n	8000dfe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2220      	movs	r2, #32
 8000df0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2203      	movs	r2, #3
 8000df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e078      	b.n	8000ef0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1e8      	bne.n	8000dde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	4b38      	ldr	r3, [pc, #224]	; (8000ef8 <HAL_DMA_Init+0x158>)
 8000e18:	4013      	ands	r3, r2
 8000e1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	691b      	ldr	r3, [r3, #16]
 8000e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6a1b      	ldr	r3, [r3, #32]
 8000e48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e54:	2b04      	cmp	r3, #4
 8000e56:	d107      	bne.n	8000e68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	4313      	orrs	r3, r2
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	f023 0307 	bic.w	r3, r3, #7
 8000e7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d117      	bne.n	8000ec2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d00e      	beq.n	8000ec2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f000 fb09 	bl	80014bc <DMA_CheckFifoParam>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d008      	beq.n	8000ec2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2240      	movs	r2, #64	; 0x40
 8000eb4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e016      	b.n	8000ef0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f000 fac0 	bl	8001450 <DMA_CalcBaseAndBitshift>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ed8:	223f      	movs	r2, #63	; 0x3f
 8000eda:	409a      	lsls	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	f010803f 	.word	0xf010803f

08000efc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d101      	bne.n	8000f22 <HAL_DMA_Start_IT+0x26>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e048      	b.n	8000fb4 <HAL_DMA_Start_IT+0xb8>
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2201      	movs	r2, #1
 8000f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d137      	bne.n	8000fa6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2202      	movs	r2, #2
 8000f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2200      	movs	r2, #0
 8000f42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	68b9      	ldr	r1, [r7, #8]
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f000 fa52 	bl	80013f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f54:	223f      	movs	r2, #63	; 0x3f
 8000f56:	409a      	lsls	r2, r3
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 0216 	orr.w	r2, r2, #22
 8000f6a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	695a      	ldr	r2, [r3, #20]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f7a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d007      	beq.n	8000f94 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f042 0208 	orr.w	r2, r2, #8
 8000f92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f042 0201 	orr.w	r2, r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	e005      	b.n	8000fb2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fca:	f7ff fdcb 	bl	8000b64 <HAL_GetTick>
 8000fce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d008      	beq.n	8000fee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2280      	movs	r2, #128	; 0x80
 8000fe0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e052      	b.n	8001094 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f022 0216 	bic.w	r2, r2, #22
 8000ffc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	695a      	ldr	r2, [r3, #20]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800100c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	2b00      	cmp	r3, #0
 8001014:	d103      	bne.n	800101e <HAL_DMA_Abort+0x62>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800101a:	2b00      	cmp	r3, #0
 800101c:	d007      	beq.n	800102e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f022 0208 	bic.w	r2, r2, #8
 800102c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0201 	bic.w	r2, r2, #1
 800103c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800103e:	e013      	b.n	8001068 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001040:	f7ff fd90 	bl	8000b64 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b05      	cmp	r3, #5
 800104c:	d90c      	bls.n	8001068 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2220      	movs	r2, #32
 8001052:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2203      	movs	r2, #3
 8001058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e015      	b.n	8001094 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1e4      	bne.n	8001040 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800107a:	223f      	movs	r2, #63	; 0x3f
 800107c:	409a      	lsls	r2, r3
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2201      	movs	r2, #1
 8001086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d004      	beq.n	80010ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2280      	movs	r2, #128	; 0x80
 80010b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00c      	b.n	80010d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2205      	movs	r2, #5
 80010be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f022 0201 	bic.w	r2, r2, #1
 80010d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80010ec:	4b8e      	ldr	r3, [pc, #568]	; (8001328 <HAL_DMA_IRQHandler+0x248>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a8e      	ldr	r2, [pc, #568]	; (800132c <HAL_DMA_IRQHandler+0x24c>)
 80010f2:	fba2 2303 	umull	r2, r3, r2, r3
 80010f6:	0a9b      	lsrs	r3, r3, #10
 80010f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800110a:	2208      	movs	r2, #8
 800110c:	409a      	lsls	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4013      	ands	r3, r2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d01a      	beq.n	800114c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	2b00      	cmp	r3, #0
 8001122:	d013      	beq.n	800114c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 0204 	bic.w	r2, r2, #4
 8001132:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001138:	2208      	movs	r2, #8
 800113a:	409a      	lsls	r2, r3
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001144:	f043 0201 	orr.w	r2, r3, #1
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001150:	2201      	movs	r2, #1
 8001152:	409a      	lsls	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4013      	ands	r3, r2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d012      	beq.n	8001182 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001166:	2b00      	cmp	r3, #0
 8001168:	d00b      	beq.n	8001182 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800116e:	2201      	movs	r2, #1
 8001170:	409a      	lsls	r2, r3
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800117a:	f043 0202 	orr.w	r2, r3, #2
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001186:	2204      	movs	r2, #4
 8001188:	409a      	lsls	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4013      	ands	r3, r2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d012      	beq.n	80011b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d00b      	beq.n	80011b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a4:	2204      	movs	r2, #4
 80011a6:	409a      	lsls	r2, r3
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b0:	f043 0204 	orr.w	r2, r3, #4
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011bc:	2210      	movs	r2, #16
 80011be:	409a      	lsls	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4013      	ands	r3, r2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d043      	beq.n	8001250 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d03c      	beq.n	8001250 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011da:	2210      	movs	r2, #16
 80011dc:	409a      	lsls	r2, r3
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d018      	beq.n	8001222 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d108      	bne.n	8001210 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	2b00      	cmp	r3, #0
 8001204:	d024      	beq.n	8001250 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	4798      	blx	r3
 800120e:	e01f      	b.n	8001250 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001214:	2b00      	cmp	r3, #0
 8001216:	d01b      	beq.n	8001250 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	4798      	blx	r3
 8001220:	e016      	b.n	8001250 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122c:	2b00      	cmp	r3, #0
 800122e:	d107      	bne.n	8001240 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0208 	bic.w	r2, r2, #8
 800123e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001254:	2220      	movs	r2, #32
 8001256:	409a      	lsls	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4013      	ands	r3, r2
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 808f 	beq.w	8001380 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0310 	and.w	r3, r3, #16
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 8087 	beq.w	8001380 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001276:	2220      	movs	r2, #32
 8001278:	409a      	lsls	r2, r3
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b05      	cmp	r3, #5
 8001288:	d136      	bne.n	80012f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 0216 	bic.w	r2, r2, #22
 8001298:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	695a      	ldr	r2, [r3, #20]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d103      	bne.n	80012ba <HAL_DMA_IRQHandler+0x1da>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d007      	beq.n	80012ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0208 	bic.w	r2, r2, #8
 80012c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ce:	223f      	movs	r2, #63	; 0x3f
 80012d0:	409a      	lsls	r2, r3
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d07e      	beq.n	80013ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	4798      	blx	r3
        }
        return;
 80012f6:	e079      	b.n	80013ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d01d      	beq.n	8001342 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10d      	bne.n	8001330 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001318:	2b00      	cmp	r3, #0
 800131a:	d031      	beq.n	8001380 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	4798      	blx	r3
 8001324:	e02c      	b.n	8001380 <HAL_DMA_IRQHandler+0x2a0>
 8001326:	bf00      	nop
 8001328:	20000008 	.word	0x20000008
 800132c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001334:	2b00      	cmp	r3, #0
 8001336:	d023      	beq.n	8001380 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	4798      	blx	r3
 8001340:	e01e      	b.n	8001380 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134c:	2b00      	cmp	r3, #0
 800134e:	d10f      	bne.n	8001370 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0210 	bic.w	r2, r2, #16
 800135e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001384:	2b00      	cmp	r3, #0
 8001386:	d032      	beq.n	80013ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d022      	beq.n	80013da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2205      	movs	r2, #5
 8001398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0201 	bic.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	3301      	adds	r3, #1
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d307      	bcc.n	80013c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f2      	bne.n	80013ac <HAL_DMA_IRQHandler+0x2cc>
 80013c6:	e000      	b.n	80013ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80013c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2201      	movs	r2, #1
 80013ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d005      	beq.n	80013ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	4798      	blx	r3
 80013ea:	e000      	b.n	80013ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80013ec:	bf00      	nop
    }
  }
}
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001410:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b40      	cmp	r3, #64	; 0x40
 8001420:	d108      	bne.n	8001434 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001432:	e007      	b.n	8001444 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68ba      	ldr	r2, [r7, #8]
 800143a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	60da      	str	r2, [r3, #12]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	3b10      	subs	r3, #16
 8001460:	4a13      	ldr	r2, [pc, #76]	; (80014b0 <DMA_CalcBaseAndBitshift+0x60>)
 8001462:	fba2 2303 	umull	r2, r3, r2, r3
 8001466:	091b      	lsrs	r3, r3, #4
 8001468:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <DMA_CalcBaseAndBitshift+0x64>)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4413      	add	r3, r2
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2b03      	cmp	r3, #3
 800147c:	d908      	bls.n	8001490 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <DMA_CalcBaseAndBitshift+0x68>)
 8001486:	4013      	ands	r3, r2
 8001488:	1d1a      	adds	r2, r3, #4
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	659a      	str	r2, [r3, #88]	; 0x58
 800148e:	e006      	b.n	800149e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <DMA_CalcBaseAndBitshift+0x68>)
 8001498:	4013      	ands	r3, r2
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	aaaaaaab 	.word	0xaaaaaaab
 80014b4:	080040f8 	.word	0x080040f8
 80014b8:	fffffc00 	.word	0xfffffc00

080014bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d11f      	bne.n	8001516 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d856      	bhi.n	800158a <DMA_CheckFifoParam+0xce>
 80014dc:	a201      	add	r2, pc, #4	; (adr r2, 80014e4 <DMA_CheckFifoParam+0x28>)
 80014de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e2:	bf00      	nop
 80014e4:	080014f5 	.word	0x080014f5
 80014e8:	08001507 	.word	0x08001507
 80014ec:	080014f5 	.word	0x080014f5
 80014f0:	0800158b 	.word	0x0800158b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d046      	beq.n	800158e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001504:	e043      	b.n	800158e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800150e:	d140      	bne.n	8001592 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001514:	e03d      	b.n	8001592 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800151e:	d121      	bne.n	8001564 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	2b03      	cmp	r3, #3
 8001524:	d837      	bhi.n	8001596 <DMA_CheckFifoParam+0xda>
 8001526:	a201      	add	r2, pc, #4	; (adr r2, 800152c <DMA_CheckFifoParam+0x70>)
 8001528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152c:	0800153d 	.word	0x0800153d
 8001530:	08001543 	.word	0x08001543
 8001534:	0800153d 	.word	0x0800153d
 8001538:	08001555 	.word	0x08001555
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	73fb      	strb	r3, [r7, #15]
      break;
 8001540:	e030      	b.n	80015a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d025      	beq.n	800159a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001552:	e022      	b.n	800159a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800155c:	d11f      	bne.n	800159e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001562:	e01c      	b.n	800159e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d903      	bls.n	8001572 <DMA_CheckFifoParam+0xb6>
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2b03      	cmp	r3, #3
 800156e:	d003      	beq.n	8001578 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001570:	e018      	b.n	80015a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	73fb      	strb	r3, [r7, #15]
      break;
 8001576:	e015      	b.n	80015a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00e      	beq.n	80015a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	73fb      	strb	r3, [r7, #15]
      break;
 8001588:	e00b      	b.n	80015a2 <DMA_CheckFifoParam+0xe6>
      break;
 800158a:	bf00      	nop
 800158c:	e00a      	b.n	80015a4 <DMA_CheckFifoParam+0xe8>
      break;
 800158e:	bf00      	nop
 8001590:	e008      	b.n	80015a4 <DMA_CheckFifoParam+0xe8>
      break;
 8001592:	bf00      	nop
 8001594:	e006      	b.n	80015a4 <DMA_CheckFifoParam+0xe8>
      break;
 8001596:	bf00      	nop
 8001598:	e004      	b.n	80015a4 <DMA_CheckFifoParam+0xe8>
      break;
 800159a:	bf00      	nop
 800159c:	e002      	b.n	80015a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800159e:	bf00      	nop
 80015a0:	e000      	b.n	80015a4 <DMA_CheckFifoParam+0xe8>
      break;
 80015a2:	bf00      	nop
    }
  } 
  
  return status; 
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop

080015b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	e175      	b.n	80018c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80015d4:	2201      	movs	r2, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	f040 8164 	bne.w	80018ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d005      	beq.n	800160a <HAL_GPIO_Init+0x56>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d130      	bne.n	800166c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	2203      	movs	r2, #3
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001640:	2201      	movs	r2, #1
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	f003 0201 	and.w	r2, r3, #1
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	2b03      	cmp	r3, #3
 8001676:	d017      	beq.n	80016a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d123      	bne.n	80016fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	08da      	lsrs	r2, r3, #3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3208      	adds	r2, #8
 80016bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	220f      	movs	r2, #15
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	08da      	lsrs	r2, r3, #3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3208      	adds	r2, #8
 80016f6:	69b9      	ldr	r1, [r7, #24]
 80016f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0203 	and.w	r2, r3, #3
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80be 	beq.w	80018ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	4b66      	ldr	r3, [pc, #408]	; (80018d8 <HAL_GPIO_Init+0x324>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	4a65      	ldr	r2, [pc, #404]	; (80018d8 <HAL_GPIO_Init+0x324>)
 8001744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001748:	6453      	str	r3, [r2, #68]	; 0x44
 800174a:	4b63      	ldr	r3, [pc, #396]	; (80018d8 <HAL_GPIO_Init+0x324>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001756:	4a61      	ldr	r2, [pc, #388]	; (80018dc <HAL_GPIO_Init+0x328>)
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	089b      	lsrs	r3, r3, #2
 800175c:	3302      	adds	r3, #2
 800175e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	220f      	movs	r2, #15
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a58      	ldr	r2, [pc, #352]	; (80018e0 <HAL_GPIO_Init+0x32c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d037      	beq.n	80017f2 <HAL_GPIO_Init+0x23e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a57      	ldr	r2, [pc, #348]	; (80018e4 <HAL_GPIO_Init+0x330>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d031      	beq.n	80017ee <HAL_GPIO_Init+0x23a>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a56      	ldr	r2, [pc, #344]	; (80018e8 <HAL_GPIO_Init+0x334>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d02b      	beq.n	80017ea <HAL_GPIO_Init+0x236>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a55      	ldr	r2, [pc, #340]	; (80018ec <HAL_GPIO_Init+0x338>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d025      	beq.n	80017e6 <HAL_GPIO_Init+0x232>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a54      	ldr	r2, [pc, #336]	; (80018f0 <HAL_GPIO_Init+0x33c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d01f      	beq.n	80017e2 <HAL_GPIO_Init+0x22e>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a53      	ldr	r2, [pc, #332]	; (80018f4 <HAL_GPIO_Init+0x340>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d019      	beq.n	80017de <HAL_GPIO_Init+0x22a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a52      	ldr	r2, [pc, #328]	; (80018f8 <HAL_GPIO_Init+0x344>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d013      	beq.n	80017da <HAL_GPIO_Init+0x226>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a51      	ldr	r2, [pc, #324]	; (80018fc <HAL_GPIO_Init+0x348>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d00d      	beq.n	80017d6 <HAL_GPIO_Init+0x222>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a50      	ldr	r2, [pc, #320]	; (8001900 <HAL_GPIO_Init+0x34c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d007      	beq.n	80017d2 <HAL_GPIO_Init+0x21e>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a4f      	ldr	r2, [pc, #316]	; (8001904 <HAL_GPIO_Init+0x350>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d101      	bne.n	80017ce <HAL_GPIO_Init+0x21a>
 80017ca:	2309      	movs	r3, #9
 80017cc:	e012      	b.n	80017f4 <HAL_GPIO_Init+0x240>
 80017ce:	230a      	movs	r3, #10
 80017d0:	e010      	b.n	80017f4 <HAL_GPIO_Init+0x240>
 80017d2:	2308      	movs	r3, #8
 80017d4:	e00e      	b.n	80017f4 <HAL_GPIO_Init+0x240>
 80017d6:	2307      	movs	r3, #7
 80017d8:	e00c      	b.n	80017f4 <HAL_GPIO_Init+0x240>
 80017da:	2306      	movs	r3, #6
 80017dc:	e00a      	b.n	80017f4 <HAL_GPIO_Init+0x240>
 80017de:	2305      	movs	r3, #5
 80017e0:	e008      	b.n	80017f4 <HAL_GPIO_Init+0x240>
 80017e2:	2304      	movs	r3, #4
 80017e4:	e006      	b.n	80017f4 <HAL_GPIO_Init+0x240>
 80017e6:	2303      	movs	r3, #3
 80017e8:	e004      	b.n	80017f4 <HAL_GPIO_Init+0x240>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e002      	b.n	80017f4 <HAL_GPIO_Init+0x240>
 80017ee:	2301      	movs	r3, #1
 80017f0:	e000      	b.n	80017f4 <HAL_GPIO_Init+0x240>
 80017f2:	2300      	movs	r3, #0
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	f002 0203 	and.w	r2, r2, #3
 80017fa:	0092      	lsls	r2, r2, #2
 80017fc:	4093      	lsls	r3, r2
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001804:	4935      	ldr	r1, [pc, #212]	; (80018dc <HAL_GPIO_Init+0x328>)
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	089b      	lsrs	r3, r3, #2
 800180a:	3302      	adds	r3, #2
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001812:	4b3d      	ldr	r3, [pc, #244]	; (8001908 <HAL_GPIO_Init+0x354>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001836:	4a34      	ldr	r2, [pc, #208]	; (8001908 <HAL_GPIO_Init+0x354>)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800183c:	4b32      	ldr	r3, [pc, #200]	; (8001908 <HAL_GPIO_Init+0x354>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001860:	4a29      	ldr	r2, [pc, #164]	; (8001908 <HAL_GPIO_Init+0x354>)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001866:	4b28      	ldr	r3, [pc, #160]	; (8001908 <HAL_GPIO_Init+0x354>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	43db      	mvns	r3, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800188a:	4a1f      	ldr	r2, [pc, #124]	; (8001908 <HAL_GPIO_Init+0x354>)
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001890:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <HAL_GPIO_Init+0x354>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018b4:	4a14      	ldr	r2, [pc, #80]	; (8001908 <HAL_GPIO_Init+0x354>)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3301      	adds	r3, #1
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	2b0f      	cmp	r3, #15
 80018c4:	f67f ae86 	bls.w	80015d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80018c8:	bf00      	nop
 80018ca:	bf00      	nop
 80018cc:	3724      	adds	r7, #36	; 0x24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40013800 	.word	0x40013800
 80018e0:	40020000 	.word	0x40020000
 80018e4:	40020400 	.word	0x40020400
 80018e8:	40020800 	.word	0x40020800
 80018ec:	40020c00 	.word	0x40020c00
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40021400 	.word	0x40021400
 80018f8:	40021800 	.word	0x40021800
 80018fc:	40021c00 	.word	0x40021c00
 8001900:	40022000 	.word	0x40022000
 8001904:	40022400 	.word	0x40022400
 8001908:	40013c00 	.word	0x40013c00

0800190c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	807b      	strh	r3, [r7, #2]
 8001918:	4613      	mov	r3, r2
 800191a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800191c:	787b      	ldrb	r3, [r7, #1]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001922:	887a      	ldrh	r2, [r7, #2]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001928:	e003      	b.n	8001932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800192a:	887b      	ldrh	r3, [r7, #2]
 800192c:	041a      	lsls	r2, r3, #16
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	619a      	str	r2, [r3, #24]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a04      	ldr	r2, [pc, #16]	; (800195c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800194a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40007000 	.word	0x40007000

08001960 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001968:	2300      	movs	r3, #0
 800196a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e291      	b.n	8001e9a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 8087 	beq.w	8001a92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001984:	4b96      	ldr	r3, [pc, #600]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 030c 	and.w	r3, r3, #12
 800198c:	2b04      	cmp	r3, #4
 800198e:	d00c      	beq.n	80019aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001990:	4b93      	ldr	r3, [pc, #588]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b08      	cmp	r3, #8
 800199a:	d112      	bne.n	80019c2 <HAL_RCC_OscConfig+0x62>
 800199c:	4b90      	ldr	r3, [pc, #576]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019a8:	d10b      	bne.n	80019c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019aa:	4b8d      	ldr	r3, [pc, #564]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d06c      	beq.n	8001a90 <HAL_RCC_OscConfig+0x130>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d168      	bne.n	8001a90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e26b      	b.n	8001e9a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ca:	d106      	bne.n	80019da <HAL_RCC_OscConfig+0x7a>
 80019cc:	4b84      	ldr	r3, [pc, #528]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a83      	ldr	r2, [pc, #524]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 80019d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	e02e      	b.n	8001a38 <HAL_RCC_OscConfig+0xd8>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10c      	bne.n	80019fc <HAL_RCC_OscConfig+0x9c>
 80019e2:	4b7f      	ldr	r3, [pc, #508]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a7e      	ldr	r2, [pc, #504]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 80019e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	4b7c      	ldr	r3, [pc, #496]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a7b      	ldr	r2, [pc, #492]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 80019f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e01d      	b.n	8001a38 <HAL_RCC_OscConfig+0xd8>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0xc0>
 8001a06:	4b76      	ldr	r3, [pc, #472]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a75      	ldr	r2, [pc, #468]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b73      	ldr	r3, [pc, #460]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a72      	ldr	r2, [pc, #456]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e00b      	b.n	8001a38 <HAL_RCC_OscConfig+0xd8>
 8001a20:	4b6f      	ldr	r3, [pc, #444]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a6e      	ldr	r2, [pc, #440]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b6c      	ldr	r3, [pc, #432]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a6b      	ldr	r2, [pc, #428]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d013      	beq.n	8001a68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff f890 	bl	8000b64 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff f88c 	bl	8000b64 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	; 0x64
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e21f      	b.n	8001e9a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5a:	4b61      	ldr	r3, [pc, #388]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0xe8>
 8001a66:	e014      	b.n	8001a92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a68:	f7ff f87c 	bl	8000b64 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a70:	f7ff f878 	bl	8000b64 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b64      	cmp	r3, #100	; 0x64
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e20b      	b.n	8001e9a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a82:	4b57      	ldr	r3, [pc, #348]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x110>
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d069      	beq.n	8001b72 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a9e:	4b50      	ldr	r3, [pc, #320]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00b      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aaa:	4b4d      	ldr	r3, [pc, #308]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d11c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x190>
 8001ab6:	4b4a      	ldr	r3, [pc, #296]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d116      	bne.n	8001af0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac2:	4b47      	ldr	r3, [pc, #284]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d005      	beq.n	8001ada <HAL_RCC_OscConfig+0x17a>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d001      	beq.n	8001ada <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e1df      	b.n	8001e9a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ada:	4b41      	ldr	r3, [pc, #260]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	493d      	ldr	r1, [pc, #244]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aee:	e040      	b.n	8001b72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d023      	beq.n	8001b40 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af8:	4b39      	ldr	r3, [pc, #228]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a38      	ldr	r2, [pc, #224]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7ff f82e 	bl	8000b64 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0c:	f7ff f82a 	bl	8000b64 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e1bd      	b.n	8001e9a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1e:	4b30      	ldr	r3, [pc, #192]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2a:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4929      	ldr	r1, [pc, #164]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]
 8001b3e:	e018      	b.n	8001b72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b40:	4b27      	ldr	r3, [pc, #156]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a26      	ldr	r2, [pc, #152]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001b46:	f023 0301 	bic.w	r3, r3, #1
 8001b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff f80a 	bl	8000b64 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b54:	f7ff f806 	bl	8000b64 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e199      	b.n	8001e9a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b66:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d038      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d019      	beq.n	8001bba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b86:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b8a:	4a15      	ldr	r2, [pc, #84]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b92:	f7fe ffe7 	bl	8000b64 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9a:	f7fe ffe3 	bl	8000b64 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e176      	b.n	8001e9a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x23a>
 8001bb8:	e01a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bbe:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <HAL_RCC_OscConfig+0x280>)
 8001bc0:	f023 0301 	bic.w	r3, r3, #1
 8001bc4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc6:	f7fe ffcd 	bl	8000b64 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bcc:	e00a      	b.n	8001be4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bce:	f7fe ffc9 	bl	8000b64 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d903      	bls.n	8001be4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e15c      	b.n	8001e9a <HAL_RCC_OscConfig+0x53a>
 8001be0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be4:	4b91      	ldr	r3, [pc, #580]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1ee      	bne.n	8001bce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80a4 	beq.w	8001d46 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfe:	4b8b      	ldr	r3, [pc, #556]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10d      	bne.n	8001c26 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	4b88      	ldr	r3, [pc, #544]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	4a87      	ldr	r2, [pc, #540]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c14:	6413      	str	r3, [r2, #64]	; 0x40
 8001c16:	4b85      	ldr	r3, [pc, #532]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c22:	2301      	movs	r3, #1
 8001c24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c26:	4b82      	ldr	r3, [pc, #520]	; (8001e30 <HAL_RCC_OscConfig+0x4d0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d118      	bne.n	8001c64 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c32:	4b7f      	ldr	r3, [pc, #508]	; (8001e30 <HAL_RCC_OscConfig+0x4d0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a7e      	ldr	r2, [pc, #504]	; (8001e30 <HAL_RCC_OscConfig+0x4d0>)
 8001c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3e:	f7fe ff91 	bl	8000b64 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c46:	f7fe ff8d 	bl	8000b64 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b64      	cmp	r3, #100	; 0x64
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e120      	b.n	8001e9a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c58:	4b75      	ldr	r3, [pc, #468]	; (8001e30 <HAL_RCC_OscConfig+0x4d0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x31a>
 8001c6c:	4b6f      	ldr	r3, [pc, #444]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c70:	4a6e      	ldr	r2, [pc, #440]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6713      	str	r3, [r2, #112]	; 0x70
 8001c78:	e02d      	b.n	8001cd6 <HAL_RCC_OscConfig+0x376>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x33c>
 8001c82:	4b6a      	ldr	r3, [pc, #424]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c86:	4a69      	ldr	r2, [pc, #420]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001c88:	f023 0301 	bic.w	r3, r3, #1
 8001c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8e:	4b67      	ldr	r3, [pc, #412]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c92:	4a66      	ldr	r2, [pc, #408]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001c94:	f023 0304 	bic.w	r3, r3, #4
 8001c98:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9a:	e01c      	b.n	8001cd6 <HAL_RCC_OscConfig+0x376>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b05      	cmp	r3, #5
 8001ca2:	d10c      	bne.n	8001cbe <HAL_RCC_OscConfig+0x35e>
 8001ca4:	4b61      	ldr	r3, [pc, #388]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca8:	4a60      	ldr	r2, [pc, #384]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001caa:	f043 0304 	orr.w	r3, r3, #4
 8001cae:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb0:	4b5e      	ldr	r3, [pc, #376]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb4:	4a5d      	ldr	r2, [pc, #372]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6713      	str	r3, [r2, #112]	; 0x70
 8001cbc:	e00b      	b.n	8001cd6 <HAL_RCC_OscConfig+0x376>
 8001cbe:	4b5b      	ldr	r3, [pc, #364]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc2:	4a5a      	ldr	r2, [pc, #360]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cca:	4b58      	ldr	r3, [pc, #352]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cce:	4a57      	ldr	r2, [pc, #348]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001cd0:	f023 0304 	bic.w	r3, r3, #4
 8001cd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d015      	beq.n	8001d0a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cde:	f7fe ff41 	bl	8000b64 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce4:	e00a      	b.n	8001cfc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce6:	f7fe ff3d 	bl	8000b64 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e0ce      	b.n	8001e9a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfc:	4b4b      	ldr	r3, [pc, #300]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0ee      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x386>
 8001d08:	e014      	b.n	8001d34 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0a:	f7fe ff2b 	bl	8000b64 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d12:	f7fe ff27 	bl	8000b64 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e0b8      	b.n	8001e9a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d28:	4b40      	ldr	r3, [pc, #256]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1ee      	bne.n	8001d12 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d105      	bne.n	8001d46 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d3a:	4b3c      	ldr	r3, [pc, #240]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	4a3b      	ldr	r2, [pc, #236]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 80a4 	beq.w	8001e98 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d50:	4b36      	ldr	r3, [pc, #216]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 030c 	and.w	r3, r3, #12
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d06b      	beq.n	8001e34 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d149      	bne.n	8001df8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d64:	4b31      	ldr	r3, [pc, #196]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a30      	ldr	r2, [pc, #192]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7fe fef8 	bl	8000b64 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d78:	f7fe fef4 	bl	8000b64 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e087      	b.n	8001e9a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8a:	4b28      	ldr	r3, [pc, #160]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69da      	ldr	r2, [r3, #28]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	019b      	lsls	r3, r3, #6
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dac:	085b      	lsrs	r3, r3, #1
 8001dae:	3b01      	subs	r3, #1
 8001db0:	041b      	lsls	r3, r3, #16
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	061b      	lsls	r3, r3, #24
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	4a1b      	ldr	r2, [pc, #108]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001dbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001dc2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a18      	ldr	r2, [pc, #96]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001dca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7fe fec8 	bl	8000b64 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7fe fec4 	bl	8000b64 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e057      	b.n	8001e9a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x478>
 8001df6:	e04f      	b.n	8001e98 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0b      	ldr	r2, [pc, #44]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7fe feae 	bl	8000b64 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7fe feaa 	bl	8000b64 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e03d      	b.n	8001e9a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1e:	4b03      	ldr	r3, [pc, #12]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x4ac>
 8001e2a:	e035      	b.n	8001e98 <HAL_RCC_OscConfig+0x538>
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e34:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <HAL_RCC_OscConfig+0x544>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d028      	beq.n	8001e94 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d121      	bne.n	8001e94 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d11a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e64:	4013      	ands	r3, r2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e6a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d111      	bne.n	8001e94 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7a:	085b      	lsrs	r3, r3, #1
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d107      	bne.n	8001e94 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800

08001ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0d0      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec0:	4b6a      	ldr	r3, [pc, #424]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d910      	bls.n	8001ef0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ece:	4b67      	ldr	r3, [pc, #412]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 020f 	bic.w	r2, r3, #15
 8001ed6:	4965      	ldr	r1, [pc, #404]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b63      	ldr	r3, [pc, #396]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0b8      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d020      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f08:	4b59      	ldr	r3, [pc, #356]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	4a58      	ldr	r2, [pc, #352]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8001f0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f20:	4b53      	ldr	r3, [pc, #332]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	4a52      	ldr	r2, [pc, #328]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8001f26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2c:	4b50      	ldr	r3, [pc, #320]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	494d      	ldr	r1, [pc, #308]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d040      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d115      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e07f      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6a:	4b41      	ldr	r3, [pc, #260]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e073      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7a:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e06b      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f8a:	4b39      	ldr	r3, [pc, #228]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f023 0203 	bic.w	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4936      	ldr	r1, [pc, #216]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f9c:	f7fe fde2 	bl	8000b64 <HAL_GetTick>
 8001fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa4:	f7fe fdde 	bl	8000b64 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e053      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 020c 	and.w	r2, r3, #12
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d1eb      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fcc:	4b27      	ldr	r3, [pc, #156]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d210      	bcs.n	8001ffc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 020f 	bic.w	r2, r3, #15
 8001fe2:	4922      	ldr	r1, [pc, #136]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e032      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d008      	beq.n	800201a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002008:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4916      	ldr	r1, [pc, #88]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	490e      	ldr	r1, [pc, #56]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800203a:	f000 f821 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 800203e:	4602      	mov	r2, r0
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	490a      	ldr	r1, [pc, #40]	; (8002074 <HAL_RCC_ClockConfig+0x1cc>)
 800204c:	5ccb      	ldrb	r3, [r1, r3]
 800204e:	fa22 f303 	lsr.w	r3, r2, r3
 8002052:	4a09      	ldr	r2, [pc, #36]	; (8002078 <HAL_RCC_ClockConfig+0x1d0>)
 8002054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_RCC_ClockConfig+0x1d4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fd3e 	bl	8000adc <HAL_InitTick>

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023c00 	.word	0x40023c00
 8002070:	40023800 	.word	0x40023800
 8002074:	080040e0 	.word	0x080040e0
 8002078:	20000008 	.word	0x20000008
 800207c:	2000000c 	.word	0x2000000c

08002080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002084:	b094      	sub	sp, #80	; 0x50
 8002086:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	647b      	str	r3, [r7, #68]	; 0x44
 800208c:	2300      	movs	r3, #0
 800208e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002090:	2300      	movs	r3, #0
 8002092:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002098:	4b79      	ldr	r3, [pc, #484]	; (8002280 <HAL_RCC_GetSysClockFreq+0x200>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d00d      	beq.n	80020c0 <HAL_RCC_GetSysClockFreq+0x40>
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	f200 80e1 	bhi.w	800226c <HAL_RCC_GetSysClockFreq+0x1ec>
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <HAL_RCC_GetSysClockFreq+0x34>
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d003      	beq.n	80020ba <HAL_RCC_GetSysClockFreq+0x3a>
 80020b2:	e0db      	b.n	800226c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020b4:	4b73      	ldr	r3, [pc, #460]	; (8002284 <HAL_RCC_GetSysClockFreq+0x204>)
 80020b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020b8:	e0db      	b.n	8002272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020ba:	4b73      	ldr	r3, [pc, #460]	; (8002288 <HAL_RCC_GetSysClockFreq+0x208>)
 80020bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020be:	e0d8      	b.n	8002272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020c0:	4b6f      	ldr	r3, [pc, #444]	; (8002280 <HAL_RCC_GetSysClockFreq+0x200>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020c8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80020ca:	4b6d      	ldr	r3, [pc, #436]	; (8002280 <HAL_RCC_GetSysClockFreq+0x200>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d063      	beq.n	800219e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d6:	4b6a      	ldr	r3, [pc, #424]	; (8002280 <HAL_RCC_GetSysClockFreq+0x200>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	099b      	lsrs	r3, r3, #6
 80020dc:	2200      	movs	r2, #0
 80020de:	63bb      	str	r3, [r7, #56]	; 0x38
 80020e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80020e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020e8:	633b      	str	r3, [r7, #48]	; 0x30
 80020ea:	2300      	movs	r3, #0
 80020ec:	637b      	str	r3, [r7, #52]	; 0x34
 80020ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80020f2:	4622      	mov	r2, r4
 80020f4:	462b      	mov	r3, r5
 80020f6:	f04f 0000 	mov.w	r0, #0
 80020fa:	f04f 0100 	mov.w	r1, #0
 80020fe:	0159      	lsls	r1, r3, #5
 8002100:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002104:	0150      	lsls	r0, r2, #5
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4621      	mov	r1, r4
 800210c:	1a51      	subs	r1, r2, r1
 800210e:	6139      	str	r1, [r7, #16]
 8002110:	4629      	mov	r1, r5
 8002112:	eb63 0301 	sbc.w	r3, r3, r1
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	f04f 0300 	mov.w	r3, #0
 8002120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002124:	4659      	mov	r1, fp
 8002126:	018b      	lsls	r3, r1, #6
 8002128:	4651      	mov	r1, sl
 800212a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800212e:	4651      	mov	r1, sl
 8002130:	018a      	lsls	r2, r1, #6
 8002132:	4651      	mov	r1, sl
 8002134:	ebb2 0801 	subs.w	r8, r2, r1
 8002138:	4659      	mov	r1, fp
 800213a:	eb63 0901 	sbc.w	r9, r3, r1
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	f04f 0300 	mov.w	r3, #0
 8002146:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800214a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800214e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002152:	4690      	mov	r8, r2
 8002154:	4699      	mov	r9, r3
 8002156:	4623      	mov	r3, r4
 8002158:	eb18 0303 	adds.w	r3, r8, r3
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	462b      	mov	r3, r5
 8002160:	eb49 0303 	adc.w	r3, r9, r3
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	f04f 0300 	mov.w	r3, #0
 800216e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002172:	4629      	mov	r1, r5
 8002174:	024b      	lsls	r3, r1, #9
 8002176:	4621      	mov	r1, r4
 8002178:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800217c:	4621      	mov	r1, r4
 800217e:	024a      	lsls	r2, r1, #9
 8002180:	4610      	mov	r0, r2
 8002182:	4619      	mov	r1, r3
 8002184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002186:	2200      	movs	r2, #0
 8002188:	62bb      	str	r3, [r7, #40]	; 0x28
 800218a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800218c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002190:	f7fe f83a 	bl	8000208 <__aeabi_uldivmod>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4613      	mov	r3, r2
 800219a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800219c:	e058      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800219e:	4b38      	ldr	r3, [pc, #224]	; (8002280 <HAL_RCC_GetSysClockFreq+0x200>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	099b      	lsrs	r3, r3, #6
 80021a4:	2200      	movs	r2, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	4611      	mov	r1, r2
 80021aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021ae:	623b      	str	r3, [r7, #32]
 80021b0:	2300      	movs	r3, #0
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
 80021b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021b8:	4642      	mov	r2, r8
 80021ba:	464b      	mov	r3, r9
 80021bc:	f04f 0000 	mov.w	r0, #0
 80021c0:	f04f 0100 	mov.w	r1, #0
 80021c4:	0159      	lsls	r1, r3, #5
 80021c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021ca:	0150      	lsls	r0, r2, #5
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4641      	mov	r1, r8
 80021d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80021d6:	4649      	mov	r1, r9
 80021d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021f0:	ebb2 040a 	subs.w	r4, r2, sl
 80021f4:	eb63 050b 	sbc.w	r5, r3, fp
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	00eb      	lsls	r3, r5, #3
 8002202:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002206:	00e2      	lsls	r2, r4, #3
 8002208:	4614      	mov	r4, r2
 800220a:	461d      	mov	r5, r3
 800220c:	4643      	mov	r3, r8
 800220e:	18e3      	adds	r3, r4, r3
 8002210:	603b      	str	r3, [r7, #0]
 8002212:	464b      	mov	r3, r9
 8002214:	eb45 0303 	adc.w	r3, r5, r3
 8002218:	607b      	str	r3, [r7, #4]
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002226:	4629      	mov	r1, r5
 8002228:	028b      	lsls	r3, r1, #10
 800222a:	4621      	mov	r1, r4
 800222c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002230:	4621      	mov	r1, r4
 8002232:	028a      	lsls	r2, r1, #10
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800223a:	2200      	movs	r2, #0
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	61fa      	str	r2, [r7, #28]
 8002240:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002244:	f7fd ffe0 	bl	8000208 <__aeabi_uldivmod>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4613      	mov	r3, r2
 800224e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HAL_RCC_GetSysClockFreq+0x200>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	0c1b      	lsrs	r3, r3, #16
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	3301      	adds	r3, #1
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002260:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002264:	fbb2 f3f3 	udiv	r3, r2, r3
 8002268:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800226a:	e002      	b.n	8002272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_RCC_GetSysClockFreq+0x204>)
 800226e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002274:	4618      	mov	r0, r3
 8002276:	3750      	adds	r7, #80	; 0x50
 8002278:	46bd      	mov	sp, r7
 800227a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800
 8002284:	00f42400 	.word	0x00f42400
 8002288:	007a1200 	.word	0x007a1200

0800228c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20000008 	.word	0x20000008

080022a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022a8:	f7ff fff0 	bl	800228c <HAL_RCC_GetHCLKFreq>
 80022ac:	4602      	mov	r2, r0
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	0a9b      	lsrs	r3, r3, #10
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	4903      	ldr	r1, [pc, #12]	; (80022c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ba:	5ccb      	ldrb	r3, [r1, r3]
 80022bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40023800 	.word	0x40023800
 80022c8:	080040f0 	.word	0x080040f0

080022cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022d0:	f7ff ffdc 	bl	800228c <HAL_RCC_GetHCLKFreq>
 80022d4:	4602      	mov	r2, r0
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	0b5b      	lsrs	r3, r3, #13
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	4903      	ldr	r1, [pc, #12]	; (80022f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022e2:	5ccb      	ldrb	r3, [r1, r3]
 80022e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40023800 	.word	0x40023800
 80022f0:	080040f0 	.word	0x080040f0

080022f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d012      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800231c:	4b69      	ldr	r3, [pc, #420]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	4a68      	ldr	r2, [pc, #416]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002322:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002326:	6093      	str	r3, [r2, #8]
 8002328:	4b66      	ldr	r3, [pc, #408]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002330:	4964      	ldr	r1, [pc, #400]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002332:	4313      	orrs	r3, r2
 8002334:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800233e:	2301      	movs	r3, #1
 8002340:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d017      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800234e:	4b5d      	ldr	r3, [pc, #372]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002354:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235c:	4959      	ldr	r1, [pc, #356]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002368:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800236c:	d101      	bne.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800236e:	2301      	movs	r3, #1
 8002370:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800237a:	2301      	movs	r3, #1
 800237c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d017      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800238a:	4b4e      	ldr	r3, [pc, #312]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800238c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002390:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	494a      	ldr	r1, [pc, #296]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023a8:	d101      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80023aa:	2301      	movs	r3, #1
 80023ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80023b6:	2301      	movs	r3, #1
 80023b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80023c6:	2301      	movs	r3, #1
 80023c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0320 	and.w	r3, r3, #32
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 808b 	beq.w	80024ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80023d8:	4b3a      	ldr	r3, [pc, #232]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	4a39      	ldr	r2, [pc, #228]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e2:	6413      	str	r3, [r2, #64]	; 0x40
 80023e4:	4b37      	ldr	r3, [pc, #220]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80023f0:	4b35      	ldr	r3, [pc, #212]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a34      	ldr	r2, [pc, #208]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023fc:	f7fe fbb2 	bl	8000b64 <HAL_GetTick>
 8002400:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002404:	f7fe fbae 	bl	8000b64 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b64      	cmp	r3, #100	; 0x64
 8002410:	d901      	bls.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e357      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002416:	4b2c      	ldr	r3, [pc, #176]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002422:	4b28      	ldr	r3, [pc, #160]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800242a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d035      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	429a      	cmp	r2, r3
 800243e:	d02e      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002440:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002448:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800244a:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244e:	4a1d      	ldr	r2, [pc, #116]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002454:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002456:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245a:	4a1a      	ldr	r2, [pc, #104]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800245c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002460:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002462:	4a18      	ldr	r2, [pc, #96]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002468:	4b16      	ldr	r3, [pc, #88]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b01      	cmp	r3, #1
 8002472:	d114      	bne.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7fe fb76 	bl	8000b64 <HAL_GetTick>
 8002478:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247a:	e00a      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800247c:	f7fe fb72 	bl	8000b64 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	f241 3288 	movw	r2, #5000	; 0x1388
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e319      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002492:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0ee      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024aa:	d111      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80024ba:	400b      	ands	r3, r1
 80024bc:	4901      	ldr	r1, [pc, #4]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	608b      	str	r3, [r1, #8]
 80024c2:	e00b      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40007000 	.word	0x40007000
 80024cc:	0ffffcff 	.word	0x0ffffcff
 80024d0:	4baa      	ldr	r3, [pc, #680]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4aa9      	ldr	r2, [pc, #676]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80024da:	6093      	str	r3, [r2, #8]
 80024dc:	4ba7      	ldr	r3, [pc, #668]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e8:	49a4      	ldr	r1, [pc, #656]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d010      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024fa:	4ba0      	ldr	r3, [pc, #640]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002500:	4a9e      	ldr	r2, [pc, #632]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002502:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002506:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800250a:	4b9c      	ldr	r3, [pc, #624]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800250c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002514:	4999      	ldr	r1, [pc, #612]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00a      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002528:	4b94      	ldr	r3, [pc, #592]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002536:	4991      	ldr	r1, [pc, #580]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00a      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800254a:	4b8c      	ldr	r3, [pc, #560]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800254c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002550:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002558:	4988      	ldr	r1, [pc, #544]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00a      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800256c:	4b83      	ldr	r3, [pc, #524]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800256e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002572:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800257a:	4980      	ldr	r1, [pc, #512]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00a      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800258e:	4b7b      	ldr	r3, [pc, #492]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002594:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	4977      	ldr	r1, [pc, #476]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00a      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025b0:	4b72      	ldr	r3, [pc, #456]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b6:	f023 0203 	bic.w	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	496f      	ldr	r1, [pc, #444]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00a      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025d2:	4b6a      	ldr	r3, [pc, #424]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d8:	f023 020c 	bic.w	r2, r3, #12
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e0:	4966      	ldr	r1, [pc, #408]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00a      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025f4:	4b61      	ldr	r3, [pc, #388]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002602:	495e      	ldr	r1, [pc, #376]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00a      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002616:	4b59      	ldr	r3, [pc, #356]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002624:	4955      	ldr	r1, [pc, #340]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00a      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002638:	4b50      	ldr	r3, [pc, #320]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002646:	494d      	ldr	r1, [pc, #308]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800265a:	4b48      	ldr	r3, [pc, #288]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800265c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002660:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	4944      	ldr	r1, [pc, #272]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800267c:	4b3f      	ldr	r3, [pc, #252]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002682:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268a:	493c      	ldr	r1, [pc, #240]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00a      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800269e:	4b37      	ldr	r3, [pc, #220]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ac:	4933      	ldr	r1, [pc, #204]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80026c0:	4b2e      	ldr	r3, [pc, #184]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026ce:	492b      	ldr	r1, [pc, #172]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d011      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026e2:	4b26      	ldr	r3, [pc, #152]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026f0:	4922      	ldr	r1, [pc, #136]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002700:	d101      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002702:	2301      	movs	r3, #1
 8002704:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002712:	2301      	movs	r3, #1
 8002714:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002722:	4b16      	ldr	r3, [pc, #88]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002728:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002730:	4912      	ldr	r1, [pc, #72]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002732:	4313      	orrs	r3, r2
 8002734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00b      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002744:	4b0d      	ldr	r3, [pc, #52]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002754:	4909      	ldr	r1, [pc, #36]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d006      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 80d9 	beq.w	8002922 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002770:	4b02      	ldr	r3, [pc, #8]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a01      	ldr	r2, [pc, #4]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002776:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800277a:	e001      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800277c:	40023800 	.word	0x40023800
 8002780:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002782:	f7fe f9ef 	bl	8000b64 <HAL_GetTick>
 8002786:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002788:	e008      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800278a:	f7fe f9eb 	bl	8000b64 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b64      	cmp	r3, #100	; 0x64
 8002796:	d901      	bls.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e194      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800279c:	4b6c      	ldr	r3, [pc, #432]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1f0      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d021      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d11d      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027bc:	4b64      	ldr	r3, [pc, #400]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027c2:	0c1b      	lsrs	r3, r3, #16
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027ca:	4b61      	ldr	r3, [pc, #388]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027d0:	0e1b      	lsrs	r3, r3, #24
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	019a      	lsls	r2, r3, #6
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	041b      	lsls	r3, r3, #16
 80027e2:	431a      	orrs	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	061b      	lsls	r3, r3, #24
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	071b      	lsls	r3, r3, #28
 80027f0:	4957      	ldr	r1, [pc, #348]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d004      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002808:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800280c:	d00a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002816:	2b00      	cmp	r3, #0
 8002818:	d02e      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002822:	d129      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002824:	4b4a      	ldr	r3, [pc, #296]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800282a:	0c1b      	lsrs	r3, r3, #16
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002832:	4b47      	ldr	r3, [pc, #284]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002838:	0f1b      	lsrs	r3, r3, #28
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	019a      	lsls	r2, r3, #6
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	041b      	lsls	r3, r3, #16
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	061b      	lsls	r3, r3, #24
 8002852:	431a      	orrs	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	071b      	lsls	r3, r3, #28
 8002858:	493d      	ldr	r1, [pc, #244]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002860:	4b3b      	ldr	r3, [pc, #236]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002866:	f023 021f 	bic.w	r2, r3, #31
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	3b01      	subs	r3, #1
 8002870:	4937      	ldr	r1, [pc, #220]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d01d      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002884:	4b32      	ldr	r3, [pc, #200]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800288a:	0e1b      	lsrs	r3, r3, #24
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002892:	4b2f      	ldr	r3, [pc, #188]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002898:	0f1b      	lsrs	r3, r3, #28
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	019a      	lsls	r2, r3, #6
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	041b      	lsls	r3, r3, #16
 80028ac:	431a      	orrs	r2, r3
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	061b      	lsls	r3, r3, #24
 80028b2:	431a      	orrs	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	071b      	lsls	r3, r3, #28
 80028b8:	4925      	ldr	r1, [pc, #148]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d011      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	019a      	lsls	r2, r3, #6
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	041b      	lsls	r3, r3, #16
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	061b      	lsls	r3, r3, #24
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	071b      	lsls	r3, r3, #28
 80028e8:	4919      	ldr	r1, [pc, #100]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028f0:	4b17      	ldr	r3, [pc, #92]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a16      	ldr	r2, [pc, #88]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028fc:	f7fe f932 	bl	8000b64 <HAL_GetTick>
 8002900:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002904:	f7fe f92e 	bl	8000b64 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	; 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e0d7      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002916:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	2b01      	cmp	r3, #1
 8002926:	f040 80cd 	bne.w	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a08      	ldr	r2, [pc, #32]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002934:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002936:	f7fe f915 	bl	8000b64 <HAL_GetTick>
 800293a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800293c:	e00a      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800293e:	f7fe f911 	bl	8000b64 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b64      	cmp	r3, #100	; 0x64
 800294a:	d903      	bls.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e0ba      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002950:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002954:	4b5e      	ldr	r3, [pc, #376]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800295c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002960:	d0ed      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002972:	2b00      	cmp	r3, #0
 8002974:	d009      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800297e:	2b00      	cmp	r3, #0
 8002980:	d02e      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d12a      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800298a:	4b51      	ldr	r3, [pc, #324]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002990:	0c1b      	lsrs	r3, r3, #16
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002998:	4b4d      	ldr	r3, [pc, #308]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	0f1b      	lsrs	r3, r3, #28
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	019a      	lsls	r2, r3, #6
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	041b      	lsls	r3, r3, #16
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	061b      	lsls	r3, r3, #24
 80029b8:	431a      	orrs	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	071b      	lsls	r3, r3, #28
 80029be:	4944      	ldr	r1, [pc, #272]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80029c6:	4b42      	ldr	r3, [pc, #264]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	3b01      	subs	r3, #1
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	493d      	ldr	r1, [pc, #244]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d022      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029f4:	d11d      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029f6:	4b36      	ldr	r3, [pc, #216]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fc:	0e1b      	lsrs	r3, r3, #24
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a04:	4b32      	ldr	r3, [pc, #200]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0a:	0f1b      	lsrs	r3, r3, #28
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	019a      	lsls	r2, r3, #6
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	041b      	lsls	r3, r3, #16
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	061b      	lsls	r3, r3, #24
 8002a24:	431a      	orrs	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	071b      	lsls	r3, r3, #28
 8002a2a:	4929      	ldr	r1, [pc, #164]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d028      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a3e:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a44:	0e1b      	lsrs	r3, r3, #24
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a4c:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a52:	0c1b      	lsrs	r3, r3, #16
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	019a      	lsls	r2, r3, #6
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	041b      	lsls	r3, r3, #16
 8002a64:	431a      	orrs	r2, r3
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	061b      	lsls	r3, r3, #24
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	071b      	lsls	r3, r3, #28
 8002a72:	4917      	ldr	r1, [pc, #92]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a7a:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	4911      	ldr	r1, [pc, #68]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a90:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a0e      	ldr	r2, [pc, #56]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a9c:	f7fe f862 	bl	8000b64 <HAL_GetTick>
 8002aa0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002aa4:	f7fe f85e 	bl	8000b64 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	; 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e007      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ac2:	d1ef      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3720      	adds	r7, #32
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40023800 	.word	0x40023800

08002ad4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e040      	b.n	8002b68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7fd fe94 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2224      	movs	r2, #36	; 0x24
 8002b00:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0201 	bic.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fbf2 	bl	80032fc <UART_SetConfig>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e022      	b.n	8002b68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fe4a 	bl	80037c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 fed1 	bl	8003908 <UART_CheckIdleState>
 8002b66:	4603      	mov	r3, r0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08a      	sub	sp, #40	; 0x28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b82:	2b20      	cmp	r3, #32
 8002b84:	d165      	bne.n	8002c52 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <HAL_UART_Transmit_DMA+0x22>
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e05e      	b.n	8002c54 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	88fa      	ldrh	r2, [r7, #6]
 8002ba0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	88fa      	ldrh	r2, [r7, #6]
 8002ba8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2221      	movs	r2, #33	; 0x21
 8002bb8:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d027      	beq.n	8002c12 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	4a25      	ldr	r2, [pc, #148]	; (8002c5c <HAL_UART_Transmit_DMA+0xec>)
 8002bc8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bce:	4a24      	ldr	r2, [pc, #144]	; (8002c60 <HAL_UART_Transmit_DMA+0xf0>)
 8002bd0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	4a23      	ldr	r2, [pc, #140]	; (8002c64 <HAL_UART_Transmit_DMA+0xf4>)
 8002bd8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bde:	2200      	movs	r2, #0
 8002be0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bea:	4619      	mov	r1, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	3328      	adds	r3, #40	; 0x28
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	f7fe f981 	bl	8000efc <HAL_DMA_Start_IT>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2210      	movs	r2, #16
 8002c04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e020      	b.n	8002c54 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2240      	movs	r2, #64	; 0x40
 8002c18:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	3308      	adds	r3, #8
 8002c20:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	e853 3f00 	ldrex	r3, [r3]
 8002c28:	613b      	str	r3, [r7, #16]
   return(result);
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	3308      	adds	r3, #8
 8002c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3a:	623a      	str	r2, [r7, #32]
 8002c3c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3e:	69f9      	ldr	r1, [r7, #28]
 8002c40:	6a3a      	ldr	r2, [r7, #32]
 8002c42:	e841 2300 	strex	r3, r2, [r1]
 8002c46:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1e5      	bne.n	8002c1a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e000      	b.n	8002c54 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8002c52:	2302      	movs	r3, #2
  }
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3728      	adds	r7, #40	; 0x28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	08003d59 	.word	0x08003d59
 8002c60:	08003def 	.word	0x08003def
 8002c64:	08003f71 	.word	0x08003f71

08002c68 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08a      	sub	sp, #40	; 0x28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	4613      	mov	r3, r2
 8002c74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	d132      	bne.n	8002ce6 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_UART_Receive_DMA+0x24>
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e02b      	b.n	8002ce8 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d018      	beq.n	8002cd6 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	e853 3f00 	ldrex	r3, [r3]
 8002cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	623b      	str	r3, [r7, #32]
 8002cc4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc6:	69f9      	ldr	r1, [r7, #28]
 8002cc8:	6a3a      	ldr	r2, [r7, #32]
 8002cca:	e841 2300 	strex	r3, r2, [r1]
 8002cce:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1e6      	bne.n	8002ca4 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	68b9      	ldr	r1, [r7, #8]
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 ff11 	bl	8003b04 <UART_Start_Receive_DMA>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	e000      	b.n	8002ce8 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002ce6:	2302      	movs	r3, #2
  }
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3728      	adds	r7, #40	; 0x28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b0ba      	sub	sp, #232	; 0xe8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002d1a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002d1e:	4013      	ands	r3, r2
 8002d20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002d24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d115      	bne.n	8002d58 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00f      	beq.n	8002d58 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d3c:	f003 0320 	and.w	r3, r3, #32
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d009      	beq.n	8002d58 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 8297 	beq.w	800327c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	4798      	blx	r3
      }
      return;
 8002d56:	e291      	b.n	800327c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002d58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 8117 	beq.w	8002f90 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d106      	bne.n	8002d7c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002d6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002d72:	4b85      	ldr	r3, [pc, #532]	; (8002f88 <HAL_UART_IRQHandler+0x298>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 810a 	beq.w	8002f90 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d011      	beq.n	8002dac <HAL_UART_IRQHandler+0xbc>
 8002d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00b      	beq.n	8002dac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002da2:	f043 0201 	orr.w	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d011      	beq.n	8002ddc <HAL_UART_IRQHandler+0xec>
 8002db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00b      	beq.n	8002ddc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dd2:	f043 0204 	orr.w	r2, r3, #4
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d011      	beq.n	8002e0c <HAL_UART_IRQHandler+0x11c>
 8002de8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00b      	beq.n	8002e0c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2204      	movs	r2, #4
 8002dfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e02:	f043 0202 	orr.w	r2, r3, #2
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d017      	beq.n	8002e48 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e1c:	f003 0320 	and.w	r3, r3, #32
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d105      	bne.n	8002e30 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e28:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00b      	beq.n	8002e48 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2208      	movs	r2, #8
 8002e36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e3e:	f043 0208 	orr.w	r2, r3, #8
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d012      	beq.n	8002e7a <HAL_UART_IRQHandler+0x18a>
 8002e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00c      	beq.n	8002e7a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e70:	f043 0220 	orr.w	r2, r3, #32
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 81fd 	beq.w	8003280 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e8a:	f003 0320 	and.w	r3, r3, #32
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00d      	beq.n	8002eae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec2:	2b40      	cmp	r3, #64	; 0x40
 8002ec4:	d005      	beq.n	8002ed2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ec6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002eca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d04f      	beq.n	8002f72 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fedc 	bl	8003c90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee2:	2b40      	cmp	r3, #64	; 0x40
 8002ee4:	d141      	bne.n	8002f6a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	3308      	adds	r3, #8
 8002eec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ef4:	e853 3f00 	ldrex	r3, [r3]
 8002ef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	3308      	adds	r3, #8
 8002f0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f22:	e841 2300 	strex	r3, r2, [r1]
 8002f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1d9      	bne.n	8002ee6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d013      	beq.n	8002f62 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f3e:	4a13      	ldr	r2, [pc, #76]	; (8002f8c <HAL_UART_IRQHandler+0x29c>)
 8002f40:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe f8a8 	bl	800109c <HAL_DMA_Abort_IT>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d017      	beq.n	8002f82 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f60:	e00f      	b.n	8002f82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f9b4 	bl	80032d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f68:	e00b      	b.n	8002f82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f9b0 	bl	80032d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f70:	e007      	b.n	8002f82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f9ac 	bl	80032d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002f80:	e17e      	b.n	8003280 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f82:	bf00      	nop
    return;
 8002f84:	e17c      	b.n	8003280 <HAL_UART_IRQHandler+0x590>
 8002f86:	bf00      	nop
 8002f88:	04000120 	.word	0x04000120
 8002f8c:	08003fef 	.word	0x08003fef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	f040 814c 	bne.w	8003232 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 8145 	beq.w	8003232 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 813e 	beq.w	8003232 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2210      	movs	r2, #16
 8002fbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc8:	2b40      	cmp	r3, #64	; 0x40
 8002fca:	f040 80b6 	bne.w	800313a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fda:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 8150 	beq.w	8003284 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	f080 8148 	bcs.w	8003284 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ffa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003008:	f000 8086 	beq.w	8003118 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003014:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003018:	e853 3f00 	ldrex	r3, [r3]
 800301c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003020:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003028:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003036:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800303a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003042:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003046:	e841 2300 	strex	r3, r2, [r1]
 800304a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800304e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1da      	bne.n	800300c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3308      	adds	r3, #8
 800305c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003060:	e853 3f00 	ldrex	r3, [r3]
 8003064:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003066:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003068:	f023 0301 	bic.w	r3, r3, #1
 800306c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3308      	adds	r3, #8
 8003076:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800307a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800307e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003080:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003082:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003086:	e841 2300 	strex	r3, r2, [r1]
 800308a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800308c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1e1      	bne.n	8003056 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	3308      	adds	r3, #8
 8003098:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800309c:	e853 3f00 	ldrex	r3, [r3]
 80030a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80030a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	3308      	adds	r3, #8
 80030b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80030b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80030bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030be:	e841 2300 	strex	r3, r2, [r1]
 80030c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80030c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1e3      	bne.n	8003092 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e0:	e853 3f00 	ldrex	r3, [r3]
 80030e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030e8:	f023 0310 	bic.w	r3, r3, #16
 80030ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	461a      	mov	r2, r3
 80030f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80030fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003100:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003102:	e841 2300 	strex	r3, r2, [r1]
 8003106:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1e4      	bne.n	80030d8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd ff52 	bl	8000fbc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800312a:	b29b      	uxth	r3, r3
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	b29b      	uxth	r3, r3
 8003130:	4619      	mov	r1, r3
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f8d6 	bl	80032e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003138:	e0a4      	b.n	8003284 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003146:	b29b      	uxth	r3, r3
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 8096 	beq.w	8003288 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800315c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 8091 	beq.w	8003288 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316e:	e853 3f00 	ldrex	r3, [r3]
 8003172:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003176:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800317a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003188:	647b      	str	r3, [r7, #68]	; 0x44
 800318a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800318e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003190:	e841 2300 	strex	r3, r2, [r1]
 8003194:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1e4      	bne.n	8003166 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3308      	adds	r3, #8
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	e853 3f00 	ldrex	r3, [r3]
 80031aa:	623b      	str	r3, [r7, #32]
   return(result);
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	f023 0301 	bic.w	r3, r3, #1
 80031b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3308      	adds	r3, #8
 80031bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031c0:	633a      	str	r2, [r7, #48]	; 0x30
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031c8:	e841 2300 	strex	r3, r2, [r1]
 80031cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1e3      	bne.n	800319c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	e853 3f00 	ldrex	r3, [r3]
 80031f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f023 0310 	bic.w	r3, r3, #16
 80031fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800320a:	61fb      	str	r3, [r7, #28]
 800320c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320e:	69b9      	ldr	r1, [r7, #24]
 8003210:	69fa      	ldr	r2, [r7, #28]
 8003212:	e841 2300 	strex	r3, r2, [r1]
 8003216:	617b      	str	r3, [r7, #20]
   return(result);
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1e4      	bne.n	80031e8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2202      	movs	r2, #2
 8003222:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003224:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003228:	4619      	mov	r1, r3
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f85a 	bl	80032e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003230:	e02a      	b.n	8003288 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00e      	beq.n	800325c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800323e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003246:	2b00      	cmp	r3, #0
 8003248:	d008      	beq.n	800325c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800324e:	2b00      	cmp	r3, #0
 8003250:	d01c      	beq.n	800328c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	4798      	blx	r3
    }
    return;
 800325a:	e017      	b.n	800328c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800325c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003264:	2b00      	cmp	r3, #0
 8003266:	d012      	beq.n	800328e <HAL_UART_IRQHandler+0x59e>
 8003268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800326c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00c      	beq.n	800328e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 fed0 	bl	800401a <UART_EndTransmit_IT>
    return;
 800327a:	e008      	b.n	800328e <HAL_UART_IRQHandler+0x59e>
      return;
 800327c:	bf00      	nop
 800327e:	e006      	b.n	800328e <HAL_UART_IRQHandler+0x59e>
    return;
 8003280:	bf00      	nop
 8003282:	e004      	b.n	800328e <HAL_UART_IRQHandler+0x59e>
      return;
 8003284:	bf00      	nop
 8003286:	e002      	b.n	800328e <HAL_UART_IRQHandler+0x59e>
      return;
 8003288:	bf00      	nop
 800328a:	e000      	b.n	800328e <HAL_UART_IRQHandler+0x59e>
    return;
 800328c:	bf00      	nop
  }

}
 800328e:	37e8      	adds	r7, #232	; 0xe8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	4ba6      	ldr	r3, [pc, #664]	; (80035c0 <UART_SetConfig+0x2c4>)
 8003328:	4013      	ands	r3, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	6979      	ldr	r1, [r7, #20]
 8003330:	430b      	orrs	r3, r1
 8003332:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	4313      	orrs	r3, r2
 8003358:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	430a      	orrs	r2, r1
 800336c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a94      	ldr	r2, [pc, #592]	; (80035c4 <UART_SetConfig+0x2c8>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d120      	bne.n	80033ba <UART_SetConfig+0xbe>
 8003378:	4b93      	ldr	r3, [pc, #588]	; (80035c8 <UART_SetConfig+0x2cc>)
 800337a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	2b03      	cmp	r3, #3
 8003384:	d816      	bhi.n	80033b4 <UART_SetConfig+0xb8>
 8003386:	a201      	add	r2, pc, #4	; (adr r2, 800338c <UART_SetConfig+0x90>)
 8003388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338c:	0800339d 	.word	0x0800339d
 8003390:	080033a9 	.word	0x080033a9
 8003394:	080033a3 	.word	0x080033a3
 8003398:	080033af 	.word	0x080033af
 800339c:	2301      	movs	r3, #1
 800339e:	77fb      	strb	r3, [r7, #31]
 80033a0:	e150      	b.n	8003644 <UART_SetConfig+0x348>
 80033a2:	2302      	movs	r3, #2
 80033a4:	77fb      	strb	r3, [r7, #31]
 80033a6:	e14d      	b.n	8003644 <UART_SetConfig+0x348>
 80033a8:	2304      	movs	r3, #4
 80033aa:	77fb      	strb	r3, [r7, #31]
 80033ac:	e14a      	b.n	8003644 <UART_SetConfig+0x348>
 80033ae:	2308      	movs	r3, #8
 80033b0:	77fb      	strb	r3, [r7, #31]
 80033b2:	e147      	b.n	8003644 <UART_SetConfig+0x348>
 80033b4:	2310      	movs	r3, #16
 80033b6:	77fb      	strb	r3, [r7, #31]
 80033b8:	e144      	b.n	8003644 <UART_SetConfig+0x348>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a83      	ldr	r2, [pc, #524]	; (80035cc <UART_SetConfig+0x2d0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d132      	bne.n	800342a <UART_SetConfig+0x12e>
 80033c4:	4b80      	ldr	r3, [pc, #512]	; (80035c8 <UART_SetConfig+0x2cc>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b0c      	cmp	r3, #12
 80033d0:	d828      	bhi.n	8003424 <UART_SetConfig+0x128>
 80033d2:	a201      	add	r2, pc, #4	; (adr r2, 80033d8 <UART_SetConfig+0xdc>)
 80033d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d8:	0800340d 	.word	0x0800340d
 80033dc:	08003425 	.word	0x08003425
 80033e0:	08003425 	.word	0x08003425
 80033e4:	08003425 	.word	0x08003425
 80033e8:	08003419 	.word	0x08003419
 80033ec:	08003425 	.word	0x08003425
 80033f0:	08003425 	.word	0x08003425
 80033f4:	08003425 	.word	0x08003425
 80033f8:	08003413 	.word	0x08003413
 80033fc:	08003425 	.word	0x08003425
 8003400:	08003425 	.word	0x08003425
 8003404:	08003425 	.word	0x08003425
 8003408:	0800341f 	.word	0x0800341f
 800340c:	2300      	movs	r3, #0
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e118      	b.n	8003644 <UART_SetConfig+0x348>
 8003412:	2302      	movs	r3, #2
 8003414:	77fb      	strb	r3, [r7, #31]
 8003416:	e115      	b.n	8003644 <UART_SetConfig+0x348>
 8003418:	2304      	movs	r3, #4
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e112      	b.n	8003644 <UART_SetConfig+0x348>
 800341e:	2308      	movs	r3, #8
 8003420:	77fb      	strb	r3, [r7, #31]
 8003422:	e10f      	b.n	8003644 <UART_SetConfig+0x348>
 8003424:	2310      	movs	r3, #16
 8003426:	77fb      	strb	r3, [r7, #31]
 8003428:	e10c      	b.n	8003644 <UART_SetConfig+0x348>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a68      	ldr	r2, [pc, #416]	; (80035d0 <UART_SetConfig+0x2d4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d120      	bne.n	8003476 <UART_SetConfig+0x17a>
 8003434:	4b64      	ldr	r3, [pc, #400]	; (80035c8 <UART_SetConfig+0x2cc>)
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800343e:	2b30      	cmp	r3, #48	; 0x30
 8003440:	d013      	beq.n	800346a <UART_SetConfig+0x16e>
 8003442:	2b30      	cmp	r3, #48	; 0x30
 8003444:	d814      	bhi.n	8003470 <UART_SetConfig+0x174>
 8003446:	2b20      	cmp	r3, #32
 8003448:	d009      	beq.n	800345e <UART_SetConfig+0x162>
 800344a:	2b20      	cmp	r3, #32
 800344c:	d810      	bhi.n	8003470 <UART_SetConfig+0x174>
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <UART_SetConfig+0x15c>
 8003452:	2b10      	cmp	r3, #16
 8003454:	d006      	beq.n	8003464 <UART_SetConfig+0x168>
 8003456:	e00b      	b.n	8003470 <UART_SetConfig+0x174>
 8003458:	2300      	movs	r3, #0
 800345a:	77fb      	strb	r3, [r7, #31]
 800345c:	e0f2      	b.n	8003644 <UART_SetConfig+0x348>
 800345e:	2302      	movs	r3, #2
 8003460:	77fb      	strb	r3, [r7, #31]
 8003462:	e0ef      	b.n	8003644 <UART_SetConfig+0x348>
 8003464:	2304      	movs	r3, #4
 8003466:	77fb      	strb	r3, [r7, #31]
 8003468:	e0ec      	b.n	8003644 <UART_SetConfig+0x348>
 800346a:	2308      	movs	r3, #8
 800346c:	77fb      	strb	r3, [r7, #31]
 800346e:	e0e9      	b.n	8003644 <UART_SetConfig+0x348>
 8003470:	2310      	movs	r3, #16
 8003472:	77fb      	strb	r3, [r7, #31]
 8003474:	e0e6      	b.n	8003644 <UART_SetConfig+0x348>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a56      	ldr	r2, [pc, #344]	; (80035d4 <UART_SetConfig+0x2d8>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d120      	bne.n	80034c2 <UART_SetConfig+0x1c6>
 8003480:	4b51      	ldr	r3, [pc, #324]	; (80035c8 <UART_SetConfig+0x2cc>)
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003486:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800348a:	2bc0      	cmp	r3, #192	; 0xc0
 800348c:	d013      	beq.n	80034b6 <UART_SetConfig+0x1ba>
 800348e:	2bc0      	cmp	r3, #192	; 0xc0
 8003490:	d814      	bhi.n	80034bc <UART_SetConfig+0x1c0>
 8003492:	2b80      	cmp	r3, #128	; 0x80
 8003494:	d009      	beq.n	80034aa <UART_SetConfig+0x1ae>
 8003496:	2b80      	cmp	r3, #128	; 0x80
 8003498:	d810      	bhi.n	80034bc <UART_SetConfig+0x1c0>
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <UART_SetConfig+0x1a8>
 800349e:	2b40      	cmp	r3, #64	; 0x40
 80034a0:	d006      	beq.n	80034b0 <UART_SetConfig+0x1b4>
 80034a2:	e00b      	b.n	80034bc <UART_SetConfig+0x1c0>
 80034a4:	2300      	movs	r3, #0
 80034a6:	77fb      	strb	r3, [r7, #31]
 80034a8:	e0cc      	b.n	8003644 <UART_SetConfig+0x348>
 80034aa:	2302      	movs	r3, #2
 80034ac:	77fb      	strb	r3, [r7, #31]
 80034ae:	e0c9      	b.n	8003644 <UART_SetConfig+0x348>
 80034b0:	2304      	movs	r3, #4
 80034b2:	77fb      	strb	r3, [r7, #31]
 80034b4:	e0c6      	b.n	8003644 <UART_SetConfig+0x348>
 80034b6:	2308      	movs	r3, #8
 80034b8:	77fb      	strb	r3, [r7, #31]
 80034ba:	e0c3      	b.n	8003644 <UART_SetConfig+0x348>
 80034bc:	2310      	movs	r3, #16
 80034be:	77fb      	strb	r3, [r7, #31]
 80034c0:	e0c0      	b.n	8003644 <UART_SetConfig+0x348>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a44      	ldr	r2, [pc, #272]	; (80035d8 <UART_SetConfig+0x2dc>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d125      	bne.n	8003518 <UART_SetConfig+0x21c>
 80034cc:	4b3e      	ldr	r3, [pc, #248]	; (80035c8 <UART_SetConfig+0x2cc>)
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034da:	d017      	beq.n	800350c <UART_SetConfig+0x210>
 80034dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034e0:	d817      	bhi.n	8003512 <UART_SetConfig+0x216>
 80034e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e6:	d00b      	beq.n	8003500 <UART_SetConfig+0x204>
 80034e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ec:	d811      	bhi.n	8003512 <UART_SetConfig+0x216>
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <UART_SetConfig+0x1fe>
 80034f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f6:	d006      	beq.n	8003506 <UART_SetConfig+0x20a>
 80034f8:	e00b      	b.n	8003512 <UART_SetConfig+0x216>
 80034fa:	2300      	movs	r3, #0
 80034fc:	77fb      	strb	r3, [r7, #31]
 80034fe:	e0a1      	b.n	8003644 <UART_SetConfig+0x348>
 8003500:	2302      	movs	r3, #2
 8003502:	77fb      	strb	r3, [r7, #31]
 8003504:	e09e      	b.n	8003644 <UART_SetConfig+0x348>
 8003506:	2304      	movs	r3, #4
 8003508:	77fb      	strb	r3, [r7, #31]
 800350a:	e09b      	b.n	8003644 <UART_SetConfig+0x348>
 800350c:	2308      	movs	r3, #8
 800350e:	77fb      	strb	r3, [r7, #31]
 8003510:	e098      	b.n	8003644 <UART_SetConfig+0x348>
 8003512:	2310      	movs	r3, #16
 8003514:	77fb      	strb	r3, [r7, #31]
 8003516:	e095      	b.n	8003644 <UART_SetConfig+0x348>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a2f      	ldr	r2, [pc, #188]	; (80035dc <UART_SetConfig+0x2e0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d125      	bne.n	800356e <UART_SetConfig+0x272>
 8003522:	4b29      	ldr	r3, [pc, #164]	; (80035c8 <UART_SetConfig+0x2cc>)
 8003524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003528:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800352c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003530:	d017      	beq.n	8003562 <UART_SetConfig+0x266>
 8003532:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003536:	d817      	bhi.n	8003568 <UART_SetConfig+0x26c>
 8003538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800353c:	d00b      	beq.n	8003556 <UART_SetConfig+0x25a>
 800353e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003542:	d811      	bhi.n	8003568 <UART_SetConfig+0x26c>
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <UART_SetConfig+0x254>
 8003548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354c:	d006      	beq.n	800355c <UART_SetConfig+0x260>
 800354e:	e00b      	b.n	8003568 <UART_SetConfig+0x26c>
 8003550:	2301      	movs	r3, #1
 8003552:	77fb      	strb	r3, [r7, #31]
 8003554:	e076      	b.n	8003644 <UART_SetConfig+0x348>
 8003556:	2302      	movs	r3, #2
 8003558:	77fb      	strb	r3, [r7, #31]
 800355a:	e073      	b.n	8003644 <UART_SetConfig+0x348>
 800355c:	2304      	movs	r3, #4
 800355e:	77fb      	strb	r3, [r7, #31]
 8003560:	e070      	b.n	8003644 <UART_SetConfig+0x348>
 8003562:	2308      	movs	r3, #8
 8003564:	77fb      	strb	r3, [r7, #31]
 8003566:	e06d      	b.n	8003644 <UART_SetConfig+0x348>
 8003568:	2310      	movs	r3, #16
 800356a:	77fb      	strb	r3, [r7, #31]
 800356c:	e06a      	b.n	8003644 <UART_SetConfig+0x348>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a1b      	ldr	r2, [pc, #108]	; (80035e0 <UART_SetConfig+0x2e4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d138      	bne.n	80035ea <UART_SetConfig+0x2ee>
 8003578:	4b13      	ldr	r3, [pc, #76]	; (80035c8 <UART_SetConfig+0x2cc>)
 800357a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003582:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003586:	d017      	beq.n	80035b8 <UART_SetConfig+0x2bc>
 8003588:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800358c:	d82a      	bhi.n	80035e4 <UART_SetConfig+0x2e8>
 800358e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003592:	d00b      	beq.n	80035ac <UART_SetConfig+0x2b0>
 8003594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003598:	d824      	bhi.n	80035e4 <UART_SetConfig+0x2e8>
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <UART_SetConfig+0x2aa>
 800359e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a2:	d006      	beq.n	80035b2 <UART_SetConfig+0x2b6>
 80035a4:	e01e      	b.n	80035e4 <UART_SetConfig+0x2e8>
 80035a6:	2300      	movs	r3, #0
 80035a8:	77fb      	strb	r3, [r7, #31]
 80035aa:	e04b      	b.n	8003644 <UART_SetConfig+0x348>
 80035ac:	2302      	movs	r3, #2
 80035ae:	77fb      	strb	r3, [r7, #31]
 80035b0:	e048      	b.n	8003644 <UART_SetConfig+0x348>
 80035b2:	2304      	movs	r3, #4
 80035b4:	77fb      	strb	r3, [r7, #31]
 80035b6:	e045      	b.n	8003644 <UART_SetConfig+0x348>
 80035b8:	2308      	movs	r3, #8
 80035ba:	77fb      	strb	r3, [r7, #31]
 80035bc:	e042      	b.n	8003644 <UART_SetConfig+0x348>
 80035be:	bf00      	nop
 80035c0:	efff69f3 	.word	0xefff69f3
 80035c4:	40011000 	.word	0x40011000
 80035c8:	40023800 	.word	0x40023800
 80035cc:	40004400 	.word	0x40004400
 80035d0:	40004800 	.word	0x40004800
 80035d4:	40004c00 	.word	0x40004c00
 80035d8:	40005000 	.word	0x40005000
 80035dc:	40011400 	.word	0x40011400
 80035e0:	40007800 	.word	0x40007800
 80035e4:	2310      	movs	r3, #16
 80035e6:	77fb      	strb	r3, [r7, #31]
 80035e8:	e02c      	b.n	8003644 <UART_SetConfig+0x348>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a72      	ldr	r2, [pc, #456]	; (80037b8 <UART_SetConfig+0x4bc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d125      	bne.n	8003640 <UART_SetConfig+0x344>
 80035f4:	4b71      	ldr	r3, [pc, #452]	; (80037bc <UART_SetConfig+0x4c0>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003602:	d017      	beq.n	8003634 <UART_SetConfig+0x338>
 8003604:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003608:	d817      	bhi.n	800363a <UART_SetConfig+0x33e>
 800360a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800360e:	d00b      	beq.n	8003628 <UART_SetConfig+0x32c>
 8003610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003614:	d811      	bhi.n	800363a <UART_SetConfig+0x33e>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <UART_SetConfig+0x326>
 800361a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800361e:	d006      	beq.n	800362e <UART_SetConfig+0x332>
 8003620:	e00b      	b.n	800363a <UART_SetConfig+0x33e>
 8003622:	2300      	movs	r3, #0
 8003624:	77fb      	strb	r3, [r7, #31]
 8003626:	e00d      	b.n	8003644 <UART_SetConfig+0x348>
 8003628:	2302      	movs	r3, #2
 800362a:	77fb      	strb	r3, [r7, #31]
 800362c:	e00a      	b.n	8003644 <UART_SetConfig+0x348>
 800362e:	2304      	movs	r3, #4
 8003630:	77fb      	strb	r3, [r7, #31]
 8003632:	e007      	b.n	8003644 <UART_SetConfig+0x348>
 8003634:	2308      	movs	r3, #8
 8003636:	77fb      	strb	r3, [r7, #31]
 8003638:	e004      	b.n	8003644 <UART_SetConfig+0x348>
 800363a:	2310      	movs	r3, #16
 800363c:	77fb      	strb	r3, [r7, #31]
 800363e:	e001      	b.n	8003644 <UART_SetConfig+0x348>
 8003640:	2310      	movs	r3, #16
 8003642:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800364c:	d15b      	bne.n	8003706 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800364e:	7ffb      	ldrb	r3, [r7, #31]
 8003650:	2b08      	cmp	r3, #8
 8003652:	d828      	bhi.n	80036a6 <UART_SetConfig+0x3aa>
 8003654:	a201      	add	r2, pc, #4	; (adr r2, 800365c <UART_SetConfig+0x360>)
 8003656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365a:	bf00      	nop
 800365c:	08003681 	.word	0x08003681
 8003660:	08003689 	.word	0x08003689
 8003664:	08003691 	.word	0x08003691
 8003668:	080036a7 	.word	0x080036a7
 800366c:	08003697 	.word	0x08003697
 8003670:	080036a7 	.word	0x080036a7
 8003674:	080036a7 	.word	0x080036a7
 8003678:	080036a7 	.word	0x080036a7
 800367c:	0800369f 	.word	0x0800369f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003680:	f7fe fe10 	bl	80022a4 <HAL_RCC_GetPCLK1Freq>
 8003684:	61b8      	str	r0, [r7, #24]
        break;
 8003686:	e013      	b.n	80036b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003688:	f7fe fe20 	bl	80022cc <HAL_RCC_GetPCLK2Freq>
 800368c:	61b8      	str	r0, [r7, #24]
        break;
 800368e:	e00f      	b.n	80036b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003690:	4b4b      	ldr	r3, [pc, #300]	; (80037c0 <UART_SetConfig+0x4c4>)
 8003692:	61bb      	str	r3, [r7, #24]
        break;
 8003694:	e00c      	b.n	80036b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003696:	f7fe fcf3 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 800369a:	61b8      	str	r0, [r7, #24]
        break;
 800369c:	e008      	b.n	80036b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800369e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036a2:	61bb      	str	r3, [r7, #24]
        break;
 80036a4:	e004      	b.n	80036b0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	77bb      	strb	r3, [r7, #30]
        break;
 80036ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d074      	beq.n	80037a0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	005a      	lsls	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	085b      	lsrs	r3, r3, #1
 80036c0:	441a      	add	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	2b0f      	cmp	r3, #15
 80036d0:	d916      	bls.n	8003700 <UART_SetConfig+0x404>
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d8:	d212      	bcs.n	8003700 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	b29b      	uxth	r3, r3
 80036de:	f023 030f 	bic.w	r3, r3, #15
 80036e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	085b      	lsrs	r3, r3, #1
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	89fb      	ldrh	r3, [r7, #14]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	89fa      	ldrh	r2, [r7, #14]
 80036fc:	60da      	str	r2, [r3, #12]
 80036fe:	e04f      	b.n	80037a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	77bb      	strb	r3, [r7, #30]
 8003704:	e04c      	b.n	80037a0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003706:	7ffb      	ldrb	r3, [r7, #31]
 8003708:	2b08      	cmp	r3, #8
 800370a:	d828      	bhi.n	800375e <UART_SetConfig+0x462>
 800370c:	a201      	add	r2, pc, #4	; (adr r2, 8003714 <UART_SetConfig+0x418>)
 800370e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003712:	bf00      	nop
 8003714:	08003739 	.word	0x08003739
 8003718:	08003741 	.word	0x08003741
 800371c:	08003749 	.word	0x08003749
 8003720:	0800375f 	.word	0x0800375f
 8003724:	0800374f 	.word	0x0800374f
 8003728:	0800375f 	.word	0x0800375f
 800372c:	0800375f 	.word	0x0800375f
 8003730:	0800375f 	.word	0x0800375f
 8003734:	08003757 	.word	0x08003757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003738:	f7fe fdb4 	bl	80022a4 <HAL_RCC_GetPCLK1Freq>
 800373c:	61b8      	str	r0, [r7, #24]
        break;
 800373e:	e013      	b.n	8003768 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003740:	f7fe fdc4 	bl	80022cc <HAL_RCC_GetPCLK2Freq>
 8003744:	61b8      	str	r0, [r7, #24]
        break;
 8003746:	e00f      	b.n	8003768 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003748:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <UART_SetConfig+0x4c4>)
 800374a:	61bb      	str	r3, [r7, #24]
        break;
 800374c:	e00c      	b.n	8003768 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800374e:	f7fe fc97 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 8003752:	61b8      	str	r0, [r7, #24]
        break;
 8003754:	e008      	b.n	8003768 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800375a:	61bb      	str	r3, [r7, #24]
        break;
 800375c:	e004      	b.n	8003768 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	77bb      	strb	r3, [r7, #30]
        break;
 8003766:	bf00      	nop
    }

    if (pclk != 0U)
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d018      	beq.n	80037a0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	085a      	lsrs	r2, r3, #1
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	441a      	add	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003780:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	2b0f      	cmp	r3, #15
 8003786:	d909      	bls.n	800379c <UART_SetConfig+0x4a0>
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800378e:	d205      	bcs.n	800379c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	b29a      	uxth	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	60da      	str	r2, [r3, #12]
 800379a:	e001      	b.n	80037a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80037ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3720      	adds	r7, #32
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40007c00 	.word	0x40007c00
 80037bc:	40023800 	.word	0x40023800
 80037c0:	00f42400 	.word	0x00f42400

080037c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	f003 0320 	and.w	r3, r3, #32
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01a      	beq.n	80038da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038c2:	d10a      	bne.n	80038da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	605a      	str	r2, [r3, #4]
  }
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af02      	add	r7, sp, #8
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003918:	f7fd f924 	bl	8000b64 <HAL_GetTick>
 800391c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b08      	cmp	r3, #8
 800392a:	d10e      	bne.n	800394a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800392c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f81b 	bl	8003976 <UART_WaitOnFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e011      	b.n	800396e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b09c      	sub	sp, #112	; 0x70
 800397a:	af00      	add	r7, sp, #0
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	603b      	str	r3, [r7, #0]
 8003982:	4613      	mov	r3, r2
 8003984:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003986:	e0a7      	b.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800398a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398e:	f000 80a3 	beq.w	8003ad8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003992:	f7fd f8e7 	bl	8000b64 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800399e:	429a      	cmp	r2, r3
 80039a0:	d302      	bcc.n	80039a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80039a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d13f      	bne.n	8003a28 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b0:	e853 3f00 	ldrex	r3, [r3]
 80039b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80039b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039bc:	667b      	str	r3, [r7, #100]	; 0x64
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80039cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039ce:	e841 2300 	strex	r3, r2, [r1]
 80039d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80039d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1e6      	bne.n	80039a8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3308      	adds	r3, #8
 80039e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e4:	e853 3f00 	ldrex	r3, [r3]
 80039e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ec:	f023 0301 	bic.w	r3, r3, #1
 80039f0:	663b      	str	r3, [r7, #96]	; 0x60
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3308      	adds	r3, #8
 80039f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80039fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a02:	e841 2300 	strex	r3, r2, [r1]
 8003a06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1e5      	bne.n	80039da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2220      	movs	r2, #32
 8003a12:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e068      	b.n	8003afa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d050      	beq.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a44:	d148      	bne.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a4e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a58:	e853 3f00 	ldrex	r3, [r3]
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a70:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a76:	e841 2300 	strex	r3, r2, [r1]
 8003a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1e6      	bne.n	8003a50 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	3308      	adds	r3, #8
 8003a88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	e853 3f00 	ldrex	r3, [r3]
 8003a90:	613b      	str	r3, [r7, #16]
   return(result);
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f023 0301 	bic.w	r3, r3, #1
 8003a98:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003aa2:	623a      	str	r2, [r7, #32]
 8003aa4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa6:	69f9      	ldr	r1, [r7, #28]
 8003aa8:	6a3a      	ldr	r2, [r7, #32]
 8003aaa:	e841 2300 	strex	r3, r2, [r1]
 8003aae:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1e5      	bne.n	8003a82 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e010      	b.n	8003afa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69da      	ldr	r2, [r3, #28]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	bf0c      	ite	eq
 8003ae8:	2301      	moveq	r3, #1
 8003aea:	2300      	movne	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	461a      	mov	r2, r3
 8003af0:	79fb      	ldrb	r3, [r7, #7]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	f43f af48 	beq.w	8003988 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3770      	adds	r7, #112	; 0x70
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b096      	sub	sp, #88	; 0x58
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	88fa      	ldrh	r2, [r7, #6]
 8003b1c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2222      	movs	r2, #34	; 0x22
 8003b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d028      	beq.n	8003b8a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b3c:	4a3e      	ldr	r2, [pc, #248]	; (8003c38 <UART_Start_Receive_DMA+0x134>)
 8003b3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b44:	4a3d      	ldr	r2, [pc, #244]	; (8003c3c <UART_Start_Receive_DMA+0x138>)
 8003b46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b4c:	4a3c      	ldr	r2, [pc, #240]	; (8003c40 <UART_Start_Receive_DMA+0x13c>)
 8003b4e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b54:	2200      	movs	r2, #0
 8003b56:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3324      	adds	r3, #36	; 0x24
 8003b62:	4619      	mov	r1, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b68:	461a      	mov	r2, r3
 8003b6a:	88fb      	ldrh	r3, [r7, #6]
 8003b6c:	f7fd f9c6 	bl	8000efc <HAL_DMA_Start_IT>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d009      	beq.n	8003b8a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2210      	movs	r2, #16
 8003b7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e051      	b.n	8003c2e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d018      	beq.n	8003bc4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b9a:	e853 3f00 	ldrex	r3, [r3]
 8003b9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	461a      	mov	r2, r3
 8003bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bb2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003bb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bb8:	e841 2300 	strex	r3, r2, [r1]
 8003bbc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1e6      	bne.n	8003b92 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3308      	adds	r3, #8
 8003bca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bce:	e853 3f00 	ldrex	r3, [r3]
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	653b      	str	r3, [r7, #80]	; 0x50
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3308      	adds	r3, #8
 8003be2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003be4:	637a      	str	r2, [r7, #52]	; 0x34
 8003be6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bec:	e841 2300 	strex	r3, r2, [r1]
 8003bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e5      	bne.n	8003bc4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3308      	adds	r3, #8
 8003bfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	613b      	str	r3, [r7, #16]
   return(result);
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3308      	adds	r3, #8
 8003c16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c18:	623a      	str	r2, [r7, #32]
 8003c1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	69f9      	ldr	r1, [r7, #28]
 8003c1e:	6a3a      	ldr	r2, [r7, #32]
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e5      	bne.n	8003bf8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3758      	adds	r7, #88	; 0x58
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	08003e0b 	.word	0x08003e0b
 8003c3c:	08003f33 	.word	0x08003f33
 8003c40:	08003f71 	.word	0x08003f71

08003c44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b089      	sub	sp, #36	; 0x24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	e853 3f00 	ldrex	r3, [r3]
 8003c58:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003c60:	61fb      	str	r3, [r7, #28]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	61bb      	str	r3, [r7, #24]
 8003c6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6e:	6979      	ldr	r1, [r7, #20]
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	e841 2300 	strex	r3, r2, [r1]
 8003c76:	613b      	str	r3, [r7, #16]
   return(result);
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1e6      	bne.n	8003c4c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2220      	movs	r2, #32
 8003c82:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003c84:	bf00      	nop
 8003c86:	3724      	adds	r7, #36	; 0x24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b095      	sub	sp, #84	; 0x54
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca0:	e853 3f00 	ldrex	r3, [r3]
 8003ca4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb6:	643b      	str	r3, [r7, #64]	; 0x40
 8003cb8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cbe:	e841 2300 	strex	r3, r2, [r1]
 8003cc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e6      	bne.n	8003c98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3308      	adds	r3, #8
 8003cd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	e853 3f00 	ldrex	r3, [r3]
 8003cd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3308      	adds	r3, #8
 8003ce8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cf2:	e841 2300 	strex	r3, r2, [r1]
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1e5      	bne.n	8003cca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d118      	bne.n	8003d38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	e853 3f00 	ldrex	r3, [r3]
 8003d12:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	f023 0310 	bic.w	r3, r3, #16
 8003d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d28:	6979      	ldr	r1, [r7, #20]
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	e841 2300 	strex	r3, r2, [r1]
 8003d30:	613b      	str	r3, [r7, #16]
   return(result);
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1e6      	bne.n	8003d06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d4c:	bf00      	nop
 8003d4e:	3754      	adds	r7, #84	; 0x54
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b090      	sub	sp, #64	; 0x40
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d6e:	d037      	beq.n	8003de0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8003d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d72:	2200      	movs	r2, #0
 8003d74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3308      	adds	r3, #8
 8003d7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	e853 3f00 	ldrex	r3, [r3]
 8003d86:	623b      	str	r3, [r7, #32]
   return(result);
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3308      	adds	r3, #8
 8003d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d98:	633a      	str	r2, [r7, #48]	; 0x30
 8003d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003da0:	e841 2300 	strex	r3, r2, [r1]
 8003da4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1e5      	bne.n	8003d78 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dca:	61fb      	str	r3, [r7, #28]
 8003dcc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	69b9      	ldr	r1, [r7, #24]
 8003dd0:	69fa      	ldr	r2, [r7, #28]
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	617b      	str	r3, [r7, #20]
   return(result);
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e6      	bne.n	8003dac <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003dde:	e002      	b.n	8003de6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8003de0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003de2:	f7ff fa57 	bl	8003294 <HAL_UART_TxCpltCallback>
}
 8003de6:	bf00      	nop
 8003de8:	3740      	adds	r7, #64	; 0x40
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f7ff fa53 	bl	80032a8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e02:	bf00      	nop
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b09c      	sub	sp, #112	; 0x70
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e16:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e20:	d071      	beq.n	8003f06 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8003e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e24:	2200      	movs	r2, #0
 8003e26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	461a      	mov	r2, r3
 8003e46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e48:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e4a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e6      	bne.n	8003e2a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3308      	adds	r3, #8
 8003e62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e66:	e853 3f00 	ldrex	r3, [r3]
 8003e6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
 8003e72:	667b      	str	r3, [r7, #100]	; 0x64
 8003e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3308      	adds	r3, #8
 8003e7a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003e7c:	647a      	str	r2, [r7, #68]	; 0x44
 8003e7e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e84:	e841 2300 	strex	r3, r2, [r1]
 8003e88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1e5      	bne.n	8003e5c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3308      	adds	r3, #8
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	e853 3f00 	ldrex	r3, [r3]
 8003e9e:	623b      	str	r3, [r7, #32]
   return(result);
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ea6:	663b      	str	r3, [r7, #96]	; 0x60
 8003ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3308      	adds	r3, #8
 8003eae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003eb0:	633a      	str	r2, [r7, #48]	; 0x30
 8003eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eb8:	e841 2300 	strex	r3, r2, [r1]
 8003ebc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e5      	bne.n	8003e90 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d118      	bne.n	8003f06 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	e853 3f00 	ldrex	r3, [r3]
 8003ee0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f023 0310 	bic.w	r3, r3, #16
 8003ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef2:	61fb      	str	r3, [r7, #28]
 8003ef4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef6:	69b9      	ldr	r1, [r7, #24]
 8003ef8:	69fa      	ldr	r2, [r7, #28]
 8003efa:	e841 2300 	strex	r3, r2, [r1]
 8003efe:	617b      	str	r3, [r7, #20]
   return(result);
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1e6      	bne.n	8003ed4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f08:	2200      	movs	r2, #0
 8003f0a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d107      	bne.n	8003f24 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003f1e:	f7ff f9e1 	bl	80032e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f22:	e002      	b.n	8003f2a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8003f24:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003f26:	f7fc fc1d 	bl	8000764 <HAL_UART_RxCpltCallback>
}
 8003f2a:	bf00      	nop
 8003f2c:	3770      	adds	r7, #112	; 0x70
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b084      	sub	sp, #16
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2201      	movs	r2, #1
 8003f44:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d109      	bne.n	8003f62 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f54:	085b      	lsrs	r3, r3, #1
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	4619      	mov	r1, r3
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f7ff f9c2 	bl	80032e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f60:	e002      	b.n	8003f68 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f7ff f9aa 	bl	80032bc <HAL_UART_RxHalfCpltCallback>
}
 8003f68:	bf00      	nop
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f82:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f96:	2b80      	cmp	r3, #128	; 0x80
 8003f98:	d109      	bne.n	8003fae <UART_DMAError+0x3e>
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	2b21      	cmp	r3, #33	; 0x21
 8003f9e:	d106      	bne.n	8003fae <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003fa8:	6978      	ldr	r0, [r7, #20]
 8003faa:	f7ff fe4b 	bl	8003c44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb8:	2b40      	cmp	r3, #64	; 0x40
 8003fba:	d109      	bne.n	8003fd0 <UART_DMAError+0x60>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b22      	cmp	r3, #34	; 0x22
 8003fc0:	d106      	bne.n	8003fd0 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003fca:	6978      	ldr	r0, [r7, #20]
 8003fcc:	f7ff fe60 	bl	8003c90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fd6:	f043 0210 	orr.w	r2, r3, #16
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fe0:	6978      	ldr	r0, [r7, #20]
 8003fe2:	f7ff f975 	bl	80032d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fe6:	bf00      	nop
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b084      	sub	sp, #16
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f7ff f95f 	bl	80032d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004012:	bf00      	nop
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b088      	sub	sp, #32
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004036:	61fb      	str	r3, [r7, #28]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	461a      	mov	r2, r3
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004044:	6979      	ldr	r1, [r7, #20]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	e841 2300 	strex	r3, r2, [r1]
 800404c:	613b      	str	r3, [r7, #16]
   return(result);
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1e6      	bne.n	8004022 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7ff f917 	bl	8003294 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004066:	bf00      	nop
 8004068:	3720      	adds	r7, #32
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <__libc_init_array>:
 8004070:	b570      	push	{r4, r5, r6, lr}
 8004072:	4d0d      	ldr	r5, [pc, #52]	; (80040a8 <__libc_init_array+0x38>)
 8004074:	4c0d      	ldr	r4, [pc, #52]	; (80040ac <__libc_init_array+0x3c>)
 8004076:	1b64      	subs	r4, r4, r5
 8004078:	10a4      	asrs	r4, r4, #2
 800407a:	2600      	movs	r6, #0
 800407c:	42a6      	cmp	r6, r4
 800407e:	d109      	bne.n	8004094 <__libc_init_array+0x24>
 8004080:	4d0b      	ldr	r5, [pc, #44]	; (80040b0 <__libc_init_array+0x40>)
 8004082:	4c0c      	ldr	r4, [pc, #48]	; (80040b4 <__libc_init_array+0x44>)
 8004084:	f000 f820 	bl	80040c8 <_init>
 8004088:	1b64      	subs	r4, r4, r5
 800408a:	10a4      	asrs	r4, r4, #2
 800408c:	2600      	movs	r6, #0
 800408e:	42a6      	cmp	r6, r4
 8004090:	d105      	bne.n	800409e <__libc_init_array+0x2e>
 8004092:	bd70      	pop	{r4, r5, r6, pc}
 8004094:	f855 3b04 	ldr.w	r3, [r5], #4
 8004098:	4798      	blx	r3
 800409a:	3601      	adds	r6, #1
 800409c:	e7ee      	b.n	800407c <__libc_init_array+0xc>
 800409e:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a2:	4798      	blx	r3
 80040a4:	3601      	adds	r6, #1
 80040a6:	e7f2      	b.n	800408e <__libc_init_array+0x1e>
 80040a8:	08004108 	.word	0x08004108
 80040ac:	08004108 	.word	0x08004108
 80040b0:	08004108 	.word	0x08004108
 80040b4:	0800410c 	.word	0x0800410c

080040b8 <memset>:
 80040b8:	4402      	add	r2, r0
 80040ba:	4603      	mov	r3, r0
 80040bc:	4293      	cmp	r3, r2
 80040be:	d100      	bne.n	80040c2 <memset+0xa>
 80040c0:	4770      	bx	lr
 80040c2:	f803 1b01 	strb.w	r1, [r3], #1
 80040c6:	e7f9      	b.n	80040bc <memset+0x4>

080040c8 <_init>:
 80040c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ca:	bf00      	nop
 80040cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ce:	bc08      	pop	{r3}
 80040d0:	469e      	mov	lr, r3
 80040d2:	4770      	bx	lr

080040d4 <_fini>:
 80040d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d6:	bf00      	nop
 80040d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040da:	bc08      	pop	{r3}
 80040dc:	469e      	mov	lr, r3
 80040de:	4770      	bx	lr
